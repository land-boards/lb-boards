                        	titl "DGG-MIKBUG-M6802 OPERATING SYSTEM"
                        ;	DGG - Was "MIKES-M6802 OPERATING SYSTEM"
                        ;	DGG - Was REV 2.0
                        ;	Build for SIMPLE-6802
                        ;		http://land-boards.com/blwiki/index.php?title=SIMPLE-6802
                        ;	16KB build, code starts at $C000
                        ; 
                        ; DGG - D. Gilliland - My changes have DGG at the start of the line.
                        ; 	Uses a68 assembler. Command line to make S-Record output.
                        ;		A68 SMITHBUG_SIMPLE-6802_C000.ASM -l SMITHBUG_SIMPLE-6802_C000.LST -s SMITHBUG_SIMPLE-6802_C000.S
                        ;	Use srec_cat to shift from EPROM absolute addresses to 0x0000 as HEX file
                        ;		srec_cat SMITHBUG_SIMPLE-6802_C000.s -offset - -minimum-addr SMITHBUG_SIMPLE-6802_C000.s -o smithbugC000_IO-FC.hex -Intel
                        ;
                        ; This is the latest SMITHBUG+S1 source 
                        ; with the Disassembler "PSH A = MISSING A" bug removed 
                        ; [see TBLKUP routine, # sign did not replace  £ ].
                        ; I emailed Ed Smith but as yet no reply. - Mike Lee, April 24 2019
                        ;
                        ; July 30 2019 HRJ 
                        ; - corrected TBLKUP routine as above, adds 4 bytes to code
                        ; -  CMPX	VAR non- instruction commented out near GETCOUNT in S-record routine
                        ; -  SLOAD routine starts NINE bytes from previous code, TBLKUP only accounts for four                       ; -- difference of 5 occurs apparently in counting bytes in S1STRING
                        ;
                        ;	M	MOVE MEMORY
                        ;	E	CHANGE MEMORY
                        ;	G	GO TO PROGRAM
                        ;	R	PRINT
                        ;	T	TRACE PROGRAM
                        ;	@	ASCII CONVERSION
                        ;	H	PRINTER ON
                        ;	V	VIEW MEMORY
                        ;	I	FILL MEMORY
                        ;	J	JUMP TO TARGET PROGRAM
                        ;	F	FIND 
                        ;	Q	HARDWARE LOCATION
                        ;	D	DISASSEMBLE CODE
                        ;	K	CONTINUE AFTER BREAK
                        ;	1	BREAKPOINT ONE
                        ;	2	BREAKPOINT TWO
                        ;	&	S1 LOAD PROGRAM
                        ;	*	HARDWARE LOCATION (TBA)
                        ;	O	ECHO ON
                        ;	N	ECHO OFF
                        ;
                        ;
                        ;	ADDRESS
                        ;
                        ; DGG - Set the start of the scratchpad SRAM which is at the top of the 32KB of user memory
                        ;       to reflect the SIMPLE-6802 Memory Mao 
   7f00                 VAR	EQU	$7F00		; TOP OF USER MEMORY
                        ;
   7f00                 		ORG VAR
                        ; DGG - RAM variables for MIKBUG
   7f00                 BUFFER		RMB 2		;V2: Buffer to protect system scratch
   7f02                 IOV			RMB 2		;here and below same as V1
   7f04                 BEGA		RMB 2
   7f06                 ENDA		RMB 2
   7f08                 NIO			RMB 2
   7f0a                 SP			RMB 2
   7f0c                 ACIAT		RMB 1
   7f0d                 ECHO		RMB 1
   7f0e                 XHI			RMB 1
   7f0f                 XLOW		RMB 1
   7f10                 TEMP		RMB 1
   7f11                 TW			RMB 2
   7f13                 TFLAG		RMB 1
   7f14                 XTEMP		RMB 2
   7f16                 BKFLG		RMB 1
   7f17                 SWIPTR		RMB 45
   7f44                 STACK		RMB 8
   7f4c                 PRINTR		RMB 3
   7f4f                 BFLAG 		RMB 1
   7f50                 MFLAG		RMB 1
   7f51                 XFLAG		RMB 1
   7f52                 BITE2		RMB 1
   7f53                 BITE3		RMB 15
   7f62                 TSTACK		RMB 1
   7f63                 OPSAVE		RMB 1
   7f64                 PB1			RMB 1
   7f65                 PB2			RMB 1
   7f66                 PB3			RMB 1
   7f67                 BYTECT		RMB 1
   7f68                 PC1			RMB 1
   7f69                 PC2			RMB 1
   7f6a                 BPOINT		RMB 3
   7f6d                 BKFLG2		RMB 1
   7f6e                 MCONT		RMB 1
                        ; V2 S-record data area
   7f6f                 TEMPX1		RMB 2			; S-Load Temporary X register
   7f71                 ADDRESS		RMB 1			; Build 16 bit address byte 1
   7f72                 ADDRESS1	RMB 1			; Build 16 bit address byte 2
   7f73                 BYTESTORE	RMB 1			; Save Byte Count
   7f74                 TEMPA		RMB 1			; Save A Register
                        ; DGG - Fixed addresses for ACIA
   a000                 ACIACS	EQU	$A000
   a001                 ACIADA	EQU	$A001
                        ;
                        ;	OPT	MEMORY
                        ;
                        ; DGG - ROM at $C000 - $FFFF
   c000                 	ORG	$C000			;V1 has $F800H
                        ;
                        ;	ENTER POWER ON SEQUENCE
                        ;
   c000                 START EQU *
   c000   8e 7f 44      	LDS #STACK
   c003   bf 7f 0a      	STS SP
   c006   7f 7f 0d      	CLR ECHO		; DGG - default to serial port echo on
   c009   ce c1 25      	LDX #SFE		; DGG - VECTORED SWI ROUTINE
   c00c   ff 7f 17      	STX SWIPTR
   c00f   ff 7f 08      	STX NIO
                        ;
                        ;	ACIA INITIALISE
                        ;
   c012   86 03         	LDAA	#$03	;RESET CODE
   c014   b7 a0 00      	STAA	ACIACS
   c017   01            	NOP
   c018   01            	NOP
   c019   01            	NOP
   c01a   86 15         	LDAA	#$15	;8N1 NON-INTERRUPT
   c01c   b7 7f 0c      	STAA	ACIAT
                        ;
                        ;	COMMAND CONTROL
                        ;
   c01f   b6 7f 0c      CONTRL LDA A ACIAT
   c022   b7 a0 00      	STA A ACIACS
   c025   8e 7f 44      	LDS #STACK	;SET CONTRL STACK POINTER
   c028   8e 7f 62      	LDS #TSTACK
   c02b   7f 7f 13      	CLR TFLAG
   c02e   7f 7f 16      	CLR BKFLG
   c031   7f 7f 6d      	CLR BKFLG2
   c034   ce c7 6b      	LDX #MCL
   c037   8d 61         	BSR PDATA1
   c039   8d 59         	BSR INCH
   c03b   16            	TAB
   c03c   bd c0 ef      	JSR OUTS
                        ;
                        ; CHECK IF COMMAND IS VALID AND JUMP TO APPLICATION
                        ;
   c03f   ce c7 c0      	LDX #FUTABL
   c042   e1 00         NXTCHR CMP B 0,X
   c044   27 0b         	BEQ GOODCH
   c046   08            	INX
   c047   08            	INX
   c048   08            	INX
   c049   8c c7 fc      	CPX #TBLEND
   c04c   26 f4         	BNE NXTCHR
   c04e   7e c4 41      	JMP CKCBA
   c051   ee 01         GOODCH	LDX 1,X
   c053   6e 00         	JMP 0,X
                        ;
                        ;  IRQ INTERUPT SEQUENCE
                        ;
   c055   fe 7f 02      IO	LDX IOV
   c058   6e 00         	JMP 0,X
                        ;
                        ;  NMI SEQUENCE
                        ;
   c05a   fe 7f 08      POWDWN LDX NIO
   c05d   6e 00         	JMP 0,X
                        ;
                        ;  SWI SEQUENCE
                        ;
   c05f   fe 7f 17      SWI	LDX SWIPTR
   c062   6e 00         	JMP 0,X
   c064   86 3f         LOAD19 LDA A #$3F
   c066   8d 29         	BSR OUTCH
   c068   20 b5         C1	BRA CONTRL
                        ;
                        ;  BUILD ADDRESS
                        ;
   c06a   8d 0c         BADDR	BSR BYTE
   c06c   b7 7f 0e      	STA A XHI
   c06f   8d 07         	BSR BYTE
   c071   b7 7f 0f      	STA A XLOW
   c074   fe 7f 0e      	LDX XHI
   c077   39            	RTS
                        ;
                        ;  INPUT ONE BYTE
                        ;
   c078   8d 53         BYTE	BSR INHEX
   c07a   48            	ASL A
   c07b   48            	ASL A
   c07c   48            	ASL A
   c07d   48            	ASL A
   c07e   16            	TAB
   c07f   8d 4c         	BSR INHEX
   c081   1b            	ABA
   c082   39            	RTS
                        ;
                        ;  OUTPUT LEFT HEX NUMBER
                        ;
   c083   44            OUTHL	LSR A
   c084   44            	LSR A
   c085   44            	LSR A
   c086   44            	LSR A
                        ;
                        ;  OUTPUT RIGHT HEX NUMBER
                        ;
   c087   84 0f         OUTHR	AND A #$F
   c089   8b 30         	ADD A #$30
   c08b   81 39         	CMP A #$39
   c08d   23 02         	BLS OUTCH
   c08f   8b 07         	ADD A #$7
   c091   7e c2 0a      OUTCH	JMP OUTEEE
   c094   7e c1 f3      INCH	JMP INEEE
                        ;
   c097   8d f8         PDATA2	BSR OUTCH
   c099   08            	INX
   c09a   a6 00         PDATA1	LDA A 0,X
   c09c   81 04         	CMP A #$4
   c09e   26 f7         	BNE PDATA2
   c0a0   39            	RTS
                        ;
                        ; CHANGE MEMORY
                        ;
   c0a1   8d c7         CHANGE	BSR BADDR
   c0a3   ce c7 6b      CHA51	LDX #MCL
   c0a6   8d f2         	BSR PDATA1
   c0a8   8d 72         	BSR OUTXHI
   c0aa   8d 41         	BSR OUT2HS
   c0ac   ff 7f 0e      	STX XHI
   c0af   8d e3         	BSR INCH
   c0b1   81 20         	CMP A #$20
   c0b3   27 ee         	BEQ CHA51
   c0b5   81 5e         	CMP A #$5E
   c0b7   26 07         	BNE CHM1
   c0b9   09            	DEX
   c0ba   09            	DEX
   c0bb   ff 7f 0e      	STX XHI
   c0be   20 e3         	BRA CHA51
   c0c0   8d 0d         CHM1	BSR INHEX+2
   c0c2   8d b6         	BSR BYTE+2
   c0c4   09            	DEX
   c0c5   a7 00         	STA A 0,X
   c0c7   a1 00         	CMP A 0,X
   c0c9   27 d8         	BEQ CHA51
                        ;
   c0cb   20 97         XBK	BRA LOAD19
                        ;
   c0cd   8d c5         INHEX	BSR INCH
   c0cf   80 30         	SUB A #$30
   c0d1   2b 95         	BMI C1
   c0d3   81 09         	CMP A #$9
   c0d5   2f 0a         	BLE IN1HG
   c0d7   81 11         	CMP A #$11
   c0d9   2b 8d         	BMI C1
   c0db   81 16         	CMP A #$16
   c0dd   2e 89         	BGT C1
   c0df   80 07         	SUB A #$7
   c0e1   39            IN1HG	RTS
                        ;
                        ;
   c0e2   a6 00         OUT2H	LDA A 0,X
   c0e4   8d 9d         	BSR OUTHL
   c0e6   a6 00         	LDA A 0,X
   c0e8   08            	INX
   c0e9   20 9c         	BRA OUTHR
                        ;
   c0eb   8d f5         OUT4HS	BSR OUT2H
   c0ed   8d f3         OUT2HS	BSR OUT2H
   c0ef   86 20         OUTS	LDA A #$20
   c0f1   20 9e         	BRA OUTCH
                        ;
                        ; SET BREAK POINTS
                        ;
   c0f3   bd c2 61      BKPNT2	JSR ADDR
   c0f6   ff 7f 68      	STX PC1
   c0f9   a6 00         	LDA A 0,X
   c0fb   b7 7f 6d      	STA A BKFLG2
   c0fe   27 cb         	BEQ XBK
   c100   86 3f         	LDA A #$3F
   c102   a7 00         	STA A 0,X
   c104   bd c2 61      BKPNT	JSR ADDR
   c107   ff 7f 65      	STX PB2
   c10a   a6 00         	LDA A 0,X
   c10c   b7 7f 16      	STA A BKFLG
   c10f   27 ba         	BEQ XBK
   c111   86 3f         	LDA A #$3F
   c113   a7 00         	STA A 0,X
   c115   bd c2 c4      	JSR CRLF
                        ;
                        ; FALL INTO GO COMMAND
                        ;
   c118   be 7f 0a      CONTG	LDS SP
   c11b   3b            	RTI
                        ;
                        ; PRINT XHI ADDRESS SUB
                        ;
   c11c   ce 7f 0e      OUTXHI	LDX #XHI
   c11f   8d ca         	BSR OUT4HS
   c121   fe 7f 0e      	LDX XHI
   c124   39            	RTS
                        ;
                        ; VECTORED SWI ROUTINE
                        ;
   c125   bf 7f 0a      SFE	STS SP
   c128   30            	TSX
   c129   6d 06         	TST 6,X
   c12b   26 02         	BNE *+4
   c12d   6a 05         	DEC 5,X
   c12f   6a 06         	DEC 6,X
   c131   8e 7f 62      	LDS #TSTACK
   c134   7d 7f 13      	TST TFLAG
   c137   27 18         	BEQ PRINT
   c139   fe 7f 68      	LDX PC1
   c13c   b6 7f 63      	LDA A OPSAVE
   c13f   a7 00         	STA A 0,X
   c141   7d 7f 4f      	TST BFLAG
   c144   27 08         	BEQ DISPLY
   c146   fe 7f 6a      	LDX BPOINT
   c149   b6 7f 6c      	LDA A BPOINT+2
   c14c   a7 00         	STA A 0,X
   c14e   7e c2 e4      DISPLY	JMP RETURN
                        ;
                        ; PRINT REGISTERS
                        ;
   c151   fe 7f 0a      PRINT	LDX SP
   c154   86 06         	LDA A #6
   c156   b7 7f 6e      	STA A MCONT
   c159   e6 01         	LDA B 1,X
   c15b   58            	ASL B
   c15c   58            	ASL B
   c15d   ce c7 82      	LDX #CSET
                        ;
   c160   86 2d         DSOOP	LDA A #$2D
   c162   58            	ASL B
   c163   24 02         	BCC DSOOP1
   c165   a6 00         	LDA A 0,X
   c167   bd c2 0a      DSOOP1	JSR OUTEEE
   c16a   08            	INX
   c16b   7a 7f 6e      	DEC MCONT
   c16e   26 f0         	BNE DSOOP
   c170   ce c7 71      	LDX #BREG
   c173   8d 5a         	BSR PDAT
   c175   fe 7f 0a      	LDX SP
   c178   08            	INX
   c179   08            	INX
   c17a   bd c0 ed      	JSR OUT2HS
   c17d   ff 7f 10      	STX TEMP
   c180   ce c7 75      	LDX #AREG
   c183   8d 4a         	BSR PDAT
   c185   fe 7f 10      	LDX TEMP
   c188   bd c0 ed      	JSR OUT2HS
   c18b   ff 7f 10      	STX TEMP
   c18e   ce c7 78      	LDX #XREG
   c191   8d 3c         	BSR PDAT
   c193   fe 7f 10      	LDX TEMP
   c196   8d 52         	BSR PRTS
   c198   ff 7f 10      	STX TEMP
   c19b   7d 7f 13      	TST TFLAG
   c19e   26 0a         	BNE PNTS
   c1a0   ce c7 7e      	LDX #PCTR
   c1a3   8d 2a         	BSR PDAT
   c1a5   fe 7f 10      	LDX TEMP
   c1a8   8d 40         	BSR PRTS
   c1aa   ce c7 7b      PNTS	LDX #SREG
   c1ad   8d 20         	BSR PDAT
   c1af   ce 7f 0a      	LDX #SP
   c1b2   7d 7f 13      	TST TFLAG
   c1b5   26 22         	BNE PRINTS
   c1b7   8d 31         	BSR PRTS
                        ;
                        ; CHECK IF ANY BREAK POINTS ARE SET
                        ;
   c1b9   b6 7f 16      	LDA A BKFLG
   c1bc   26 0f         	BNE C2
   c1be   fe 7f 65      	LDX PB2
   c1c1   a7 00         	STA A 0,X
   c1c3   b6 7f 6d      	LDA A BKFLG2
   c1c6   27 05         	BEQ C2
   c1c8   fe 7f 68      	LDX PC1
   c1cb   a7 00         	STA A 0,X
   c1cd   20 1e         C2	BRA CR8
   c1cf   7e c0 9a      PDAT	JMP PDATA1
                        ;
                        ; SET ECHO FUNCTION
                        ;
   c1d2   5f            ECHON	CLR B
   c1d3   50            PRNTON NEG B
   c1d4   f7 7f 0d      ECHOFF STA B ECHO
   c1d7   20 14         	BRA CR8
                        ;
                        ;  PRINT STACK POINTER
                        ;
   c1d9   e6 00         PRINTS LDA B 0,X
   c1db   a6 01         	LDA A 1,X
   c1dd   8b 07         	ADD A #7
   c1df   c9 00         	ADC B #0
   c1e1   f7 7f 10      	STA B TEMP
   c1e4   b7 7f 11      	STA A TEMP+1
   c1e7   ce 7f 10      	LDX #TEMP
   c1ea   7e c0 eb      PRTS	JMP OUT4HS
                        ;
                        ;changes from version 1 are below see 006.jpg
                        ;
   c1ed   20 55         CR8	BRA IFILL1
                        ;
                        ;     SAVE X REGISTER
                        ;
   c1ef   ff 7f 14      SAV	STX XTEMP
   c1f2   39            	RTS
                        ;
                        ;	INPUT ONE CHAR INTO A-REGISTER
                        ;
   c1f3   8d fa         INEEE 	BSR	SAV
   c1f5   b6 a0 00      IN1	LDAA	ACIACS
   c1f8   47            	ASRA
   c1f9   24 fa         	BCC	IN1	;RECEIVE NOT READY
   c1fb   b6 a0 01      	LDAA	ACIADA	;INPUT CHARACTER
   c1fe   84 7f         	ANDA	#$7F	;RESET PARITY BIT
   c200   81 7f         	CMPA	#$7F
   c202   27 f1         	BEQ	IN1	;IF RUBOUT, GET NEXT CHAR
   c204   7d 7f 0d      	TST ECHO
   c207   2f 01         	BLE OUTEEE
   c209   39            	RTS
                        ;
                        ;	OUTPUT ONE CHAR 
                        ;
   c20a   36            OUTEEE	PSH	A
   c20b   b6 a0 00      OUTEEE1 LDA A	ACIACS
   c20e   47            	ASR A
   c20f   47            	ASR A
   c210   24 f9         	BCC	OUTEEE1
   c212   32            	PUL A
   c213   b7 a0 01      	STA A	ACIADA
   c216   39            	RTS
                        ;
                        ; changes from V1 are above
                        ;
                        ;  HERE ON JUMP COMMAND
                        ;
   c217   ce c7 b0      JUMP	LDX #TOADD
   c21a   8d 32         	BSR ENDADD+3
   c21c   8e 7f 44      	LDS #STACK
   c21f   6e 00         	JMP 0,X
                        ;
                        ;  ASCII IN "@" COMMAND
                        ;
   c221   8d 23         ASCII	BSR BAD2
   c223   08            	INX
   c224   09            ASC01	DEX
   c225   8d cc         ASC02	BSR INEEE
   c227   81 08         	CMP A #$8
   c229   27 f9         	BEQ ASC01
   c22b   a7 00         	STA A 0,X
   c22d   81 04         	CMP A #$4
   c22f   27 60         	BEQ CR9
   c231   08            	INX
   c232   20 f1         	BRA ASC02
                        ;
                        ;  FILL MEMORY "I" COMMAND
                        ;
   c234   8d 1e         IFILL	BSR LIMITS
   c236   8d 2e         	BSR VALUE
   c238   fe 7f 04      	LDX BEGA
   c23b   09            	DEX
   c23c   08            IFILL2	INX
   c23d   a7 00         	STA A 0,X
   c23f   bc 7f 06      	CPX ENDA
   c242   26 f8         	BNE IFILL2
   c244   20 4b         IFILL1	BRA CR9
                        ;
                        ;  INPUT DATA SUB ROUTINE
                        ;
   c246   ce c7 96      BAD2	LDX #FROMAD
   c249   20 03         	BRA *+5
   c24b   ce c7 a3      ENDADD	LDX #THRUAD
   c24e   bd c0 9a      	JSR PDATA1
   c251   7e c0 6a      	JMP BADDR
   c254   8d f0         LIMITS	BSR BAD2
   c256   ff 7f 04      	STX BEGA
   c259   8d f0         	BSR ENDADD
   c25b   ff 7f 06      	STX ENDA
   c25e   7e c2 c4      	JMP CRLF
   c261   fe c7 8c      ADDR	LDX ADASC
   c264   20 e8         	BRA ENDADD+3
   c266   ce c7 b9      VALUE	LDX #VALASC
   c269   bd c0 9a      	JSR PDATA1
   c26c   7e c0 78      	JMP BYTE
                        ;
                        ; BLOCK MOVE "M" COMMAND
                        ;
   c26f   8d e3         MOVE	BSR LIMITS
   c271   ce c7 b0      	LDX #TOADD
   c274   8d d8         	BSR ENDADD+3
   c276   fe 7f 04      	LDX BEGA
   c279   09            	DEX
   c27a   08            BMC1	INX
   c27b   a6 00         	LDA A 0,X
   c27d   ff 7f 04      	STX BEGA
   c280   fe 7f 0e      	LDX XHI
   c283   a7 00         	STA A 0,X
   c285   08            	INX
   c286   ff 7f 0e      	STX XHI
   c289   fe 7f 04      	LDX BEGA
   c28c   bc 7f 06      	CPX ENDA
   c28f   26 e9         	BNE BMC1
   c291   7e c0 1f      CR9	JMP CONTRL
                        ;
                        ;  SEARCH MEMORY "S" COMMAND
                        ;
   c294   8d be         FIND	BSR LIMITS
   c296   8d ce         	BSR VALUE
   c298   16            	TAB
   c299   fe 7f 04      	LDX BEGA
   c29c   09            	DEX
   c29d   08            SMC1	INX
   c29e   a6 00         	LDA A 0,X
   c2a0   11            	CBA
   c2a1   26 08         	BNE SMC2
   c2a3   ff 7f 0e      	STX XHI
   c2a6   8d 1c         	BSR CRLF
   c2a8   bd c1 1c      	JSR OUTXHI
   c2ab   bc 7f 06      SMC2	CPX ENDA
   c2ae   26 ed         	BNE SMC1
   c2b0   20 df         	BRA CR9
                        ;
                        ;  SUB ROUTINE TO ADD SPACE
                        ;
   c2b2   86 20         SKIP	LDA A #$20
   c2b4   bd c2 0a      	JSR OUTEEE
   c2b7   5a            	DEC B 
   c2b8   26 f8         	BNE SKIP
   c2ba   39            	RTS
                        ;
                        ;  PRINT BYTE IN A REGISTER
                        ;
   c2bb   b7 7f 67      PNTBYT	STA A BYTECT
   c2be   ce 7f 67      	LDX #BYTECT
   c2c1   7e c0 e2      	JMP OUT2H
                        ;
                        ;  CARRIAGE RETURN NON PROMPT
                        ;
   c2c4   ce c7 88      CRLF	LDX #CRLFAS
   c2c7   7e c0 9a      	JMP PDATA1
                        ;
                        ;  DISASSEMBLE "D" COMMAND
                        ;
   c2ca   bd c2 46      DISSA	JSR BAD2
   c2cd   20 1d         	BRA DISS
                        ;
                        ;  TRACE COMMAND "T"
                        ;
   c2cf   bd c2 46      TRACE	JSR 	BAD2
   c2d2   8d f0         	BSR 	CRLF
   c2d4   fe 7f 0a      	LDX 	SP
   c2d7   f6 7f 0e      	LDA B 	XHI
   c2da   e7 06         	STA B 	6,X
   c2dc   b6 7f 0f      	LDA A 	XLOW
   c2df   a7 07         	STA A 	7,X
   c2e1   7c 7f 13      KONTIN	INC 	TFLAG
   c2e4   bd c1 51      RETURN	JSR 	PRINT
   c2e7   fe 7f 0a      	LDX 	SP
   c2ea   ee 06         	LDX 	6,X
   c2ec   ff 7f 68      DISS	STX 	PC1
   c2ef   8d d3         DISIN	BSR 	CRLF
   c2f1   ce 7f 68      	LDX 	#PC1
   c2f4   bd c0 eb      	JSR 	OUT4HS
   c2f7   ce 7f 4f      	LDX 	#BFLAG
   c2fa   86 05         	LDA A 	#5
   c2fc   6f 00         CLEAR	CLR 	0,X
   c2fe   08            	INX
   c2ff   4a            	DEC A
   c300   26 fa         	BNE 	CLEAR
   c302   fe 7f 68      	LDX 	PC1
   c305   e6 00         	LDA B 0,X
   c307   bd c0 ed      	JSR 	OUT2HS
   c30a   ff 7f 68      	STX 	PC1
   c30d   a6 00         	LDA A 	0,X
   c30f   b7 7f 65      	STA A 	PB2
   c312   a6 01         	LDA A 	1,X
   c314   b7 7f 66      	STA A 	PB3
   c317   f7 7f 64      	STA B 	PB1
   c31a   17            	TBA
   c31b   bd c5 18      	JSR 	TBLKUP
   c31e   b6 7f 10      	LDA A 	TEMP
   c321   81 2a         	CMP A 	#$2A
   c323   26 03         	BNE 	OKOP
   c325   7e c3 e9      	JMP 	NOTBB
   c328   b6 7f 64      OKOP	LDA A 	PB1
   c32b   81 8d         	CMP A 	#$8D
   c32d   26 05         	BNE 	NEXT
   c32f   7c 7f 4f      	INC 	BFLAG
   c332   20 2d         	BRA 	PUT1
   c334   84 f0         NEXT	AND A 	#$F0
   c336   81 60         	CMP A 	#$60
   c338   27 18         	BEQ 	ISX
   c33a   81 a0         	CMP A 	#$A0
   c33c   27 14         	BEQ  	ISX
   c33e   81 e0         	CMP A	#$E0
   c340   27 10          	BEQ  	ISX
   c342   81 80         	CMP A	#$80
   c344   27 04         	BEQ 	IMM
   c346   81 c0         	CMP A 	#$C0
   c348   26 17         	BNE 	PUT1
   c34a   7c 7f 50      IMM	INC 	MFLAG
   c34d   ce c7 59      	LDX 	#SPLBD0
   c350   20 0c         	BRA 	PUT
   c352   7c 7f 51      ISX	INC 	XFLAG
   c355   b6 7f 65      	LDA A 	PB2
   c358   bd c2 bb      	JSR	PNTBYT
   c35b   ce c7 5c      	LDX 	#COMMX
   c35e   bd c0 9a      PUT	JSR 	PDATA1
   c361   fe 7f 68      PUT1	LDX 	PC1
   c364   b6 7f 64      	LDA A 	PB1
   c367   81 8c         	CMP A 	#$8C
   c369   27 1d         	BEQ 	BYT3
   c36b   81 8e         	CMP A 	#$8E
   c36d   27 19         	BEQ 	BYT3
   c36f   81 ce         	CMP A 	#$CE  
   c371   27 15         	BEQ 	BYT3
   c373   84 f0         	AND A 	#$F0
   c375   81 20         	CMP A 	#$20
   c377   26 05         	BNE 	NOTB
   c379   7c 7f 4f      	INC 	BFLAG
   c37c   20 25         	BRA 	BYT2
   c37e   81 60         NOTB	CMP A 	#$60
   c380   25 43         	BCS 	BYT1
   c382   84 30         	AND A 	#$30
   c384   81 30         	CMP A 	#$30
   c386   26 1b         	BNE 	BYT2
   c388   7c 7f 53      BYT3	INC 	BITE3
   c38b   7d 7f 50      	TST 	MFLAG
   c38e   26 05         	BNE 	BYT31
   c390   86 24         	LDA A 	#$24
   c392   bd c2 0a      	JSR 	OUTEEE
   c395   a6 00         BYT31	LDA A 	0,X
   c397   08            	INX
   c398   ff 7f 68      	STX 	PC1
   c39b   bd c2 bb      	JSR 	PNTBYT
   c39e   fe 7f 68      	LDX 	PC1
   c3a1   20 03         	BRA 	BYT21
   c3a3   7c 7f 52      BYT2	INC 	BITE2
   c3a6   a6 00         BYT21	LDA A 	0,X
   c3a8   08            	INX
   c3a9   ff 7f 68      	STX 	PC1
   c3ac   7d 7f 51      	TST 	XFLAG
   c3af   26 14         	BNE 	BYT1
   c3b1   7d 7f 53      	TST 	BITE3
   c3b4   26 0c         	BNE 	BYT22
   c3b6   7d 7f 50      	TST 	MFLAG
   c3b9   26 07         	BNE 	BYT22
   c3bb   16            	TAB
   c3bc   86 24         	LDA A 	#$24
   c3be   bd c2 0a      	JSR 	OUTEEE
   c3c1   17            	TBA
   c3c2   bd c2 bb      BYT22	JSR 	PNTBYT
   c3c5   7d 7f 4f      BYT1	TST 	BFLAG
   c3c8   27 1f         	BEQ 	NOTBB
   c3ca   c6 03         	LDA B 	#3
   c3cc   bd c2 b2      	JSR 	SKIP
   c3cf   4f            	CLR A
   c3d0   f6 7f 65      	LDA B 	PB2
   c3d3   2c 02         	BGE 	DPOS
   c3d5   86 ff         	LDA A 	#$FF
   c3d7   fb 7f 69      DPOS	ADD B 	PC2
   c3da   b9 7f 68      	ADC A 	PC1
   c3dd   b7 7f 6a      	STA A 	BPOINT
   c3e0   f7 7f 6b      	STA B 	BPOINT+1
   c3e3   ce 7f 6a      	LDX 	#BPOINT
   c3e6   bd c0 eb      	JSR 	OUT4HS
                        ;
                        ; PRINT ASCII VALUE OF INST
                        ;
   c3e9   c6 0d         NOTBB	LDA B #$D
   c3eb   86 01         	LDA A #1
   c3ed   7d 7f 52      	TST BITE2
   c3f0   27 19         	BEQ PAVOI3
   c3f2   c6 01         	LDA B #1
   c3f4   7d 7f 4f      	TST BFLAG
   c3f7   26 0e         	BNE PAVOI2
   c3f9   c6 08         	LDA B #8
   c3fb   7d 7f 50      	TST MFLAG
   c3fe   26 07         	BNE PAVOI2
   c400   7d 7f 50      	TST MFLAG
   c403   26 02         	BNE PAVOI2
   c405   c6 09         	LDA B #9
   c407   86 02         PAVOI2	LDA A #2
   c409   20 10         	BRA PAVOI8
                        ;
   c40b   7d 7f 53      PAVOI3	TST BITE3
   c40e   27 0b         	BEQ PAVOI8
   c410   86 03         	LDA A #3
   c412   c6 06         	LDA B #6
   c414   7d 7f 50      	TST MFLAG
   c417   27 02         	BEQ PAVOI8
   c419   c6 05         	LDA B #5
   c41b   36            PAVOI8	PSH A
   c41c   bd c2 b2      	JSR SKIP
   c41f   33            	PUL B
   c420   ce 7f 64      	LDX #PB1
   c423   a6 00         PAVOI4	LDA A 0,X
   c425   81 20         	CMP A #$20
   c427   2f 04         	BLE PAVOI5
   c429   81 60         	CMP A #$60
   c42b   2f 02         	BLE PAVOI9
   c42d   86 2e         PAVOI5	LDA A #$2E
   c42f   08            PAVOI9	INX
   c430   bd c2 0a      	JSR OUTEEE
   c433   5a            	DEC B
   c434   26 ed         	BNE PAVOI4
   c436   bd c1 f3      NOT1	JSR INEEE
   c439   16            	TAB
   c43a   bd c0 ef      	JSR OUTS
   c43d   c1 20         	CMP B #$20
   c43f   27 34         	BEQ DOT
                        ;
                        ;  CHECK INPUT COMMAND
                        ;  A, B, C, X, OR S
                        ;
   c441   fe 7f 0a      CKCBA	LDX SP
   c444   08            	INX
   c445   c1 43         	CMP B #$43
   c447   27 1c         	BEQ RDC
   c449   08            	INX
   c44a   c1 42         	CMP B #$42
   c44c   27 17         	BEQ RDC
   c44e   08            	INX
   c44f   c1 41         	CMP B #$41
   c451   27 12         	BEQ RDC
   c453   08            	INX
   c454   c1 58         	CMP B #$58
   c456   27 07         	BEQ RDX
   c458   ce 7f 0a      	LDX #SP
   c45b   c1 53         	CMP B #$53
   c45d   26 13         	BNE RETNOT
   c45f   bd c0 78      RDX	JSR BYTE
   c462   a7 00         	STA A 0,X
   c464   08            	INX
   c465   bd c0 78      RDC	JSR BYTE
   c468   a7 00         	STA A 0,X
   c46a   bd c2 c4      	JSR CRLF
   c46d   bd c1 51      	JSR PRINT
                        ;
                        ;  WILL RETURN HERE IN TRACE
                        ;
   c470   20 c4         	BRA NOT1
   c472   7e c0 1f      RETNOT	JMP CONTRL
   c475   7d 7f 13      DOT	TST TFLAG
   c478   26 03         	BNE DOT1
   c47a   7e c2 ef      	JMP DISIN
                        ;
   c47d   c6 3f         DOT1	LDA B #$3F
   c47f   b6 7f 64      	LDA A PB1
   c482   81 8d         	CMP A #$8D
   c484   26 09         	BNE TSTB
   c486   fe 7f 6a      	LDX BPOINT
   c489   ff 7f 68      	STX PC1
   c48c   7f 7f 4f      	CLR BFLAG
   c48f   7d 7f 4f      TSTB	TST BFLAG
   c492   27 0c         	BEQ TSTJ
   c494   fe 7f 6a      	LDX BPOINT
   c497   a6 00         	LDA A 0,X
   c499   b7 7f 6c      	STA A BPOINT+2
   c49c   e7 00         	STA B 0,X
   c49e   20 48         	BRA EXEC
                        ;
   c4a0   81 6e         TSTJ	CMP A #$6E
   c4a2   27 14         	BEQ ISXD
   c4a4   81 ad         	CMP A #$AD
   c4a6   27 10         	BEQ ISXD
   c4a8   81 7e         	CMP A #$7E
   c4aa   27 04         	BEQ ISJ
   c4ac   81 bd         	CMP A #$BD
   c4ae   26 1c         	BNE NOTJ
   c4b0   fe 7f 65      ISJ	LDX PB2
   c4b3   ff 7f 68      	STX PC1
   c4b6   20 30         	BRA EXEC
   c4b8   fe 7f 0a      ISXD	LDX SP
   c4bb   a6 05         	LDA A 5,X
   c4bd   bb 7f 65      	ADD A PB2
   c4c0   b7 7f 69      	STA A PC2
   c4c3   a6 04         	LDA A 4,X
   c4c5   89 00         	ADC A #0
   c4c7   b7 7f 68      	STA A PC1
   c4ca   20 1c         	BRA EXEC
                        ;
   c4cc   fe 7f 0a      NOTJ	LDX SP
   c4cf   81 39         	CMP A #$39
   c4d1   26 04         	BNE NOTRTS
   c4d3   ee 08         NOTJ1	LDX 8,X
   c4d5   20 06         	BRA EXR
                        ;
   c4d7   81 38         NOTRTS	CMP A #$38
   c4d9   26 05         	BNE NOTRTI
   c4db   ee 0d         	LDX 13,X
   c4dd   ff 7f 68      EXR	STX PC1
   c4e0   81 3f         NOTRTI	CMP A #$3F
   c4e2   27 15         	BEQ NONO
   c4e4   81 3e         	CMP A #$3E
   c4e6   27 11         	BEQ NONO
                        ;
   c4e8   fe 7f 68      EXEC	LDX PC1
   c4eb   a6 00         	LDA A 0,X
   c4ed   b7 7f 63      	STA A OPSAVE
   c4f0   e7 00         	STA B 0,X
   c4f2   e1 00         	CMP B 0,X
   c4f4   26 06         	BNE CKROM
   c4f6   7e c1 18      	JMP CONTG
                        ;
   c4f9   7e c0 64      NONO	JMP LOAD19
                        ;
   c4fc   b6 7f 68      CKROM	LDA A PC1
   c4ff   81 e0         	CMP A #$E0
   c501   25 f6         	BCS NONO
                        ;
                        ;  GET JSR OR JMP
                        ;
   c503   fe 7f 0a      	LDX SP
   c506   b6 7f 64      	LDA A PB1
   c509   81 7e         	CMP A #$7E
   c50b   27 c6         	BEQ NOTJ1
   c50d   81 bd         	CMP A #$BD
   c50f   26 e8         	BNE NONO
   c511   ee 06         	LDX 6,X
   c513   08            	INX
   c514   08            	INX
   c515   08            	INX
   c516   20 9b         	BRA ISJ+3
                        ;
                        ;Disassembler "PSH A = MISSING A" bug removed......
                        ;
                        ;  INSTRUCTION NMEMONIC LOOKUP
                        ;  ROUTINE FOR 68XX OP CODES
                        ;
   c518   81 40         TBLKUP CMP A #$40
   c51a   24 26         	BCC IMLR6
   c51c   bd c5 b0      IMLR1	JSR PNT3C
   c51f   b6 7f 64      	LDA A PB1
   c522   81 32         	CMP A #$32
   c524   27 11         	BEQ IMLR3
   c526   81 36         	CMP A #$36  ;had £ instead of #
   c528   27 0d         	BEQ IMLR3
   c52a   81 33         	CMP A #$33
   c52c   27 0e         	BEQ IMLR4
   c52e   81 37         	CMP A #$37
   c530   27 0a         	BEQ IMLR4
   c532   ce c7 5f      IMLR2	LDX #BLANK
   c535   20 08         	BRA IMLR5
                        ;
   c537   ce c7 63      IMLR3	LDX #PNTA
   c53a   20 03         	BRA IMLR5	;end of "bug removed"
                        ;
   c53c   ce c7 67      IMLR4	LDX #PNTB
   c53f   7e c0 9a      IMLR5	JMP PDATA1
   c542   81 4e         IMLR6	CMP A #$4E
   c544   27 04         	BEQ IMLR7
   c546   81 5e         	CMP A #$5E
   c548   26 03         	BNE IMLR8
                        ;
   c54a   4f            IMLR7	CLR A
   c54b   20 cf         	BRA IMLR1
                        ;
   c54d   81 80         IMLR8	CMP A #$80
   c54f   24 19         	BCC IMLR9
   c551   84 4f         	AND A #$4F
   c553   bd c5 b0      	JSR PNT3C
   c556   b6 7f 10      	LDA A TEMP
   c559   81 2a         	CMP A #$2A
   c55b   27 d5         	BEQ IMLR2
   c55d   b6 7f 64      	LDA A PB1
   c560   81 60         	CMP A #$60
   c562   24 ce         	BCC IMLR2
   c564   84 10         	AND A #$10
   c566   27 cf         	BEQ IMLR3
   c568   20 d2         	BRA IMLR4
                        ;
   c56a   84 3f         IMLR9	AND A #$3F
   c56c   81 0f         	CMP A #$F
   c56e   27 da         	BEQ IMLR7
   c570   81 07         	CMP A #$7
   c572   27 d6         	BEQ IMLR7
   c574   84 0f         	AND A #$F
   c576   81 03         	CMP A #$3
   c578   27 d0         	BEQ IMLR7
   c57a   81 0c         	CMP A #$C
   c57c   2c 0e         	BGE IMLR10
   c57e   8b 50         	ADD A #$50
   c580   bd c5 b0      	JSR PNT3C
   c583   b6 7f 64      	LDA A PB1
   c586   84 40         	AND A #$40
   c588   27 ad         	BEQ IMLR3
   c58a   20 b0         	BRA IMLR4
                        ;
   c58c   b6 7f 64      IMLR10	LDA A PB1
   c58f   81 8d         	CMP A #$8D
   c591   26 04         	BNE IMLR11
   c593   86 53         	LDA A #$53
   c595   20 85         	BRA IMLR1
                        ;
   c597   81 c0         IMLR11	CMP A #$C0
   c599   24 0a         	BCC IMLR12
   c59b   81 9d         	CMP A #$9D
   c59d   27 ab         	BEQ IMLR7
   c59f   84 0f         	AND A #$F
   c5a1   8b 50         	ADD A #$50
   c5a3   20 08         	BRA IMLR13
                        ;
   c5a5   84 0f         IMLR12	AND A #$F
   c5a7   8b 52         	ADD A #$52
   c5a9   81 60         	CMP A #$60
   c5ab   2d 9d         	BLT IMLR7
                        ;
   c5ad   7e c5 1c      IMLR13	JMP IMLR1
                        ;
   c5b0   5f            PNT3C	CLR B
   c5b1   b7 7f 10      	STA A TEMP
   c5b4   48            	ASL A
   c5b5   bb 7f 10      	ADD A TEMP
   c5b8   c9 00         	ADC B #$0
   c5ba   ce c6 33      	LDX #TBL
   c5bd   ff 7f 14      	STX XTEMP
   c5c0   bb 7f 15      	ADD A XTEMP+1
   c5c3   f9 7f 14      	ADC B XTEMP
   c5c6   f7 7f 14      	STA B XTEMP
   c5c9   b7 7f 15      	STA A XTEMP+1
   c5cc   fe 7f 14      	LDX XTEMP
   c5cf   a6 00         	LDA A 0,X
   c5d1   b7 7f 10      	STA A TEMP
   c5d4   8d 06         	BSR OUTA
   c5d6   a6 01         	LDA A 1,X
   c5d8   8d 02         	BSR OUTA
   c5da   a6 02         	LDA A 2,X
                        ;
   c5dc   7e c2 0a      OUTA	JMP OUTEEE
                        ;
                        ;  "V" COMMAND
                        ;
   c5df   bd c2 46      VIEW	JSR BAD2
   c5e2   86 08         VCOM1	LDA A #8
   c5e4   b7 7f 6e      	STA A MCONT
   c5e7   bd c2 c4      VCOM5	JSR CRLF
   c5ea   bd c1 1c      	JSR OUTXHI
   c5ed   c6 10         	LDA B #$10
   c5ef   bd c0 ed      VCOM9	JSR OUT2HS
   c5f2   5a            	DEC B
   c5f3   c5 03         	BIT B #3
   c5f5   26 05         	BNE VCOM10
   c5f7   bd c0 ef      	JSR OUTS
   c5fa   c1 00         	CMP B #$0
   c5fc   26 f1         VCOM10	BNE VCOM9
   c5fe   bd c2 c4      	JSR CRLF
   c601   c6 05         	LDA B #$5
   c603   bd c2 b2      	JSR SKIP
   c606   fe 7f 0e      	LDX XHI
   c609   c6 10         	LDA B #$10
   c60b   a6 00         VCOM2	LDA A 0,X
   c60d   81 20         	CMP A #$20
   c60f   25 04         	BCS VCOM3
   c611   81 5f         	CMP A #$5F
   c613   25 02         	BCS VCOM4
   c615   86 2e         VCOM3	LDA A #$2E
   c617   8d c3         VCOM4	BSR OUTA
   c619   08            	INX
   c61a   5a            	DEC B
   c61b   26 ee         	BNE VCOM2
   c61d   ff 7f 0e      	STX XHI
   c620   7a 7f 6e      	DEC MCONT
   c623   26 c2         	BNE VCOM5
   c625   bd c1 f3      	JSR INEEE
   c628   81 20         	CMP A #$20
   c62a   27 b6         	BEQ VCOM1
   c62c   81 56         	CMP A #$56
   c62e   27 af         	BEQ VIEW
   c630   7e c0 1f      	JMP CONTRL
                        ;
                        ; MNKEMONIC TABLE
                        ;
   c633   2a 2a 2a 4e   TBL	FCC "***NOPNOP***"
   c637   4f 50 4e 4f   
   c63b   50 2a 2a 2a   
   c63f   2a 2a 2a 2a   	FCC "******TAPTPA"
   c643   2a 2a 54 41   
   c647   50 54 50 41   
   c64b   49 4e 58 44   	FCC "INXDEXCLVSEV"
   c64f   45 58 43 4c   
   c653   56 53 45 56   
   c657   43 4c 43 53   	FCC "CLCSECCLISEI"
   c65b   45 43 43 4c   
   c65f   49 53 45 49   
   c663   53 42 41 43   	FCC "SBACBA******"
   c667   42 41 2a 2a   
   c66b   2a 2a 2a 2a   
   c66f   2a 2a 2a 2a   	FCC "******TABTBA"
   c673   2a 2a 54 41   
   c677   42 54 42 41   
   c67b   2a 2a 2a 44   	FCC "***DAA***ABA"
   c67f   41 41 2a 2a   
   c683   2a 41 42 41   
   c687   2a 2a 2a 2a   	FCC "************"
   c68b   2a 2a 2a 2a   
   c68f   2a 2a 2a 2a   
   c693   42 52 41 2a   	FCC "BRA***BHIBLS"
   c697   2a 2a 42 48   
   c69b   49 42 4c 53   
   c69f   42 43 43 42   	FCC "BCCBCSBNEBEQ"
   c6a3   43 53 42 4e   
   c6a7   45 42 45 51   
   c6ab   42 56 43 42   	FCC "BVCBVSBPLBMI"
   c6af   56 53 42 50   
   c6b3   4c 42 4d 49   
   c6b7   42 47 45 42   	FCC "BGEBLTBGTBLE"
   c6bb   4c 54 42 47   
   c6bf   54 42 4c 45   
   c6c3   54 53 58 49   	FCC "TSXINSPULPUL"
   c6c7   4e 53 50 55   
   c6cb   4c 50 55 4c   
   c6cf   44 45 53 54   	FCC "DESTXSPSHPSH"
   c6d3   58 53 50 53   
   c6d7   48 50 53 48   
   c6db   2a 2a 2a 52   	FCC "***RTS***RTI"
   c6df   54 53 2a 2a   
   c6e3   2a 52 54 49   
   c6e7   2a 2a 2a 2a   	FCC "******WAISWI"
   c6eb   2a 2a 57 41   
   c6ef   49 53 57 49   
   c6f3   4e 45 47 2a   	FCC "NEG******COM"
   c6f7   2a 2a 2a 2a   
   c6fb   2a 43 4f 4d   
   c6ff   4c 53 52 2a   	FCC "LSR***RORASR"
   c703   2a 2a 52 4f   
   c707   52 41 53 52   
   c70b   41 53 4c 52   	FCC "ASLROLDEC***"
   c70f   4f 4c 44 45   
   c713   43 2a 2a 2a   
   c717   49 4e 43 54   	FCC "INCTSTJMPCLR"
   c71b   53 54 4a 4d   
   c71f   50 43 4c 52   
   c723   53 55 42 43   	FCC "SUBCMPSBCBSR"
   c727   4d 50 53 42   
   c72b   43 42 53 52   
   c72f   41 4e 44 42   	FCC "ANDBITLDASTA"
   c733   49 54 4c 44   
   c737   41 53 54 41   
   c73b   45 4f 52 41   	FCC "EORADCORAADD"
   c73f   44 43 4f 52   
   c743   41 41 44 44   
   c747   43 50 58 4a   	FCC "CPXJSRLDSSTS"
   c74b   53 52 4c 44   
   c74f   53 53 54 53   
   c753   4c 44 58 53   	FCC "LDXSTX"
   c757   54 58         
   c759   23 24         SPLBD0 	FCC "#$"
   c75b   04            	 FCB $4
   c75c   2c 58 04      COMMX	 FCB $2C,$58,$04
   c75f   20 20 20      BLANK	 FCB $20,$20,$20
   c762   04            	 FCB $04
   c763   20 41 20      PNTA	 FCC " A "
   c766   04            	 FCB $04
   c767   20 42 20      PNTB	 FCC " B "
   c76a   04            	 FCB $04
   c76b   0d 0a 15 13   MCL	 FCB $D,$A,$15,$13,$3E,$04
   c76f   3e 04         
   c771   20 42 3d 04   BREG	 FCB $20,$42,$3D,$04
   c775   41 3d 04      AREG	 FCB $41,$3D,$04
   c778   58 3d 04      XREG	 FCB $58,$3D,$04
   c77b   53 3d 04      SREG	 FCB $53,$3D,$04
   c77e   50 43 3d 04   PCTR	 FCB $50,$43,$3D,$04
   c782   48 49 4e 5a   CSET	 FCB $48,$49,$4E,$5A,$56,$43
   c786   56 43         
   c788   0d 0a 15 04   CRLFAS 	 FCB $0D,$0A,$15,$04
   c78c   0d 0a         ADASC	 FCB $0D,$0A
   c78e   42 4b 41 44   	 FCB $42,$4B,$41,$44,$44,$52,$20,$04
   c792   44 52 20 04   
   c796   0d 0a 46 52   FROMAD	 FCB $0D,$0A,$46,$52,$4F,$4D,$20
   c79a   4f 4d 20      
   c79d   41 44 44 52   	 FCB $41,$44,$44,$52,$20,$04
   c7a1   20 04         
   c7a3   0d 0a 54 48   THRUAD 	 FCB $0D,$0A,$54,$48,$52,$55,$20,$41
   c7a7   52 55 20 41   
   c7ab   44 44 52 20   	 FCB $44,$44,$52,$20,$04
   c7af   04            
   c7b0   54 4f 20 41   TOADD	 FCB $54,$4F,$20,$41,$44,$44,$52,$20,$04
   c7b4   44 44 52 20   
   c7b8   04            
   c7b9   56 41 4c 55   VALASC FCB $56,$41,$4C,$55,$45,$20,$04
   c7bd   45 20 04      
                        ;
                        ;   CONNAND JUMP TABLE
                        ;
   c7c0   4d            FUTABL	FCC "M"
   c7c1   c2 6f         		FDB MOVE
   c7c3   45            		FCC "E"
   c7c4   c0 a1         		FDB CHANGE
   c7c6   47            		FCC "G"
   c7c7   c1 18         		FDB CONTG
   c7c9   52            		FCC "R"
   c7ca   c1 51         		FDB PRINT
   c7cc   54            		FCC "T"
   c7cd   c2 cf         		FDB TRACE
   c7cf   40            		FCC "@"
   c7d0   c2 21         		FDB ASCII
   c7d2   48            		FCC "H"
   c7d3   c1 d3         		FDB PRNTON
   c7d5   56            		FCC "V"
   c7d6   c5 df         		FDB VIEW
   c7d8   49            		FCC "I"
   c7d9   c2 34         		FDB IFILL
   c7db   4a            		FCC "J"
   c7dc   c2 17         		FDB JUMP
   c7de   46            		FCC "F"
   c7df   c2 94         		FDB FIND
   c7e1   51            		FCC "Q"
   c7e2   80 20         		FDB $8020
   c7e4   44            		FCC "D"
   c7e5   c2 ca         		FDB DISSA
   c7e7   4b            		FCC "K"
   c7e8   c2 e1         		FDB KONTIN
   c7ea   31            		FCC "1"
   c7eb   c1 04         		FDB BKPNT
   c7ed   32            		FCC "2"
   c7ee   c0 f3         		FDB BKPNT2
   c7f0   26            		FCC "&"
   c7f1   c8 2b         		FDB SLOAD	;new for V2 was FDB $7283
   c7f3   2a            		FCC "*"
   c7f4   f8 00         		FDB $F800	
   c7f6   4f            		FCC "O"
   c7f7   c1 d2         		FDB ECHON
   c7f9   4e            		FCC "N"
   c7fa   c1 d4         		FDB ECHOFF
   c7fc                 TBLEND	EQU *		 
                        ;
                        ;	ADDED TO VERSION 2:
                        ; 	MOTOROLA "S" LOADER PROGRAMME "S1" STARTS LOAD
                        ; 	END OF LOAD "S9" RUN START END PLUS ADDRESS
                        ;
                        ; 	"S" LOADER PROGRAMME START
                        ;
   c7fc   54 68 69 73   S1STRING	FCC	"This S1 load has entered system scratch area"
   c800   20 53 31 20   
   c804   6c 6f 61 64   
   c808   20 68 61 73   
   c80c   20 65 6e 74   
   c810   65 72 65 64   
   c814   20 73 79 73   
   c818   74 65 6d 20   
   c81c   73 63 72 61   
   c820   74 63 68 20   
   c824   61 72 65 61   
   c828   0d 0a 04      		FCB	$0D,$0A,$04
                        ;
   c82b                 SLOAD		EQU 	*
   c82b   36            		PSHA			; Save A register
   c82c   ff 7f 6f      		STX	TEMPX1		; Save X register
   c82f   8d 7c         GOAGAIN	BSR	GETCHAR	; Get first charactor from ACIA  
   c831   81 53         		CMPA	#$53		; Is it "S"
   c833   26 fa         		BNE	GOAGAIN	; If not go read again
   c835   8d 76         		BSR	GETCHAR	; Get second charactor in frame
   c837   81 39         		CMPA 	#$39		; Is it "9"
   c839   27 31         		BEQ	RECOVER	; If "9" go and end read
   c83b   81 31         		CMPA 	#$31		; Is it a "1"
   c83d   26 f0         		BNE	GOAGAIN	; If no then go start again
   c83f   7f 7f 74      		CLR	TEMPA		; Clear Frame length
   c842   8d 3d         		BSR	GETHEX		; Get frame length from input stream
   c844   80 02         		SUBA	#$02		; Subtract the checksum
   c846   b7 7f 73      		STAA	BYTESTORE	; Save frame length
   c849   8d 28         		BSR	GETADD		; Read next two bytes for dest address
   c84b   8d 34         GETCOUNT	BSR	GETHEX		; Get the byte number
   c84d   7a 7f 73      		DEC	BYTESTORE	; decrement counter
   c850   27 10         		BEQ	INCOUNT	; If zero go to increment byte count
   c852   a7 00         		STAA	0,X		; Store read byte into memory
   c854   a1 00         		CMPA	0,X		; Test if RAM OK
   c856   26 0f         		BNE	QUESTION	; If write failed send Question and abort
   c858   08            		INX			; Increment address pointer
                        ; DGG next line was commented out
                        ;		CMPX	VAR		; Is it the system scratch area
                        ; DGG commented out this next line because previous line missing always caused next line to fail
                        ;		BGT	S1EXIT		; Abort if close to system scratch
   c859   20 f0         		BRA	GETCOUNT	; go get another byte
                        ;
   c85b   ce c7 fc      S1EXIT	LDX	#S1STRING		; Protect System Scratch Abort S1
   c85e   8d 68         		BSR	OUTSTR		; Print abort string
   c860   20 0a         		BRA	RECOVER	; Back to console prompt
                        ;
   c862   7c 7f 74      INCOUNT	INC	TEMPA		; Increment tempa 
   c865   27 c8         		BEQ	GOAGAIN	; If zero go for another frame
   c867   86 3f         QUESTION	LDAA	#$3F		; Load question mark
   c869   bd c8 bb      		JSR	OUTPUTA	; Send to console
   c86c   fe 7f 6f      RECOVER	LDX	TEMPX1		; Restore "X"
   c86f   32            		PULA			; Restore A
   c870   7e c0 1f      		JMP	CONTRL		; Jump to exit
                        ; 
                        ;
   c873   8d 0c         GETADD	BSR	GETHEX	; Read in byte
   c875   b7 7f 71      		STAA	ADDRESS	; store in first part of address
   c878   8d 07         		BSR	GETHEX		; Get another byte of data
   c87a   b7 7f 72      		STAA	ADDRESS1	; store in second address register
   c87d   fe 7f 71      		LDX	ADDRESS	; Load X register both bytes of address
   c880   39            		RTS			; Return from sub routine
                        ;
                        ;	ADD IN THE ADDRESS OFFSET
                        ;
   c881   8d 10         GETHEX	BSR	CONVHEX		; Go get byte of data and convert to binary 
   c883   48            		ASLA			; Shift the the 4 bits into msb
   c884   48            		ASLA			; Shift the the 4 bits into msb	
   c885   48            		ASLA			; Shift the the 4 bits into msb	
   c886   48            		ASLA			; Shift the the 4 bits into msb	
   c887   16            		TAB			; Transfer "A" to "B"
   c888   8d 09         		BSR	CONVHEX	; Go get byte of data and convert to binary
   c88a   1b            		ABA			; Add 4 bits in "A" and "B" into "B"
   c88b   16            		TAB			; Transfer "A" to "B"
   c88c   fb 7f 74      		ADDB	TEMPA		; Add into checksum
   c88f   f7 7f 74      		STAB	TEMPA		; Add into checksum
   c892   39            		RTS			; Return from sub routine
                        ; 	
   c893   bd c8 ad      CONVHEX	JSR	GETCHAR	; Get HEX charactor from ACIA
   c896   80 30         		SUBA	#$30		; Convert to binary
   c898   2b cd         		BMI	QUESTION	; Convert to binary
   c89a   81 09         		CMPA	#$09		; Convert to binary
   c89c   2f 0a         		BLE	RETURN2	; Convert to binary
   c89e   81 11         		CMPA	#$11		; Convert to binary
   c8a0   2b 07         		BMI	INCSTACK	; Convert to binary
   c8a2   81 16         		CMPA	#$16		; Convert to binary
   c8a4   2e 03         		BGT	INCSTACK	; Convert to binary
   c8a6   80 07         		SUBA	#$07		; Convert to binary
   c8a8   39            RETURN2	RTS			; Return from sub routine
                        ;  
   c8a9   31            INCSTACK	INS			; Restore stack position
   c8aa   31            		INS			; Restore stack position
   c8ab   20 ba         		BRA	QUESTION	; Go send ? and exit
                        ;
   c8ad   37            GETCHAR	PSHB
   c8ae   f6 a0 00      WAITIN	LDAB ACIACS			; LOAD ACIA CONTROL REGISTER
   c8b1   57            		ASRB			; SHIFT RIGHT  ACIADA
   c8b2   24 fa         		BCC 	WAITIN		; IF CARRY NOT SET THEN AGAIN
   c8b4   b6 a0 01      		LDAA 	ACIADA		; LOAD DATA REGISTER
   c8b7   33            		PULB			; RESTORE B REGISTER
   c8b8   8d 01         		BSR 	OUTPUTA	; ECHO INPUT
   c8ba   39            		RTS
                        ;
   c8bb   37            OUTPUTA	PSHB			; SAVE B
   c8bc   f6 a0 00      WAITOUT	LDAB ACIACS		; LOAD ACIA CONTROL REGISTER
   c8bf   57            		ASRB			; SHIFT RIGHT
   c8c0   57            		ASRB			; SHIFT RIGHT
   c8c1   24 f9         		BCC 	WAITOUT	; IF CARRY NOT SET DO AGAIN
   c8c3   b7 a0 01      		STAA ACIADA		; SEND CHARACTOR TO ACIA
   c8c6   33            		PULB			; RESTORE B
   c8c7   39            		RTS			; RETURN FROM ROUTINE
                        ;
   c8c8   a6 00         OUTSTR	LDAA	0,X			; Read String
   c8ca   81 04         		CMPA	#$4		; Is it EOT?
   c8cc   27 05         		BEQ	STEXIT		; Exit if EOT
   c8ce   8d eb         		BSR	OUTPUTA	; Print Charactor
   c8d0   08            		INX			; Point at next charactor
   c8d1   20 f5         		BRA	OUTSTR		; Loop and read next
   c8d3   39            STEXIT		RTS			;
                        ;
                        ;END of V2 S-loader 
                        ; 
                        ;   STARTUP VECTORS $FFF8 -$FFFF
                        ;
   fff8                 		ORG $FFF8
                        ;
   fff8   c0 55         		FDB IO
   fffa   c0 5f         		FDB SWI
   fffc   c0 5a         		FDB POWDWN
   fffe   c0 00         		FDB START
                        ;
                        ; Version 1 has table of RAM locations at $A000H
   0000                 .
   0000                             END
DGG-MIKBUG-M6802 OPERATING SYSTEM

0000  .             a000  ACIACS        a001  ACIADA        7f0c  ACIAT     
c78c  ADASC         c261  ADDR          7f71  ADDRESS       7f72  ADDRESS1  
c775  AREG          c224  ASC01         c225  ASC02         c221  ASCII     
c246  BAD2          c06a  BADDR         7f04  BEGA          7f4f  BFLAG     
7f52  BITE2         7f53  BITE3         7f16  BKFLG         7f6d  BKFLG2    
c104  BKPNT         c0f3  BKPNT2        c75f  BLANK         c27a  BMC1      
7f6a  BPOINT        c771  BREG          7f00  BUFFER        c3c5  BYT1      
c3a3  BYT2          c3a6  BYT21         c3c2  BYT22         c388  BYT3      
c395  BYT31         c078  BYTE          7f67  BYTECT        7f73  BYTESTORE 
c068  C1            c1cd  C2            c0a3  CHA51         c0a1  CHANGE    
c0c0  CHM1          c441  CKCBA         c4fc  CKROM         c2fc  CLEAR     
c75c  COMMX         c118  CONTG         c01f  CONTRL        c893  CONVHEX   
c1ed  CR8           c291  CR9           c2c4  CRLF          c788  CRLFAS    
c782  CSET          c2ef  DISIN         c14e  DISPLY        c2ec  DISS      
c2ca  DISSA         c475  DOT           c47d  DOT1          c3d7  DPOS      
c160  DSOOP         c167  DSOOP1        7f0d  ECHO          c1d4  ECHOFF    
c1d2  ECHON         7f06  ENDA          c24b  ENDADD        c4e8  EXEC      
c4dd  EXR           c294  FIND          c796  FROMAD        c7c0  FUTABL    
c873  GETADD        c8ad  GETCHAR       c84b  GETCOUNT      c881  GETHEX    
c82f  GOAGAIN       c051  GOODCH        c234  IFILL         c244  IFILL1    
c23c  IFILL2        c51c  IMLR1         c58c  IMLR10        c597  IMLR11    
c5a5  IMLR12        c5ad  IMLR13        c532  IMLR2         c537  IMLR3     
c53c  IMLR4         c53f  IMLR5         c542  IMLR6         c54a  IMLR7     
c54d  IMLR8         c56a  IMLR9         c34a  IMM           c1f5  IN1       
c0e1  IN1HG         c094  INCH          c862  INCOUNT       c8a9  INCSTACK  
c1f3  INEEE         c0cd  INHEX         c055  IO            7f02  IOV       
c4b0  ISJ           c352  ISX           c4b8  ISXD          c217  JUMP      
c2e1  KONTIN        c254  LIMITS        c064  LOAD19        c76b  MCL       
7f6e  MCONT         7f50  MFLAG         c26f  MOVE          c334  NEXT      
7f08  NIO           c4f9  NONO          c436  NOT1          c37e  NOTB      
c3e9  NOTBB         c4cc  NOTJ          c4d3  NOTJ1         c4e0  NOTRTI    
c4d7  NOTRTS        c042  NXTCHR        c328  OKOP          7f63  OPSAVE    
c0e2  OUT2H         c0ed  OUT2HS        c0eb  OUT4HS        c5dc  OUTA      
c091  OUTCH         c20a  OUTEEE        c20b  OUTEEE1       c083  OUTHL     
c087  OUTHR         c8bb  OUTPUTA       c0ef  OUTS          c8c8  OUTSTR    
c11c  OUTXHI        c407  PAVOI2        c40b  PAVOI3        c423  PAVOI4    
c42d  PAVOI5        c41b  PAVOI8        c42f  PAVOI9        7f64  PB1       
7f65  PB2           7f66  PB3           7f68  PC1           7f69  PC2       
c77e  PCTR          c1cf  PDAT          c09a  PDATA1        c097  PDATA2    
c5b0  PNT3C         c763  PNTA          c767  PNTB          c2bb  PNTBYT    
c1aa  PNTS          c05a  POWDWN        c151  PRINT         7f4c  PRINTR    
c1d9  PRINTS        c1d3  PRNTON        c1ea  PRTS          c35e  PUT       
c361  PUT1          c867  QUESTION      c465  RDC           c45f  RDX       
c86c  RECOVER       c472  RETNOT        c2e4  RETURN        c8a8  RETURN2   
c85b  S1EXIT        c7fc  S1STRING      c1ef  SAV           c125  SFE       
c2b2  SKIP          c82b  SLOAD         c29d  SMC1          c2ab  SMC2      
7f0a  SP            c759  SPLBD0        c77b  SREG          7f44  STACK     
c000  START         c8d3  STEXIT        c05f  SWI           7f17  SWIPTR    
c633  TBL           c7fc  TBLEND        c518  TBLKUP        7f10  TEMP      
7f74  TEMPA         7f6f  TEMPX1        7f13  TFLAG         c7a3  THRUAD    
c7b0  TOADD         c2cf  TRACE         7f62  TSTACK        c48f  TSTB      
c4a0  TSTJ          7f11  TW            c7b9  VALASC        c266  VALUE     
7f00  VAR           c5e2  VCOM1         c5fc  VCOM10        c60b  VCOM2     
c615  VCOM3         c617  VCOM4         c5e7  VCOM5         c5ef  VCOM9     
c5df  VIEW          c8ae  WAITIN        c8bc  WAITOUT       c0cb  XBK       
7f51  XFLAG         7f0e  XHI           7f0f  XLOW          c778  XREG      
7f14  XTEMP         
