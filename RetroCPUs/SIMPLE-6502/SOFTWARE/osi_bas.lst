ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : osi_bas.s
Current file: osi_bas.s

000000r 1               ; Microsoft BASIC for 6502 (OSI VERSION)
000000r 1               ; DGG - 2022/09/11 - MODIFIED FOR 8KB EEPROM
000000r 1               ;
000000r 1               ; ==================================================================================
000000r 1               ; MODIFIED FROM THE ORIGINAL FILES AT http://www.pagetable.com/?p=46
000000r 1               ; MERGED INTO ONE FILE AND MACROS AND CONDITIONAL STATEMENTS REMOVED
000000r 1               ; BY G. SEARLE 2013
000000r 1               ;
000000r 1               ; I/O and dummy load/saves added to the end of this code
000000r 1               ;
000000r 1               ; This then assembles to the OSI version with the following
000000r 1               ; minor changes to the original BASIC code:
000000r 1               ; 1. Control-C call changed
000000r 1               ; 2. Load/save calls changed
000000r 1               ; 3. RAM start set to $0200 instead of $0300
000000r 1               ; 4. ROM start set to $C000
000000r 1               ; 5. Second letter of error messages back to ASCII value (instead of $80+val)
000000r 1               ; ==================================================================================
000000r 1               ;
000000r 1               ; Extract of original header comments follows:
000000r 1               ;
000000r 1               ; (first revision of this distribution, 20 Oct 2008, Michael Steil www.pagetable.com)
000000r 1               ;
000000r 1               ;
000000r 1               ; Name                 Release   MS Version    ROM   9digit  INPUTBUFFER   extensions
000000r 1               ;---------------------------------------------------------------------------------------------------
000000r 1               ; OSI BASIC             1977     1.0 REV 3.2    Y      N          ZP            -
000000r 1               ;
000000r 1               ; Credits:
000000r 1               ; * main work by Michael Steil
000000r 1               ; * function names and all uppercase comments taken from Bob Sander-Cederlof's excellent AppleSoft II disassembly:
000000r 1               ;   http://www.txbobsc.com/scsc/scdocumentor/
000000r 1               ; * Applesoft lite by Tom Greene http://cowgod.org/replica1/applesoft/ helped a lot, too.
000000r 1               ; * Thanks to Joe Zbicak for help with Intellision Keyboard BASIC
000000r 1               ; * This work is dedicated to the memory of my dear hacking pal Michael "acidity" Kollmann.
000000r 1               
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 1               
000000r 1               ; zero page
000000r 1               ZP_START1 = $00
000000r 1               ZP_START2 = $0D
000000r 1               ZP_START3 = $5B
000000r 1               ZP_START4 = $65
000000r 1               
000000r 1               ;extra ZP variables
000000r 1               USR             := $000A
000000r 1               
000000r 1               ; constants
000000r 1               STACK_TOP		:= $FC
000000r 1               SPACE_FOR_GOSUB := $33
000000r 1               NULL_MAX		:= $0A
000000r 1               WIDTH			:= 72
000000r 1               WIDTH2			:= 56
000000r 1               
000000r 1               ; memory layout
000000r 1               RAMSTART2		:= $0200
000000r 1               BYTES_FP		:= 4
000000r 1               BYTES_PER_ELEMENT := BYTES_FP
000000r 1               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 1               MANTISSA_BYTES	:= BYTES_FP-1
000000r 1               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 1               FOR_STACK1		:= 2*BYTES_FP+5
000000r 1               FOR_STACK2		:= BYTES_FP+4
000000r 1               MAX_EXPON = 10
000000r 1               STACK           := $0100
000000r 1               
000000r 1               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 1               
000000r 1               CR=13
000000r 1               LF=10
000000r 1               
000000r 1               CRLF_1 := CR
000000r 1               CRLF_2 := LF
000000r 1               
000000r 1               .feature org_per_seg
000000r 1               .zeropage
000000r 1               .org $0000
000000  1               .org ZP_START1
000000  1               GORESTART:
000000  1  xx xx xx     	.res 3
000003  1               GOSTROUT:
000003  1  xx xx xx     	.res 3
000006  1               GOAYINT:
000006  1  xx xx        	.res 2
000008  1               GOGIVEAYF:
000008  1  xx xx        	.res 2
00000A  1               
00000A  1               .org ZP_START2
00000D  1               Z15:
00000D  1  xx           	.res 1
00000E  1               POSX:
00000E  1  xx           	.res 1
00000F  1               Z17:
00000F  1  xx           	.res 1
000010  1               Z18:
000010  1  xx           	.res 1
000011  1               LINNUM:
000011  1               TXPSV:
000011  1  xx xx        	.res 2
000013  1               INPUTBUFFER:
000013  1               
000013  1               .org ZP_START3
00005B  1               CHARAC:
00005B  1  xx           	.res 1
00005C  1               ENDCHR:
00005C  1  xx           	.res 1
00005D  1               EOLPNTR:
00005D  1  xx           	.res 1
00005E  1               DIMFLG:
00005E  1  xx           	.res 1
00005F  1               VALTYP:
00005F  1  xx           	.res 1
000060  1               DATAFLG:
000060  1  xx           	.res 1
000061  1               SUBFLG:
000061  1  xx           	.res 1
000062  1               INPUTFLG:
000062  1  xx           	.res 1
000063  1               CPRMASK:
000063  1  xx           	.res 1
000064  1               Z14:
000064  1  xx           	.res 1
000065  1               
000065  1               .org ZP_START4
000065  1               TEMPPT:
000065  1  xx           	.res 1
000066  1               LASTPT:
000066  1  xx xx        	.res 2
000068  1               TEMPST:
000068  1  xx xx xx xx  	.res 9
00006C  1  xx xx xx xx  
000070  1  xx           
000071  1               INDEX:
000071  1  xx xx        	.res 2
000073  1               DEST:
000073  1  xx xx        	.res 2
000075  1               RESULT:
000075  1  xx xx xx xx  	.res BYTES_FP
000079  1               RESULT_LAST = RESULT + BYTES_FP-1
000079  1               TXTTAB:
000079  1  xx xx        	.res 2
00007B  1               VARTAB:
00007B  1  xx xx        	.res 2
00007D  1               ARYTAB:
00007D  1  xx xx        	.res 2
00007F  1               STREND:
00007F  1  xx xx        	.res 2
000081  1               FRETOP:
000081  1  xx xx        	.res 2
000083  1               FRESPC:
000083  1  xx xx        	.res 2
000085  1               MEMSIZ:
000085  1  xx xx        	.res 2
000087  1               CURLIN:
000087  1  xx xx        	.res 2
000089  1               OLDLIN:
000089  1  xx xx        	.res 2
00008B  1               OLDTEXT:
00008B  1  xx xx        	.res 2
00008D  1               Z8C:
00008D  1  xx xx        	.res 2
00008F  1               DATPTR:
00008F  1  xx xx        	.res 2
000091  1               INPTR:
000091  1  xx xx        	.res 2
000093  1               VARNAM:
000093  1  xx xx        	.res 2
000095  1               VARPNT:
000095  1  xx xx        	.res 2
000097  1               FORPNT:
000097  1  xx xx        	.res 2
000099  1               LASTOP:
000099  1  xx xx        	.res 2
00009B  1               CPRTYP:
00009B  1  xx           	.res 1
00009C  1               FNCNAM:
00009C  1               TEMP3:
00009C  1  xx xx        	.res 2
00009E  1               DSCPTR:
00009E  1  xx xx        	.res 2
0000A0  1               DSCLEN:
0000A0  1  xx xx        	.res 2
0000A2  1               JMPADRS	:= DSCLEN + 1
0000A2  1               
0000A2  1               Z52:
0000A2  1  xx           	.res 1
0000A3  1               ARGEXTENSION:
0000A3  1               TEMP1:
0000A3  1  xx           	.res 1
0000A4  1               HIGHDS:
0000A4  1  xx xx        	.res 2
0000A6  1               HIGHTR:
0000A6  1  xx xx        	.res 2
0000A8  1               INDX:
0000A8  1               TMPEXP:
0000A8  1               TEMP2:
0000A8  1  xx           	.res 1
0000A9  1               EXPON:
0000A9  1  xx           	.res 1
0000AA  1               LOWTR:
0000AA  1               LOWTRX:
0000AA  1  xx           	.res 1
0000AB  1               EXPSGN:
0000AB  1  xx           	.res 1
0000AC  1               FAC:
0000AC  1  xx xx xx xx  	.res BYTES_FP
0000B0  1               FAC_LAST = FAC + BYTES_FP-1
0000B0  1               FACSIGN:
0000B0  1  xx           	.res 1
0000B1  1               SERLEN:
0000B1  1  xx           	.res 1
0000B2  1               SHIFTSIGNEXT:
0000B2  1  xx           	.res 1
0000B3  1               ARG:
0000B3  1  xx xx xx xx  	.res BYTES_FP
0000B7  1               ARG_LAST = ARG + BYTES_FP-1
0000B7  1               ARGSIGN:
0000B7  1  xx           	.res 1
0000B8  1               STRNG1:
0000B8  1  xx xx        	.res 2
0000BA  1               SGNCPR = STRNG1
0000BA  1               FACEXTENSION = STRNG1+1
0000BA  1               STRNG2:
0000BA  1  xx xx        	.res 2
0000BC  1               CHRGET:
0000BC  1               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BC  1               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BC  1               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BC  1               
0000BC  1               .segment "CODE"
000000r 1               .org $E000
00E000  1               TOKEN_ADDRESS_TABLE:
00E000  1  2D E6        		.word END-1
00E002  1  55 E5        		.word FOR-1
00E004  1  33 EA        		.word NEXT-1
00E006  1  FF E6        		.word DATA-1
00E008  1  16 E9        		.word INPUT-1
00E00A  1  F4 EC        		.word DIM-1
00E00C  1  42 E9        		.word READ-1
00E00E  1  AC E7        		.word LET-1
00E010  1               TOKEN_GOTO=$80+(*-TOKEN_ADDRESS_TABLE)/2
00E010  1  AC E6        		.word GOTO-1
00E012  1  84 E6        		.word RUN-1
00E014  1  2F E7        		.word IF-1
00E016  1  19 E6        		.word RESTORE-1
00E018  1               TOKEN_GOSUB=$80+(*-TOKEN_ADDRESS_TABLE)/2
00E018  1  8F E6        		.word GOSUB-1
00E01A  1  D9 E6        		.word POP-1
00E01C  1               TOKEN_REM=$80+(*-TOKEN_ADDRESS_TABLE)/2
00E01C  1  42 E7        		.word REM-1
00E01E  1  2B E6        		.word STOP-1
00E020  1  52 E7        		.word ON-1
00E022  1  6E E6        		.word NULL-1
00E024  1  25 F4        		.word WAIT-1
00E026  1  74 FF        		.word LOAD-1
00E028  1  75 FF        		.word SAVE-1
00E02A  1  D1 EF        		.word DEF-1
00E02C  1  1C F4        		.word POKE-1
00E02E  1               TOKEN_PRINT=$80+(*-TOKEN_ADDRESS_TABLE)/2
00E02E  1  22 E8        		.word PRINT-1
00E030  1  54 E6        		.word CONT-1
00E032  1  B4 E4        		.word LIST-1
00E034  1  7F E6        		.word CLEAR-1
00E036  1  60 E4        		.word NEW-1
00E038  1               TOKEN_TAB=$00+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_TO=$01+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_FN=$02+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_SPC=$03+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_THEN=$04+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_NOT=$05+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_STEP=$06+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_PLUS=$07+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_MINUS=$08+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_GREATER=$0E+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               TOKEN_EQUAL=$0F+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               NUM_TOKENS=(*-TOKEN_ADDRESS_TABLE)/2
00E038  1               
00E038  1               UNFNC:
00E038  1               TOKEN_SGN=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E038  1  CC F7        		.word SGN
00E03A  1  56 F8        		.word INT
00E03C  1  E9 F7        		.word ABS
00E03E  1  0A 00        		.word USR
00E040  1  A1 EF        		.word FRE
00E042  1  C2 EF        		.word POS
00E044  1  A0 FA        		.word SQR
00E046  1  B4 FB        		.word RND
00E048  1  B1 F5        		.word LOG
00E04A  1  0F FB        		.word EXP
00E04C  1  F0 FB        		.word COS
00E04E  1  F7 FB        		.word SIN
00E050  1  40 FC        		.word TAN
00E052  1  8D FC        		.word ATN
00E054  1  12 F4        		.word PEEK
00E056  1  80 F3        		.word LEN
00E058  1  80 F0        		.word STR
00E05A  1  B1 F3        		.word VAL
00E05C  1  8F F3        		.word ASC
00E05E  1  F0 F2        		.word CHRSTR
00E060  1               TOKEN_LEFTSTR=$11+$80+(*-TOKEN_ADDRESS_TABLE)/2
00E060  1  04 F3        		.word LEFTSTR
00E062  1  30 F3        		.word RIGHTSTR
00E064  1  3B F3        		.word MIDSTR
00E066  1               
00E066  1               MATHTBL:
00E066  1  79                   .byte   $79
00E067  1  62 F4                .word   FADDT-1
00E069  1  79                   .byte   $79
00E06A  1  4B F4                .word   FSUBT-1
00E06C  1  7B                   .byte   $7B
00E06D  1  F1 F5                .word   FMULTT-1
00E06F  1  7B                   .byte   $7B
00E070  1  C0 F6                .word   FDIVT-1
00E072  1  7F                   .byte   $7F
00E073  1  A9 FA                .word   FPWRT-1
00E075  1  50                   .byte   $50
00E076  1  5C EC                .word   TAND-1
00E078  1  46                   .byte   $46
00E079  1  59 EC                .word   OR-1
00E07B  1  7D                   .byte   $7D
00E07C  1  E2 FA                .word   NEGOP-1
00E07E  1  5A                   .byte   $5A
00E07F  1  CB EB                .word   EQUOP-1
00E081  1  64                   .byte   $64
00E082  1  89 EC                .word   RELOPS-1
00E084  1               
00E084  1               TOKEN_NAME_TABLE:
00E084  1  45 4E C4     		.byte "EN", $80+'D'
00E087  1  46 4F D2     		.byte "FO", $80+'R'
00E08A  1  4E 45 58 D4  		.byte "NEX", $80+'T'
00E08E  1  44 41 54 C1  		.byte "DAT", $80+'A'
00E092  1  49 4E 50 55  		.byte "INPU", $80+'T'
00E096  1  D4           
00E097  1  44 49 CD     		.byte "DI", $80+'M'
00E09A  1  52 45 41 C4  		.byte "REA", $80+'D'
00E09E  1  4C 45 D4     		.byte "LE", $80+'T'
00E0A1  1  47 4F 54 CF  		.byte "GOT", $80+'O'
00E0A5  1  52 55 CE     		.byte "RU", $80+'N'
00E0A8  1  49 C6        		.byte "I", $80+'F'
00E0AA  1  52 45 53 54  		.byte "RESTOR", $80+'E'
00E0AE  1  4F 52 C5     
00E0B1  1  47 4F 53 55  		.byte "GOSU", $80+'B'
00E0B5  1  C2           
00E0B6  1  52 45 54 55  		.byte "RETUR", $80+'N'
00E0BA  1  52 CE        
00E0BC  1  52 45 CD     		.byte "RE", $80+'M'
00E0BF  1  53 54 4F D0  		.byte "STO", $80+'P'
00E0C3  1  4F CE        		.byte "O", $80+'N'
00E0C5  1  4E 55 4C CC  		.byte "NUL", $80+'L'
00E0C9  1  57 41 49 D4  		.byte "WAI", $80+'T'
00E0CD  1  4C 4F 41 C4  		.byte "LOA", $80+'D'
00E0D1  1  53 41 56 C5  		.byte "SAV", $80+'E'
00E0D5  1  44 45 C6     		.byte "DE", $80+'F'
00E0D8  1  50 4F 4B C5  		.byte "POK", $80+'E'
00E0DC  1  50 52 49 4E  		.byte "PRIN", $80+'T'
00E0E0  1  D4           
00E0E1  1  43 4F 4E D4  		.byte "CON", $80+'T'
00E0E5  1  4C 49 53 D4  		.byte "LIS", $80+'T'
00E0E9  1  43 4C 45 41  		.byte "CLEA", $80+'R'
00E0ED  1  D2           
00E0EE  1  4E 45 D7     		.byte "NE", $80+'W'
00E0F1  1  54 41 42 A8  		.byte "TAB", $80+'('
00E0F5  1  54 CF        		.byte "T", $80+'O'
00E0F7  1  46 CE        		.byte "F", $80+'N'
00E0F9  1  53 50 43 A8  		.byte "SPC", $80+'('
00E0FD  1  54 48 45 CE  		.byte "THE", $80+'N'
00E101  1  4E 4F D4     		.byte "NO", $80+'T'
00E104  1  53 54 45 D0  		.byte "STE", $80+'P'
00E108  1  AB           		.byte "", $80+'+'
00E109  1  AD           		.byte "", $80+'-'
00E10A  1  AA           		.byte "", $80+'*'
00E10B  1  AF           		.byte "", $80+'/'
00E10C  1  DE           		.byte "", $80+'^'
00E10D  1  41 4E C4     		.byte "AN", $80+'D'
00E110  1  4F D2        		.byte "O", $80+'R'
00E112  1  BE           		.byte "", $80+'>'
00E113  1  BD           		.byte "", $80+'='
00E114  1  BC           		.byte "", $80+'<'
00E115  1  53 47 CE     		.byte "SG", $80+'N'
00E118  1  49 4E D4     		.byte "IN", $80+'T'
00E11B  1  41 42 D3     		.byte "AB", $80+'S'
00E11E  1  55 53 D2     		.byte "US", $80+'R'
00E121  1  46 52 C5     		.byte "FR", $80+'E'
00E124  1  50 4F D3     		.byte "PO", $80+'S'
00E127  1  53 51 D2     		.byte "SQ", $80+'R'
00E12A  1  52 4E C4     		.byte "RN", $80+'D'
00E12D  1  4C 4F C7     		.byte "LO", $80+'G'
00E130  1  45 58 D0     		.byte "EX", $80+'P'
00E133  1  43 4F D3     		.byte "CO", $80+'S'
00E136  1  53 49 CE     		.byte "SI", $80+'N'
00E139  1  54 41 CE     		.byte "TA", $80+'N'
00E13C  1  41 54 CE     		.byte "AT", $80+'N'
00E13F  1  50 45 45 CB  		.byte "PEE", $80+'K'
00E143  1  4C 45 CE     		.byte "LE", $80+'N'
00E146  1  53 54 52 A4  		.byte "STR", $80+'$'
00E14A  1  56 41 CC     		.byte "VA", $80+'L'
00E14D  1  41 53 C3     		.byte "AS", $80+'C'
00E150  1  43 48 52 A4  		.byte "CHR", $80+'$'
00E154  1  4C 45 46 54  		.byte "LEFT", $80+'$'
00E158  1  A4           
00E159  1  52 49 47 48  		.byte "RIGHT", $80+'$'
00E15D  1  54 A4        
00E15F  1  4D 49 44 A4  		.byte "MID", $80+'$'
00E163  1  00           		.byte   0
00E164  1               
00E164  1               ERROR_MESSAGES:
00E164  1               ERR_NOFOR := <(*-ERROR_MESSAGES)
00E164  1  4E 46                .byte "NF"
00E166  1               ERR_SYNTAX := <(*-ERROR_MESSAGES)
00E166  1  53 4E                .byte "SN"
00E168  1               ERR_NOGOSUB := <(*-ERROR_MESSAGES)
00E168  1  52 47                .byte "RG"
00E16A  1               ERR_NODATA := <(*-ERROR_MESSAGES)
00E16A  1  4F 44                .byte "OD"
00E16C  1               ERR_ILLQTY := <(*-ERROR_MESSAGES)
00E16C  1  46 43                .byte "FC"
00E16E  1               ERR_OVERFLOW := <(*-ERROR_MESSAGES)
00E16E  1  4F 56                .byte "OV"
00E170  1               ERR_MEMFULL := <(*-ERROR_MESSAGES)
00E170  1  4F 4D                .byte "OM"
00E172  1               ERR_UNDEFSTAT := <(*-ERROR_MESSAGES)
00E172  1  55 53                .byte "US"
00E174  1               ERR_BADSUBS := <(*-ERROR_MESSAGES)
00E174  1  42 53                .byte "BS"
00E176  1               ERR_REDIMD := <(*-ERROR_MESSAGES)
00E176  1  44 44                .byte "DD"
00E178  1               ERR_ZERODIV := <(*-ERROR_MESSAGES)
00E178  1  2F 30                .byte "/0"
00E17A  1               ERR_ILLDIR := <(*-ERROR_MESSAGES)
00E17A  1  49 44                .byte "ID"
00E17C  1               ERR_BADTYPE := <(*-ERROR_MESSAGES)
00E17C  1  54 4D                .byte "TM"
00E17E  1               ERR_STRLONG := <(*-ERROR_MESSAGES)
00E17E  1  4C 53                .byte "LS"
00E180  1               ERR_FRMCPX := <(*-ERROR_MESSAGES)
00E180  1  53 54                .byte "ST"
00E182  1               ERR_CANTCONT := <(*-ERROR_MESSAGES)
00E182  1  43 4E                .byte "CN"
00E184  1               ERR_UNDEFFN := <(*-ERROR_MESSAGES)
00E184  1  55 46                .byte "UF"
00E186  1               
00E186  1               ; global messages: "error", "in", "ready", "break"
00E186  1               QT_ERROR:
00E186  1  20 45 52 52          .byte   " ERROR"
00E18A  1  4F 52        
00E18C  1  00                   .byte   0
00E18D  1               QT_IN:
00E18D  1  20 49 4E 20          .byte   " IN "
00E191  1  00                   .byte   $00
00E192  1               QT_OK:
00E192  1  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
00E196  1  0D 0A        
00E198  1  00           		.byte	0
00E199  1               QT_BREAK:
00E199  1  0D 0A 42 52  		.byte CR,LF,"BREAK"
00E19D  1  45 41 4B     
00E1A0  1  00                   .byte   0
00E1A1  1               
00E1A1  1               ; generic stack and memory management code
00E1A1  1               ; this code is identical across all versions of
00E1A1  1               ; BASIC
00E1A1  1               ; ----------------------------------------------------------------------------
00E1A1  1               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00E1A1  1               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00E1A1  1               ;
00E1A1  1               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00E1A1  1               ; 	= $XXFF IF CALLED FROM "RETURN"
00E1A1  1               ; 	<<< BUG: SHOULD BE $FFXX >>>
00E1A1  1               ;
00E1A1  1               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00E1A1  1               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00E1A1  1               ;
00E1A1  1               ;	.EQ. IF FOUND
00E1A1  1               ;	(X) = STACK PNTR OF FRAME FOUND
00E1A1  1               ; ----------------------------------------------------------------------------
00E1A1  1               GTFORPNT:
00E1A1  1  BA                   tsx
00E1A2  1  E8                   inx
00E1A3  1  E8                   inx
00E1A4  1  E8                   inx
00E1A5  1  E8                   inx
00E1A6  1               L2279:
00E1A6  1  BD 01 01             lda     STACK+1,x
00E1A9  1  C9 81                cmp     #$81
00E1AB  1  D0 21                bne     L22A1
00E1AD  1  A5 98                lda     FORPNT+1
00E1AF  1  D0 0A                bne     L228E
00E1B1  1  BD 02 01             lda     STACK+2,x
00E1B4  1  85 97                sta     FORPNT
00E1B6  1  BD 03 01             lda     STACK+3,x
00E1B9  1  85 98                sta     FORPNT+1
00E1BB  1               L228E:
00E1BB  1  DD 03 01             cmp     STACK+3,x
00E1BE  1  D0 07                bne     L229A
00E1C0  1  A5 97                lda     FORPNT
00E1C2  1  DD 02 01             cmp     STACK+2,x
00E1C5  1  F0 07                beq     L22A1
00E1C7  1               L229A:
00E1C7  1  8A                   txa
00E1C8  1  18                   clc
00E1C9  1  69 10                adc     #BYTES_PER_FRAME
00E1CB  1  AA                   tax
00E1CC  1  D0 D8                bne     L2279
00E1CE  1               L22A1:
00E1CE  1  60                   rts
00E1CF  1               ; ----------------------------------------------------------------------------
00E1CF  1               ; MOVE BLOCK OF MEMORY UP
00E1CF  1               ;
00E1CF  1               ; ON ENTRY:
00E1CF  1               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00E1CF  1               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00E1CF  1               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00E1CF  1               ; ----------------------------------------------------------------------------
00E1CF  1               BLTU:
00E1CF  1  20 1F E2             jsr     REASON
00E1D2  1  85 7F                sta     STREND
00E1D4  1  84 80                sty     STREND+1
00E1D6  1               BLTU2:
00E1D6  1  38                   sec
00E1D7  1  A5 A6                lda     HIGHTR
00E1D9  1  E5 AA                sbc     LOWTR
00E1DB  1  85 71                sta     INDEX
00E1DD  1  A8                   tay
00E1DE  1  A5 A7                lda     HIGHTR+1
00E1E0  1  E5 AB                sbc     LOWTR+1
00E1E2  1  AA                   tax
00E1E3  1  E8                   inx
00E1E4  1  98                   tya
00E1E5  1  F0 23                beq     L22DD
00E1E7  1  A5 A6                lda     HIGHTR
00E1E9  1  38                   sec
00E1EA  1  E5 71                sbc     INDEX
00E1EC  1  85 A6                sta     HIGHTR
00E1EE  1  B0 03                bcs     L22C6
00E1F0  1  C6 A7                dec     HIGHTR+1
00E1F2  1  38                   sec
00E1F3  1               L22C6:
00E1F3  1  A5 A4                lda     HIGHDS
00E1F5  1  E5 71                sbc     INDEX
00E1F7  1  85 A4                sta     HIGHDS
00E1F9  1  B0 08                bcs     L22D6
00E1FB  1  C6 A5                dec     HIGHDS+1
00E1FD  1  90 04                bcc     L22D6
00E1FF  1               L22D2:
00E1FF  1  B1 A6                lda     (HIGHTR),y
00E201  1  91 A4                sta     (HIGHDS),y
00E203  1               L22D6:
00E203  1  88                   dey
00E204  1  D0 F9                bne     L22D2
00E206  1  B1 A6                lda     (HIGHTR),y
00E208  1  91 A4                sta     (HIGHDS),y
00E20A  1               L22DD:
00E20A  1  C6 A7                dec     HIGHTR+1
00E20C  1  C6 A5                dec     HIGHDS+1
00E20E  1  CA                   dex
00E20F  1  D0 F2                bne     L22D6
00E211  1  60                   rts
00E212  1               ; ----------------------------------------------------------------------------
00E212  1               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00E212  1               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00E212  1               ; ----------------------------------------------------------------------------
00E212  1               CHKMEM:
00E212  1  0A                   asl     a
00E213  1  69 33                adc     #SPACE_FOR_GOSUB
00E215  1  B0 35                bcs     MEMERR
00E217  1  85 71                sta     INDEX
00E219  1  BA                   tsx
00E21A  1  E4 71                cpx     INDEX
00E21C  1  90 2E                bcc     MEMERR
00E21E  1  60                   rts
00E21F  1               ; ----------------------------------------------------------------------------
00E21F  1               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00E21F  1               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00E21F  1               ; ----------------------------------------------------------------------------
00E21F  1               REASON:
00E21F  1  C4 82                cpy     FRETOP+1
00E221  1  90 28                bcc     L231E
00E223  1  D0 04                bne     L22FC
00E225  1  C5 81                cmp     FRETOP
00E227  1  90 22                bcc     L231E
00E229  1               L22FC:
00E229  1  48                   pha
00E22A  1  A2 08                ldx     #FAC-TEMP1-1
00E22C  1  98                   tya
00E22D  1               L2300:
00E22D  1  48                   pha
00E22E  1  B5 A3                lda     TEMP1,x
00E230  1  CA                   dex
00E231  1  10 FA                bpl     L2300
00E233  1  20 3B F1             jsr     GARBAG
00E236  1  A2 F8                ldx     #TEMP1-FAC+1
00E238  1               L230B:
00E238  1  68                   pla
00E239  1  95 AC                sta     FAC,x
00E23B  1  E8                   inx
00E23C  1  30 FA                bmi     L230B
00E23E  1  68                   pla
00E23F  1  A8                   tay
00E240  1  68                   pla
00E241  1  C4 82                cpy     FRETOP+1
00E243  1  90 06                bcc     L231E
00E245  1  D0 05                bne     MEMERR
00E247  1  C5 81                cmp     FRETOP
00E249  1  B0 01                bcs     MEMERR
00E24B  1               L231E:
00E24B  1  60                   rts
00E24C  1               MEMERR:
00E24C  1  A2 0C                ldx     #ERR_MEMFULL
00E24E  1               ; ----------------------------------------------------------------------------
00E24E  1               ; HANDLE AN ERROR
00E24E  1               ;
00E24E  1               ; (X)=OFFSET IN ERROR MESSAGE TABLE
00E24E  1               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
00E24E  1               ; (CURLIN+1) = $FF IF IN DIRECT MODE
00E24E  1               ; ----------------------------------------------------------------------------
00E24E  1               ERROR:
00E24E  1  46 64                lsr     Z14
00E250  1  20 60 E8             jsr     CRDO
00E253  1  20 D7 E8             jsr     OUTQUES
00E256  1  BD 64 E1             lda     ERROR_MESSAGES,x
00E259  1  20 D9 E8             jsr     OUTDO
00E25C  1  BD 65 E1             lda     ERROR_MESSAGES+1,x
00E25F  1  20 D9 E8             jsr     OUTDO
00E262  1  20 91 E4             jsr     STKINI
00E265  1  A9 86                lda     #<QT_ERROR
00E267  1  A0 E1                ldy     #>QT_ERROR
00E269  1               ; ----------------------------------------------------------------------------
00E269  1               ; PRINT STRING AT (Y,A)
00E269  1               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
00E269  1               ; FALL INTO WARM RESTART
00E269  1               ; ----------------------------------------------------------------------------
00E269  1               PRINT_ERROR_LINNUM:
00E269  1  20 B7 E8             jsr     STROUT
00E26C  1  A4 88                ldy     CURLIN+1
00E26E  1  C8                   iny
00E26F  1  F0 03                beq     RESTART
00E271  1  20 47 F9             jsr     INPRT
00E274  1               ; ----------------------------------------------------------------------------
00E274  1               ; WARM RESTART ENTRY
00E274  1               ; ----------------------------------------------------------------------------
00E274  1               RESTART:
00E274  1  46 64                lsr     Z14
00E276  1  A9 92                lda     #<QT_OK
00E278  1  A0 E1                ldy     #>QT_OK
00E27A  1  20 03 00             jsr     GOSTROUT
00E27D  1               L2351:
00E27D  1  20 57 E3             jsr     INLIN
00E280  1  86 C3                stx     TXTPTR
00E282  1  84 C4                sty     TXTPTR+1
00E284  1  20 BC 00             jsr     CHRGET
00E287  1               ; bug in pre-1.1: CHRGET sets Z on '\0'
00E287  1               ; and ':' - a line starting with ':' in
00E287  1               ; direct mode gets ignored
00E287  1  F0 F4                beq     L2351
00E289  1  A2 FF                ldx     #$FF
00E28B  1  86 88                stx     CURLIN+1
00E28D  1  90 06                bcc     NUMBERED_LINE
00E28F  1  20 A6 E3             jsr     PARSE_INPUT_LINE
00E292  1  4C F6 E5             jmp     NEWSTT2
00E295  1               ; ----------------------------------------------------------------------------
00E295  1               ; HANDLE NUMBERED LINE
00E295  1               ; ----------------------------------------------------------------------------
00E295  1               NUMBERED_LINE:
00E295  1  20 73 E7             jsr     LINGET
00E298  1  20 A6 E3             jsr     PARSE_INPUT_LINE
00E29B  1  84 5D                sty     EOLPNTR
00E29D  1  20 32 E4             jsr     FNDLIN
00E2A0  1  90 44                bcc     PUT_NEW_LINE
00E2A2  1  A0 01                ldy     #$01
00E2A4  1  B1 AA                lda     (LOWTR),y
00E2A6  1  85 72                sta     INDEX+1
00E2A8  1  A5 7B                lda     VARTAB
00E2AA  1  85 71                sta     INDEX
00E2AC  1  A5 AB                lda     LOWTR+1
00E2AE  1  85 74                sta     DEST+1
00E2B0  1  A5 AA                lda     LOWTR
00E2B2  1  88                   dey
00E2B3  1  F1 AA                sbc     (LOWTR),y
00E2B5  1  18                   clc
00E2B6  1  65 7B                adc     VARTAB
00E2B8  1  85 7B                sta     VARTAB
00E2BA  1  85 73                sta     DEST
00E2BC  1  A5 7C                lda     VARTAB+1
00E2BE  1  69 FF                adc     #$FF
00E2C0  1  85 7C                sta     VARTAB+1
00E2C2  1  E5 AB                sbc     LOWTR+1
00E2C4  1  AA                   tax
00E2C5  1  38                   sec
00E2C6  1  A5 AA                lda     LOWTR
00E2C8  1  E5 7B                sbc     VARTAB
00E2CA  1  A8                   tay
00E2CB  1  B0 03                bcs     L23A5
00E2CD  1  E8                   inx
00E2CE  1  C6 74                dec     DEST+1
00E2D0  1               L23A5:
00E2D0  1  18                   clc
00E2D1  1  65 71                adc     INDEX
00E2D3  1  90 03                bcc     L23AD
00E2D5  1  C6 72                dec     INDEX+1
00E2D7  1  18                   clc
00E2D8  1               L23AD:
00E2D8  1  B1 71                lda     (INDEX),y
00E2DA  1  91 73                sta     (DEST),y
00E2DC  1  C8                   iny
00E2DD  1  D0 F9                bne     L23AD
00E2DF  1  E6 72                inc     INDEX+1
00E2E1  1  E6 74                inc     DEST+1
00E2E3  1  CA                   dex
00E2E4  1  D0 F2                bne     L23AD
00E2E6  1               ; ----------------------------------------------------------------------------
00E2E6  1               PUT_NEW_LINE:
00E2E6  1  A5 13                lda     INPUTBUFFER
00E2E8  1  F0 2F                beq     FIX_LINKS
00E2EA  1  A5 85                lda     MEMSIZ
00E2EC  1  A4 86                ldy     MEMSIZ+1
00E2EE  1  85 81                sta     FRETOP
00E2F0  1  84 82                sty     FRETOP+1
00E2F2  1  A5 7B                lda     VARTAB
00E2F4  1  85 A6                sta     HIGHTR
00E2F6  1  65 5D                adc     EOLPNTR
00E2F8  1  85 A4                sta     HIGHDS
00E2FA  1  A4 7C                ldy     VARTAB+1
00E2FC  1  84 A7                sty     HIGHTR+1
00E2FE  1  90 01                bcc     L23D6
00E300  1  C8                   iny
00E301  1               L23D6:
00E301  1  84 A5                sty     HIGHDS+1
00E303  1  20 CF E1             jsr     BLTU
00E306  1  A5 7F                lda     STREND
00E308  1  A4 80                ldy     STREND+1
00E30A  1  85 7B                sta     VARTAB
00E30C  1  84 7C                sty     VARTAB+1
00E30E  1  A4 5D                ldy     EOLPNTR
00E310  1  88                   dey
00E311  1               ; ---COPY LINE INTO PROGRAM-------
00E311  1               L23E6:
00E311  1  B9 0F 00             lda     INPUTBUFFER-4,y
00E314  1  91 AA                sta     (LOWTR),y
00E316  1  88                   dey
00E317  1  10 F8                bpl     L23E6
00E319  1               ; ----------------------------------------------------------------------------
00E319  1               ; CLEAR ALL VARIABLES
00E319  1               ; RE-ESTABLISH ALL FORWARD LINKS
00E319  1               ; ----------------------------------------------------------------------------
00E319  1               FIX_LINKS:
00E319  1  20 77 E4             jsr     SETPTRS
00E31C  1  A5 79                lda     TXTTAB
00E31E  1  A4 7A                ldy     TXTTAB+1
00E320  1  85 71                sta     INDEX
00E322  1  84 72                sty     INDEX+1
00E324  1  18                   clc
00E325  1               L23FA:
00E325  1  A0 01                ldy     #$01
00E327  1  B1 71                lda     (INDEX),y
00E329  1  D0 03 4C 7D          jeq     L2351
00E32D  1  E2           
00E32E  1               
00E32E  1  A0 04                ldy     #$04
00E330  1               L2405:
00E330  1  C8                   iny
00E331  1  B1 71                lda     (INDEX),y
00E333  1  D0 FB                bne     L2405
00E335  1  C8                   iny
00E336  1  98                   tya
00E337  1  65 71                adc     INDEX
00E339  1  AA                   tax
00E33A  1  A0 00                ldy     #$00
00E33C  1  91 71                sta     (INDEX),y
00E33E  1  A5 72                lda     INDEX+1
00E340  1  69 00                adc     #$00
00E342  1  C8                   iny
00E343  1  91 71                sta     (INDEX),y
00E345  1  86 71                stx     INDEX
00E347  1  85 72                sta     INDEX+1
00E349  1  90 DA                bcc     L23FA	; always
00E34B  1               ; ----------------------------------------------------------------------------
00E34B  1               L2420:
00E34B  1  20 D9 E8             jsr     OUTDO
00E34E  1  CA                   dex
00E34F  1  10 08                bpl     INLIN2
00E351  1               L2423:
00E351  1  20 D9 E8             jsr     OUTDO
00E354  1  20 60 E8             jsr     CRDO
00E357  1               ; ----------------------------------------------------------------------------
00E357  1               ; READ A LINE, AND STRIP OFF SIGN BITS
00E357  1               ; ----------------------------------------------------------------------------
00E357  1               INLIN:
00E357  1  A2 00                ldx     #$00
00E359  1               INLIN2:
00E359  1  20 86 E3             jsr     GETLN
00E35C  1  C9 07                cmp     #$07
00E35E  1  F0 14                beq     L2443
00E360  1  C9 0D                cmp     #$0D
00E362  1  F0 1F                beq     L2453
00E364  1  C9 08                cmp     #$08 ; BACKSPACE
00E366  1  F0 E3                beq     L2420
00E368  1  C9 20                cmp     #$20
00E36A  1  90 ED                bcc     INLIN2
00E36C  1  C9 7D                cmp     #$7D
00E36E  1  B0 E9                bcs     INLIN2
00E370  1  C9 40                cmp     #$40 ; @
00E372  1  F0 DD                beq     L2423
00E374  1               L2443:
00E374  1  E0 47                cpx     #$47
00E376  1  B0 04                bcs     L244C
00E378  1  95 13                sta     INPUTBUFFER,x
00E37A  1  E8                   inx
00E37B  1  2C                   .byte   $2C
00E37C  1               L244C:
00E37C  1  A9 07                lda     #$07 ; BEL
00E37E  1  20 D9 E8             jsr     OUTDO
00E381  1  D0 D6                bne     INLIN2
00E383  1               L2453:
00E383  1  4C 5A E8             jmp     L29B9
00E386  1               GETLN:
00E386  1  20 39 FF             jsr     MONRDKEY
00E389  1  EA                   nop
00E38A  1  EA                   nop
00E38B  1  EA                   nop
00E38C  1  EA                   nop
00E38D  1  EA                   nop
00E38E  1  EA                   nop
00E38F  1  EA                   nop
00E390  1  EA                   nop
00E391  1  EA                   nop
00E392  1  EA                   nop
00E393  1  EA                   nop
00E394  1  EA                   nop
00E395  1  EA                   nop
00E396  1  EA                   nop
00E397  1  29 7F                and     #$7F
00E399  1               RDKEY:
00E399  1  C9 0F                cmp     #$0F
00E39B  1  D0 08                bne     L2465
00E39D  1  48                   pha
00E39E  1  A5 64                lda     Z14
00E3A0  1  49 FF                eor     #$FF
00E3A2  1  85 64                sta     Z14
00E3A4  1  68                   pla
00E3A5  1               L2465:
00E3A5  1  60                   rts
00E3A6  1               ; ----------------------------------------------------------------------------
00E3A6  1               ; TOKENIZE THE INPUT LINE
00E3A6  1               ; ----------------------------------------------------------------------------
00E3A6  1               PARSE_INPUT_LINE:
00E3A6  1  A6 C3                ldx     TXTPTR
00E3A8  1  A0 04                ldy     #$04
00E3AA  1  84 60                sty     DATAFLG
00E3AC  1               L246C:
00E3AC  1  B5 00                lda     INPUTBUFFERX,x
00E3AE  1  C9 20                cmp     #$20
00E3B0  1  F0 3A                beq     L24AC
00E3B2  1  85 5C                sta     ENDCHR
00E3B4  1  C9 22                cmp     #$22
00E3B6  1  F0 58                beq     L24D0
00E3B8  1  24 60                bit     DATAFLG
00E3BA  1  70 30                bvs     L24AC
00E3BC  1  C9 3F                cmp     #$3F
00E3BE  1  D0 04                bne     L2484
00E3C0  1  A9 97                lda     #TOKEN_PRINT
00E3C2  1  D0 28                bne     L24AC
00E3C4  1               L2484:
00E3C4  1  C9 30                cmp     #$30
00E3C6  1  90 04                bcc     L248C
00E3C8  1  C9 3C                cmp     #$3C
00E3CA  1  90 20                bcc     L24AC
00E3CC  1               ; ----------------------------------------------------------------------------
00E3CC  1               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00E3CC  1               ; WITH CURRENT CHAR FROM INPUT LINE
00E3CC  1               ; ----------------------------------------------------------------------------
00E3CC  1               L248C:
00E3CC  1  84 BA                sty     STRNG2
00E3CE  1  A0 00                ldy     #$00
00E3D0  1  84 5D                sty     EOLPNTR
00E3D2  1  88                   dey
00E3D3  1  86 C3                stx     TXTPTR
00E3D5  1  CA                   dex
00E3D6  1               L2496:
00E3D6  1  C8                   iny
00E3D7  1               L2497:
00E3D7  1  E8                   inx
00E3D8  1               L2498:
00E3D8  1  B5 00                lda     INPUTBUFFERX,x
00E3DA  1  C9 20                cmp     #$20
00E3DC  1  F0 F9                beq     L2497
00E3DE  1  38                   sec
00E3DF  1  F9 84 E0             sbc     TOKEN_NAME_TABLE,y
00E3E2  1  F0 F2                beq     L2496
00E3E4  1  C9 80                cmp     #$80
00E3E6  1  D0 2F                bne     L24D7
00E3E8  1  05 5D                ora     EOLPNTR
00E3EA  1               ; ----------------------------------------------------------------------------
00E3EA  1               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00E3EA  1               ; ----------------------------------------------------------------------------
00E3EA  1               L24AA:
00E3EA  1  A4 BA                ldy     STRNG2
00E3EC  1               L24AC:
00E3EC  1  E8                   inx
00E3ED  1  C8                   iny
00E3EE  1  99 0E 00             sta     INPUTBUFFER-5,y
00E3F1  1  B9 0E 00             lda     INPUTBUFFER-5,y
00E3F4  1  F0 34                beq     L24EA
00E3F6  1  38                   sec
00E3F7  1  E9 3A                sbc     #$3A
00E3F9  1  F0 04                beq     L24BF
00E3FB  1  C9 49                cmp     #$49
00E3FD  1  D0 02                bne     L24C1
00E3FF  1               L24BF:
00E3FF  1  85 60                sta     DATAFLG
00E401  1               L24C1:
00E401  1  38                   sec
00E402  1  E9 54                sbc     #TOKEN_REM-':'
00E404  1  D0 A6                bne     L246C
00E406  1  85 5C                sta     ENDCHR
00E408  1               ; ----------------------------------------------------------------------------
00E408  1               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00E408  1               ; BY COPYING CHARS UP TO ENDCHR.
00E408  1               ; ----------------------------------------------------------------------------
00E408  1               L24C8:
00E408  1  B5 00                lda     INPUTBUFFERX,x
00E40A  1  F0 E0                beq     L24AC
00E40C  1  C5 5C                cmp     ENDCHR
00E40E  1  F0 DC                beq     L24AC
00E410  1               L24D0:
00E410  1  C8                   iny
00E411  1  99 0E 00             sta     INPUTBUFFER-5,y
00E414  1  E8                   inx
00E415  1  D0 F1                bne     L24C8
00E417  1               ; ----------------------------------------------------------------------------
00E417  1               ; ADVANCE POINTER TO NEXT TOKEN NAME
00E417  1               ; ----------------------------------------------------------------------------
00E417  1               L24D7:
00E417  1  A6 C3                ldx     TXTPTR
00E419  1  E6 5D                inc     EOLPNTR
00E41B  1               L24DB:
00E41B  1  C8                   iny
00E41C  1  B9 83 E0             lda     MATHTBL+28+1,y
00E41F  1  10 FA                bpl     L24DB
00E421  1  B9 84 E0             lda     TOKEN_NAME_TABLE,y
00E424  1  D0 B2                bne     L2498
00E426  1  B5 00                lda     INPUTBUFFERX,x
00E428  1  10 C0                bpl     L24AA
00E42A  1               ; ---END OF LINE------------------
00E42A  1               L24EA:
00E42A  1  99 10 00             sta     INPUTBUFFER-3,y
00E42D  1  A9 12                lda     #<INPUTBUFFER-1
00E42F  1  85 C3                sta     TXTPTR
00E431  1  60                   rts
00E432  1               ; ----------------------------------------------------------------------------
00E432  1               ; SEARCH FOR LINE
00E432  1               ;
00E432  1               ; (LINNUM) = LINE # TO FIND
00E432  1               ; IF NOT FOUND:  CARRY = 0
00E432  1               ;	LOWTR POINTS AT NEXT LINE
00E432  1               ; IF FOUND:      CARRY = 1
00E432  1               ;	LOWTR POINTS AT LINE
00E432  1               ; ----------------------------------------------------------------------------
00E432  1               FNDLIN:
00E432  1  A5 79                lda     TXTTAB
00E434  1  A6 7A                ldx     TXTTAB+1
00E436  1               FL1:
00E436  1  A0 01                ldy     #$01
00E438  1  85 AA                sta     LOWTR
00E43A  1  86 AB                stx     LOWTR+1
00E43C  1  B1 AA                lda     (LOWTR),y
00E43E  1  F0 1F                beq     L251F
00E440  1  C8                   iny
00E441  1  C8                   iny
00E442  1  A5 12                lda     LINNUM+1
00E444  1  D1 AA                cmp     (LOWTR),y
00E446  1  90 18                bcc     L2520
00E448  1  F0 03                beq     L250D
00E44A  1  88                   dey
00E44B  1  D0 09                bne     L2516
00E44D  1               L250D:
00E44D  1  A5 11                lda     LINNUM
00E44F  1  88                   dey
00E450  1  D1 AA                cmp     (LOWTR),y
00E452  1  90 0C                bcc     L2520
00E454  1  F0 0A                beq     L2520
00E456  1               L2516:
00E456  1  88                   dey
00E457  1  B1 AA                lda     (LOWTR),y
00E459  1  AA                   tax
00E45A  1  88                   dey
00E45B  1  B1 AA                lda     (LOWTR),y
00E45D  1  B0 D7                bcs     FL1
00E45F  1               L251F:
00E45F  1  18                   clc
00E460  1               L2520:
00E460  1  60                   rts
00E461  1               ; ----------------------------------------------------------------------------
00E461  1               ; "NEW" STATEMENT
00E461  1               ; ----------------------------------------------------------------------------
00E461  1               NEW:
00E461  1  D0 FD                bne     L2520
00E463  1               SCRTCH:
00E463  1  A9 00                lda     #$00
00E465  1  A8                   tay
00E466  1  91 79                sta     (TXTTAB),y
00E468  1  C8                   iny
00E469  1  91 79                sta     (TXTTAB),y
00E46B  1  A5 79                lda     TXTTAB
00E46D  1  69 02                adc     #$02
00E46F  1  85 7B                sta     VARTAB
00E471  1  A5 7A                lda     TXTTAB+1
00E473  1  69 00                adc     #$00
00E475  1  85 7C                sta     VARTAB+1
00E477  1               ; ----------------------------------------------------------------------------
00E477  1               SETPTRS:
00E477  1  20 A7 E4             jsr     STXTPT
00E47A  1               ; ----------------------------------------------------------------------------
00E47A  1               ; "CLEAR" STATEMENT
00E47A  1               ; ----------------------------------------------------------------------------
00E47A  1               CLEARC:
00E47A  1  A5 85                lda     MEMSIZ
00E47C  1  A4 86                ldy     MEMSIZ+1
00E47E  1  85 81                sta     FRETOP
00E480  1  84 82                sty     FRETOP+1
00E482  1  A5 7B                lda     VARTAB
00E484  1  A4 7C                ldy     VARTAB+1
00E486  1  85 7D                sta     ARYTAB
00E488  1  84 7E                sty     ARYTAB+1
00E48A  1  85 7F                sta     STREND
00E48C  1  84 80                sty     STREND+1
00E48E  1  20 1A E6             jsr     RESTORE
00E491  1               ; ----------------------------------------------------------------------------
00E491  1               STKINI:
00E491  1  A2 68                ldx     #TEMPST
00E493  1  86 65                stx     TEMPPT
00E495  1  68                   pla
00E496  1  8D FD 01             sta     STACK+STACK_TOP+1
00E499  1  68                   pla
00E49A  1  8D FE 01             sta     STACK+STACK_TOP+2
00E49D  1  A2 FC                ldx     #STACK_TOP
00E49F  1  9A                   txs
00E4A0  1  A9 00                lda     #$00
00E4A2  1  85 8C                sta     OLDTEXT+1
00E4A4  1  85 61                sta     SUBFLG
00E4A6  1               L256A:
00E4A6  1  60                   rts
00E4A7  1               ; ----------------------------------------------------------------------------
00E4A7  1               ; SET TXTPTR TO BEGINNING OF PROGRAM
00E4A7  1               ; ----------------------------------------------------------------------------
00E4A7  1               STXTPT:
00E4A7  1  18                   clc
00E4A8  1  A5 79                lda     TXTTAB
00E4AA  1  69 FF                adc     #$FF
00E4AC  1  85 C3                sta     TXTPTR
00E4AE  1  A5 7A                lda     TXTTAB+1
00E4B0  1  69 FF                adc     #$FF
00E4B2  1  85 C4                sta     TXTPTR+1
00E4B4  1  60                   rts
00E4B5  1               ; ----------------------------------------------------------------------------
00E4B5  1               ; ----------------------------------------------------------------------------
00E4B5  1               ; "LIST" STATEMENT
00E4B5  1               ; ----------------------------------------------------------------------------
00E4B5  1               LIST:
00E4B5  1  90 06                bcc     L2581
00E4B7  1  F0 04                beq     L2581
00E4B9  1  C9 A4                cmp     #TOKEN_MINUS
00E4BB  1  D0 E9                bne     L256A
00E4BD  1               L2581:
00E4BD  1  20 73 E7             jsr     LINGET
00E4C0  1  20 32 E4             jsr     FNDLIN
00E4C3  1  20 C2 00             jsr     CHRGOT
00E4C6  1  F0 0C                beq     L2598
00E4C8  1  C9 A4                cmp     #TOKEN_MINUS
00E4CA  1  D0 94                bne     L2520
00E4CC  1  20 BC 00             jsr     CHRGET
00E4CF  1  20 73 E7             jsr     LINGET
00E4D2  1  D0 8C                bne     L2520
00E4D4  1               L2598:
00E4D4  1  68                   pla
00E4D5  1  68                   pla
00E4D6  1  A5 11                lda     LINNUM
00E4D8  1  05 12                ora     LINNUM+1
00E4DA  1  D0 06                bne     L25A6
00E4DC  1  A9 FF                lda     #$FF
00E4DE  1  85 11                sta     LINNUM
00E4E0  1  85 12                sta     LINNUM+1
00E4E2  1               L25A6:
00E4E2  1  A0 01                ldy     #$01
00E4E4  1  84 60                sty     DATAFLG
00E4E6  1  B1 AA                lda     (LOWTRX),y
00E4E8  1  F0 41                beq     L25E5
00E4EA  1  20 29 E6             jsr     ISCNTC
00E4ED  1  20 60 E8             jsr     CRDO
00E4F0  1  C8                   iny
00E4F1  1  B1 AA                lda     (LOWTRX),y
00E4F3  1  AA                   tax
00E4F4  1  C8                   iny
00E4F5  1  B1 AA                lda     (LOWTRX),y
00E4F7  1  C5 12                cmp     LINNUM+1
00E4F9  1  D0 04                bne     L25C1
00E4FB  1  E4 11                cpx     LINNUM
00E4FD  1  F0 02                beq     L25C3
00E4FF  1               L25C1:
00E4FF  1  B0 2A                bcs     L25E5
00E501  1               ; ---LIST ONE LINE----------------
00E501  1               L25C3:
00E501  1  84 97                sty     FORPNT
00E503  1  20 52 F9             jsr     LINPRT
00E506  1  A9 20                lda     #$20
00E508  1               L25CA:
00E508  1  A4 97                ldy     FORPNT
00E50A  1  29 7F                and     #$7F
00E50C  1               L25CE:
00E50C  1  20 D9 E8             jsr     OUTDO
00E50F  1  C9 22                cmp     #$22
00E511  1  D0 06                bne     LA519
00E513  1  A5 60                lda     DATAFLG
00E515  1  49 FF                eor     #$FF
00E517  1  85 60                sta     DATAFLG
00E519  1               LA519:
00E519  1  C8                   iny
00E51A  1  B1 AA                lda     (LOWTRX),y
00E51C  1  D0 10                bne     L25E8
00E51E  1  A8                   tay
00E51F  1  B1 AA                lda     (LOWTRX),y
00E521  1  AA                   tax
00E522  1  C8                   iny
00E523  1  B1 AA                lda     (LOWTRX),y
00E525  1  86 AA                stx     LOWTRX
00E527  1  85 AB                sta     LOWTRX+1
00E529  1  D0 B7                bne     L25A6
00E52B  1               L25E5:
00E52B  1  4C 74 E2             jmp     RESTART
00E52E  1               L25E8:
00E52E  1  10 DC                bpl     L25CE
00E530  1  C9 FF                cmp     #$FF
00E532  1  F0 D8                beq     L25CE
00E534  1  24 60                bit     DATAFLG
00E536  1  30 D4                bmi     L25CE
00E538  1  38                   sec
00E539  1  E9 7F                sbc     #$7F
00E53B  1  AA                   tax
00E53C  1  84 97                sty     FORPNT
00E53E  1  A0 FF                ldy     #$FF
00E540  1               L25F2:
00E540  1  CA                   dex
00E541  1  F0 08                beq     L25FD
00E543  1               L25F5:
00E543  1  C8                   iny
00E544  1  B9 84 E0             lda     TOKEN_NAME_TABLE,y
00E547  1  10 FA                bpl     L25F5
00E549  1  30 F5                bmi     L25F2
00E54B  1               L25FD:
00E54B  1  C8                   iny
00E54C  1  B9 84 E0             lda     TOKEN_NAME_TABLE,y
00E54F  1  30 B7                bmi     L25CA
00E551  1  20 D9 E8             jsr     OUTDO
00E554  1  D0 F5                bne     L25FD	; always
00E556  1               ; ----------------------------------------------------------------------------
00E556  1               ; "FOR" STATEMENT
00E556  1               ;
00E556  1               ; FOR PUSHES 18 BYTES ON THE STACK:
00E556  1               ; 2 -- TXTPTR
00E556  1               ; 2 -- LINE NUMBER
00E556  1               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00E556  1               ; 1 -- STEP SIGN
00E556  1               ; 5 -- STEP VALUE
00E556  1               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00E556  1               ; 1 -- FOR TOKEN ($81)
00E556  1               ; ----------------------------------------------------------------------------
00E556  1               FOR:
00E556  1  A9 80                lda     #$80
00E558  1  85 61                sta     SUBFLG
00E55A  1  20 AD E7             jsr     LET
00E55D  1  20 A1 E1             jsr     GTFORPNT
00E560  1  D0 05                bne     L2619
00E562  1  8A                   txa
00E563  1  69 0D                adc     #FOR_STACK1
00E565  1  AA                   tax
00E566  1  9A                   txs
00E567  1               L2619:
00E567  1  68                   pla
00E568  1  68                   pla
00E569  1  A9 08                lda     #FOR_STACK2
00E56B  1  20 12 E2             jsr     CHKMEM
00E56E  1  20 0E E7             jsr     DATAN
00E571  1  18                   clc
00E572  1  98                   tya
00E573  1  65 C3                adc     TXTPTR
00E575  1  48                   pha
00E576  1  A5 C4                lda     TXTPTR+1
00E578  1  69 00                adc     #$00
00E57A  1  48                   pha
00E57B  1  A5 88                lda     CURLIN+1
00E57D  1  48                   pha
00E57E  1  A5 87                lda     CURLIN
00E580  1  48                   pha
00E581  1  A9 9D                lda     #TOKEN_TO
00E583  1  20 F7 EB             jsr     SYNCHR
00E586  1  20 A4 EA             jsr     CHKNUM
00E589  1  20 A1 EA             jsr     FRMNUM
00E58C  1  A5 B0                lda     FACSIGN
00E58E  1  09 7F                ora     #$7F
00E590  1  25 AD                and     FAC+1
00E592  1  85 AD                sta     FAC+1
00E594  1  A9 9F                lda     #<STEP
00E596  1  A0 E5                ldy     #>STEP
00E598  1  85 71                sta     INDEX
00E59A  1  84 72                sty     INDEX+1
00E59C  1  4C 5A EB             jmp     FRM_STACK3
00E59F  1               ; ----------------------------------------------------------------------------
00E59F  1               ; "STEP" PHRASE OF "FOR" STATEMENT
00E59F  1               ; ----------------------------------------------------------------------------
00E59F  1               STEP:
00E59F  1  A9 90                lda     #<CON_ONE
00E5A1  1  A0 F5                ldy     #>CON_ONE
00E5A3  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00E5A6  1  20 C2 00             jsr     CHRGOT
00E5A9  1  C9 A2                cmp     #TOKEN_STEP
00E5AB  1  D0 06                bne     L2665
00E5AD  1  20 BC 00             jsr     CHRGET
00E5B0  1  20 A1 EA             jsr     FRMNUM
00E5B3  1               L2665:
00E5B3  1  20 BE F7             jsr     SIGN
00E5B6  1  20 4F EB             jsr     FRM_STACK2
00E5B9  1  A5 98                lda     FORPNT+1
00E5BB  1  48                   pha
00E5BC  1  A5 97                lda     FORPNT
00E5BE  1  48                   pha
00E5BF  1  A9 81                lda     #$81
00E5C1  1  48                   pha
00E5C2  1               ; ----------------------------------------------------------------------------
00E5C2  1               ; PERFORM NEXT STATEMENT
00E5C2  1               ; ----------------------------------------------------------------------------
00E5C2  1               NEWSTT:
00E5C2  1  20 29 E6             jsr     ISCNTC
00E5C5  1  A5 C3                lda     TXTPTR
00E5C7  1  A4 C4                ldy     TXTPTR+1
00E5C9  1  F0 06                beq     L2683
00E5CB  1  85 8B                sta     OLDTEXT
00E5CD  1  84 8C                sty     OLDTEXT+1
00E5CF  1  A0 00                ldy     #$00
00E5D1  1               L2683:
00E5D1  1  B1 C3                lda     (TXTPTR),y
00E5D3  1  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00E5D5  1  C9 3A                cmp     #$3A
00E5D7  1  F0 1D                beq     NEWSTT2
00E5D9  1               SYNERR1:
00E5D9  1  4C 00 EC             jmp     SYNERR
00E5DC  1               LA5DC:
00E5DC  1  A0 02                ldy     #$02
00E5DE  1  B1 C3                lda     (TXTPTR),y
00E5E0  1  18                   clc
00E5E1  1  F0 62                beq     L2701
00E5E3  1  C8                   iny
00E5E4  1  B1 C3                lda     (TXTPTR),y
00E5E6  1  85 87                sta     CURLIN
00E5E8  1  C8                   iny
00E5E9  1  B1 C3                lda     (TXTPTR),y
00E5EB  1  85 88                sta     CURLIN+1
00E5ED  1  98                   tya
00E5EE  1  65 C3                adc     TXTPTR
00E5F0  1  85 C3                sta     TXTPTR
00E5F2  1  90 02                bcc     NEWSTT2
00E5F4  1  E6 C4                inc     TXTPTR+1
00E5F6  1               NEWSTT2:
00E5F6  1  20 BC 00             jsr     CHRGET
00E5F9  1  20 FF E5             jsr     EXECUTE_STATEMENT
00E5FC  1  4C C2 E5             jmp     NEWSTT
00E5FF  1               ; ----------------------------------------------------------------------------
00E5FF  1               ; EXECUTE A STATEMENT
00E5FF  1               ;
00E5FF  1               ; (A) IS FIRST CHAR OF STATEMENT
00E5FF  1               ; CARRY IS SET
00E5FF  1               ; ----------------------------------------------------------------------------
00E5FF  1               EXECUTE_STATEMENT:
00E5FF  1  F0 6D                beq     RET1
00E601  1  38                   sec
00E602  1               EXECUTE_STATEMENT1:
00E602  1  E9 80                sbc     #$80
00E604  1  B0 03 4C AD          jcc     LET	; old: 1 cycle more on instr.
00E608  1  E7           
00E609  1               
00E609  1  C9 1C                cmp     #NUM_TOKENS
00E60B  1  B0 CC                bcs     SYNERR1
00E60D  1  0A                   asl     a
00E60E  1  A8                   tay
00E60F  1  B9 01 E0             lda     TOKEN_ADDRESS_TABLE+1,y
00E612  1  48                   pha
00E613  1  B9 00 E0             lda     TOKEN_ADDRESS_TABLE,y
00E616  1  48                   pha
00E617  1  4C BC 00             jmp     CHRGET
00E61A  1               ; ----------------------------------------------------------------------------
00E61A  1               ; "RESTORE" STATEMENT
00E61A  1               ; ----------------------------------------------------------------------------
00E61A  1               RESTORE:
00E61A  1  38                   sec
00E61B  1  A5 79                lda     TXTTAB
00E61D  1  E9 01                sbc     #$01
00E61F  1  A4 7A                ldy     TXTTAB+1
00E621  1  B0 01                bcs     SETDA
00E623  1  88                   dey
00E624  1               SETDA:
00E624  1  85 8F                sta     DATPTR
00E626  1  84 90                sty     DATPTR+1
00E628  1  60                   rts
00E629  1               ; ----------------------------------------------------------------------------
00E629  1               ; SEE IF CONTROL-C TYPED
00E629  1               ; ----------------------------------------------------------------------------
00E629  1               
00E629  1               ISCNTC:
00E629  1               ; MODIFIED CALL BY G.SEARLE FROM THE ORIGINAL OSI CODE
00E629  1  20 49 FF             jsr     MONISCNTC
00E62C  1               ; runs into "STOP"
00E62C  1               ; ----------------------------------------------------------------------------
00E62C  1               ; "STOP" STATEMENT
00E62C  1               ; ----------------------------------------------------------------------------
00E62C  1               STOP:
00E62C  1  B0 01                bcs     END2
00E62E  1               ; ----------------------------------------------------------------------------
00E62E  1               ; "END" STATEMENT
00E62E  1               ; ----------------------------------------------------------------------------
00E62E  1               END:
00E62E  1  18                   clc
00E62F  1               END2:
00E62F  1  D0 3D                bne     RET1
00E631  1  A5 C3                lda     TXTPTR
00E633  1  A4 C4                ldy     TXTPTR+1
00E635  1  F0 0C                beq     END4
00E637  1  85 8B                sta     OLDTEXT
00E639  1  84 8C                sty     OLDTEXT+1
00E63B  1               CONTROL_C_TYPED:
00E63B  1  A5 87                lda     CURLIN
00E63D  1  A4 88                ldy     CURLIN+1
00E63F  1  85 89                sta     OLDLIN
00E641  1  84 8A                sty     OLDLIN+1
00E643  1               END4:
00E643  1  68                   pla
00E644  1  68                   pla
00E645  1               L2701:
00E645  1  A9 99                lda     #<QT_BREAK
00E647  1  A0 E1                ldy     #>QT_BREAK
00E649  1  A2 00                ldx     #$00
00E64B  1  86 64                stx     Z14
00E64D  1  90 03                bcc     L270E
00E64F  1  4C 69 E2             jmp     PRINT_ERROR_LINNUM
00E652  1               L270E:
00E652  1  4C 74 E2             jmp     RESTART
00E655  1               ; ----------------------------------------------------------------------------
00E655  1               ; "CONT" COMMAND
00E655  1               ; ----------------------------------------------------------------------------
00E655  1               CONT:
00E655  1  D0 17                bne     RET1
00E657  1  A2 1E                ldx     #ERR_CANTCONT
00E659  1  A4 8C                ldy     OLDTEXT+1
00E65B  1  D0 03                bne     L271C
00E65D  1  4C 4E E2             jmp     ERROR
00E660  1               L271C:
00E660  1  A5 8B                lda     OLDTEXT
00E662  1  85 C3                sta     TXTPTR
00E664  1  84 C4                sty     TXTPTR+1
00E666  1  A5 89                lda     OLDLIN
00E668  1  A4 8A                ldy     OLDLIN+1
00E66A  1  85 87                sta     CURLIN
00E66C  1  84 88                sty     CURLIN+1
00E66E  1               RET1:
00E66E  1  60                   rts
00E66F  1               NULL:
00E66F  1  20 A2 F3             jsr     GETBYT
00E672  1  D0 FA                bne     RET1
00E674  1  E8                   inx
00E675  1  E0 0A                cpx     #NULL_MAX
00E677  1  B0 04                bcs     L2739
00E679  1  CA                   dex
00E67A  1  86 0D                stx     Z15
00E67C  1  60                   rts
00E67D  1               L2739:
00E67D  1  4C 7C EE             jmp     IQERR
00E680  1               CLEAR:
00E680  1  D0 EC                bne     RET1
00E682  1  4C 7A E4             jmp     CLEARC
00E685  1               ; ----------------------------------------------------------------------------
00E685  1               ; "RUN" COMMAND
00E685  1               ; ----------------------------------------------------------------------------
00E685  1               RUN:
00E685  1  D0 03                bne     L27CF
00E687  1  4C 77 E4             jmp     SETPTRS
00E68A  1               L27CF:
00E68A  1  20 7A E4             jsr     CLEARC
00E68D  1  4C A4 E6             jmp     L27E9
00E690  1               ; ----------------------------------------------------------------------------
00E690  1               ; "GOSUB" STATEMENT
00E690  1               ;
00E690  1               ; LEAVES 7 BYTES ON STACK:
00E690  1               ; 2 -- RETURN ADDRESS (NEWSTT)
00E690  1               ; 2 -- TXTPTR
00E690  1               ; 2 -- LINE #
00E690  1               ; 1 -- GOSUB TOKEN
00E690  1               ; ----------------------------------------------------------------------------
00E690  1               GOSUB:
00E690  1  A9 03                lda     #$03
00E692  1  20 12 E2             jsr     CHKMEM
00E695  1  A5 C4                lda     TXTPTR+1
00E697  1  48                   pha
00E698  1  A5 C3                lda     TXTPTR
00E69A  1  48                   pha
00E69B  1  A5 88                lda     CURLIN+1
00E69D  1  48                   pha
00E69E  1  A5 87                lda     CURLIN
00E6A0  1  48                   pha
00E6A1  1  A9 8C                lda     #TOKEN_GOSUB
00E6A3  1  48                   pha
00E6A4  1               L27E9:
00E6A4  1  20 C2 00             jsr     CHRGOT
00E6A7  1  20 AD E6             jsr     GOTO
00E6AA  1  4C C2 E5             jmp     NEWSTT
00E6AD  1               ; ----------------------------------------------------------------------------
00E6AD  1               ; "GOTO" STATEMENT
00E6AD  1               ; ALSO USED BY "RUN" AND "GOSUB"
00E6AD  1               ; ----------------------------------------------------------------------------
00E6AD  1               GOTO:
00E6AD  1  20 73 E7             jsr     LINGET
00E6B0  1  20 11 E7             jsr     REMN
00E6B3  1  A5 88                lda     CURLIN+1
00E6B5  1  C5 12                cmp     LINNUM+1
00E6B7  1  B0 0B                bcs     L2809
00E6B9  1  98                   tya
00E6BA  1  38                   sec
00E6BB  1  65 C3                adc     TXTPTR
00E6BD  1  A6 C4                ldx     TXTPTR+1
00E6BF  1  90 07                bcc     L280D
00E6C1  1  E8                   inx
00E6C2  1  B0 04                bcs     L280D
00E6C4  1               L2809:
00E6C4  1  A5 79                lda     TXTTAB
00E6C6  1  A6 7A                ldx     TXTTAB+1
00E6C8  1               L280D:
00E6C8  1  20 36 E4             jsr     FL1
00E6CB  1  90 1E                bcc     UNDERR
00E6CD  1  A5 AA                lda     LOWTRX
00E6CF  1  E9 01                sbc     #$01
00E6D1  1  85 C3                sta     TXTPTR
00E6D3  1  A5 AB                lda     LOWTRX+1
00E6D5  1  E9 00                sbc     #$00
00E6D7  1  85 C4                sta     TXTPTR+1
00E6D9  1               L281E:
00E6D9  1  60                   rts
00E6DA  1               ; ----------------------------------------------------------------------------
00E6DA  1               ; "POP" AND "RETURN" STATEMENTS
00E6DA  1               ; ----------------------------------------------------------------------------
00E6DA  1               POP:
00E6DA  1  D0 FD                bne     L281E
00E6DC  1  A9 FF                lda     #$FF
00E6DE  1  85 97                sta     FORPNT
00E6E0  1  20 A1 E1             jsr     GTFORPNT
00E6E3  1  9A                   txs
00E6E4  1  C9 8C                cmp     #TOKEN_GOSUB
00E6E6  1  F0 0B                beq     RETURN
00E6E8  1  A2 04                ldx     #ERR_NOGOSUB
00E6EA  1  2C                   .byte   $2C
00E6EB  1               UNDERR:
00E6EB  1  A2 0E                ldx     #ERR_UNDEFSTAT
00E6ED  1  4C 4E E2             jmp     ERROR
00E6F0  1               ; ----------------------------------------------------------------------------
00E6F0  1               SYNERR2:
00E6F0  1  4C 00 EC             jmp     SYNERR
00E6F3  1               ; ----------------------------------------------------------------------------
00E6F3  1               RETURN:
00E6F3  1  68                   pla
00E6F4  1  68                   pla
00E6F5  1  85 87                sta     CURLIN
00E6F7  1  68                   pla
00E6F8  1  85 88                sta     CURLIN+1
00E6FA  1  68                   pla
00E6FB  1  85 C3                sta     TXTPTR
00E6FD  1  68                   pla
00E6FE  1  85 C4                sta     TXTPTR+1
00E700  1               ; ----------------------------------------------------------------------------
00E700  1               ; "DATA" STATEMENT
00E700  1               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00E700  1               ; ----------------------------------------------------------------------------
00E700  1               DATA:
00E700  1  20 0E E7             jsr     DATAN
00E703  1               ; ----------------------------------------------------------------------------
00E703  1               ; ADD (Y) TO TXTPTR
00E703  1               ; ----------------------------------------------------------------------------
00E703  1               ADDON:
00E703  1  98                   tya
00E704  1  18                   clc
00E705  1  65 C3                adc     TXTPTR
00E707  1  85 C3                sta     TXTPTR
00E709  1  90 02                bcc     L2852
00E70B  1  E6 C4                inc     TXTPTR+1
00E70D  1               L2852:
00E70D  1  60                   rts
00E70E  1               ; ----------------------------------------------------------------------------
00E70E  1               ; SCAN AHEAD TO NEXT ":" OR EOL
00E70E  1               ; ----------------------------------------------------------------------------
00E70E  1               DATAN:
00E70E  1  A2 3A                ldx     #$3A
00E710  1  2C                   .byte   $2C
00E711  1               REMN:
00E711  1  A2 00                ldx     #$00
00E713  1  86 5B                stx     CHARAC
00E715  1  A0 00                ldy     #$00
00E717  1  84 5C                sty     ENDCHR
00E719  1               L285E:
00E719  1  A5 5C                lda     ENDCHR
00E71B  1  A6 5B                ldx     CHARAC
00E71D  1  85 5B                sta     CHARAC
00E71F  1  86 5C                stx     ENDCHR
00E721  1               L2866:
00E721  1  B1 C3                lda     (TXTPTR),y
00E723  1  F0 E8                beq     L2852
00E725  1  C5 5C                cmp     ENDCHR
00E727  1  F0 E4                beq     L2852
00E729  1  C8                   iny
00E72A  1  C9 22                cmp     #$22
00E72C  1  F0 EB                beq     L285E; old: swap & cont is faster
00E72E  1  D0 F1                bne     L2866
00E730  1               ; ----------------------------------------------------------------------------
00E730  1               ; "IF" STATEMENT
00E730  1               ; ----------------------------------------------------------------------------
00E730  1               IF:
00E730  1  20 B5 EA             jsr     FRMEVL
00E733  1  20 C2 00             jsr     CHRGOT
00E736  1  C9 88                cmp     #TOKEN_GOTO
00E738  1  F0 05                beq     L2884
00E73A  1  A9 A0                lda     #TOKEN_THEN
00E73C  1  20 F7 EB             jsr     SYNCHR
00E73F  1               L2884:
00E73F  1  A5 AC                lda     FAC
00E741  1  D0 05                bne     L288D
00E743  1               ; ----------------------------------------------------------------------------
00E743  1               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00E743  1               ; ----------------------------------------------------------------------------
00E743  1               REM:
00E743  1  20 11 E7             jsr     REMN
00E746  1  F0 BB                beq     ADDON
00E748  1               L288D:
00E748  1  20 C2 00             jsr     CHRGOT
00E74B  1  B0 03                bcs     L2895
00E74D  1  4C AD E6             jmp     GOTO
00E750  1               L2895:
00E750  1  4C FF E5             jmp     EXECUTE_STATEMENT
00E753  1               ; ----------------------------------------------------------------------------
00E753  1               ; "ON" STATEMENT
00E753  1               ;
00E753  1               ; ON <EXP> GOTO <LIST>
00E753  1               ; ON <EXP> GOSUB <LIST>
00E753  1               ; ----------------------------------------------------------------------------
00E753  1               ON:
00E753  1  20 A2 F3             jsr     GETBYT
00E756  1  48                   pha
00E757  1  C9 8C                cmp     #TOKEN_GOSUB
00E759  1  F0 04                beq     L28A4
00E75B  1               L28A0:
00E75B  1  C9 88                cmp     #TOKEN_GOTO
00E75D  1  D0 91                bne     SYNERR2
00E75F  1               L28A4:
00E75F  1  C6 AF                dec     FAC_LAST
00E761  1  D0 04                bne     L28AC
00E763  1  68                   pla
00E764  1  4C 02 E6             jmp     EXECUTE_STATEMENT1
00E767  1               L28AC:
00E767  1  20 BC 00             jsr     CHRGET
00E76A  1  20 73 E7             jsr     LINGET
00E76D  1  C9 2C                cmp     #$2C
00E76F  1  F0 EE                beq     L28A4
00E771  1  68                   pla
00E772  1               L28B7:
00E772  1  60                   rts
00E773  1               ; ----------------------------------------------------------------------------
00E773  1               ; CONVERT LINE NUMBER
00E773  1               ; ----------------------------------------------------------------------------
00E773  1               LINGET:
00E773  1  A2 00                ldx     #$00
00E775  1  86 11                stx     LINNUM
00E777  1  86 12                stx     LINNUM+1
00E779  1               L28BE:
00E779  1  B0 F7                bcs     L28B7
00E77B  1  E9 2F                sbc     #$2F
00E77D  1  85 5B                sta     CHARAC
00E77F  1  A5 12                lda     LINNUM+1
00E781  1  85 71                sta     INDEX
00E783  1  C9 19                cmp     #$19
00E785  1  B0 D4                bcs     L28A0
00E787  1               ; <<<<<DANGEROUS CODE>>>>>
00E787  1               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00E787  1               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00E787  1               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00E787  1               ; FOR OTHER CALLS TO LINGET.
00E787  1               ;
00E787  1               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00E787  1               ; THEN TYPE "GO TO 437761".
00E787  1               ;
00E787  1               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00E787  1               ; THE PROBLEM.  ($AB00 - $ABFF)
00E787  1               ; <<<<<DANGEROUS CODE>>>>>
00E787  1  A5 11                lda     LINNUM
00E789  1  0A                   asl     a
00E78A  1  26 71                rol     INDEX
00E78C  1  0A                   asl     a
00E78D  1  26 71                rol     INDEX
00E78F  1  65 11                adc     LINNUM
00E791  1  85 11                sta     LINNUM
00E793  1  A5 71                lda     INDEX
00E795  1  65 12                adc     LINNUM+1
00E797  1  85 12                sta     LINNUM+1
00E799  1  06 11                asl     LINNUM
00E79B  1  26 12                rol     LINNUM+1
00E79D  1  A5 11                lda     LINNUM
00E79F  1  65 5B                adc     CHARAC
00E7A1  1  85 11                sta     LINNUM
00E7A3  1  90 02                bcc     L28EC
00E7A5  1  E6 12                inc     LINNUM+1
00E7A7  1               L28EC:
00E7A7  1  20 BC 00             jsr     CHRGET
00E7AA  1  4C 79 E7             jmp     L28BE
00E7AD  1               ; ----------------------------------------------------------------------------
00E7AD  1               ; "LET" STATEMENT
00E7AD  1               ;
00E7AD  1               ; LET <VAR> = <EXP>
00E7AD  1               ; <VAR> = <EXP>
00E7AD  1               ; ----------------------------------------------------------------------------
00E7AD  1               LET:
00E7AD  1  20 FF EC             jsr     PTRGET
00E7B0  1  85 97                sta     FORPNT
00E7B2  1  84 98                sty     FORPNT+1
00E7B4  1  A9 AB                lda     #TOKEN_EQUAL
00E7B6  1  20 F7 EB             jsr     SYNCHR
00E7B9  1  A5 5F                lda     VALTYP
00E7BB  1  48                   pha
00E7BC  1  20 B5 EA             jsr     FRMEVL
00E7BF  1  68                   pla
00E7C0  1  2A                   rol     a
00E7C1  1  20 A7 EA             jsr     CHKVAL
00E7C4  1  D0 03                bne     LETSTRING
00E7C6  1               ; ----------------------------------------------------------------------------
00E7C6  1               ; REAL VARIABLE = EXPRESSION
00E7C6  1               ; ----------------------------------------------------------------------------
00E7C6  1  4C 68 F7             jmp     SETFOR
00E7C9  1               LETSTRING:
00E7C9  1               ; ----------------------------------------------------------------------------
00E7C9  1               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00E7C9  1               ; ----------------------------------------------------------------------------
00E7C9  1  A0 02                ldy     #$02
00E7CB  1  B1 AE                lda     (FAC_LAST-1),y
00E7CD  1  C5 82                cmp     FRETOP+1
00E7CF  1  90 17                bcc     L2946
00E7D1  1  D0 07                bne     L2938
00E7D3  1  88                   dey
00E7D4  1  B1 AE                lda     (FAC_LAST-1),y
00E7D6  1  C5 81                cmp     FRETOP
00E7D8  1  90 0E                bcc     L2946
00E7DA  1               L2938:
00E7DA  1  A4 AF                ldy     FAC_LAST
00E7DC  1  C4 7C                cpy     VARTAB+1
00E7DE  1  90 08                bcc     L2946
00E7E0  1  D0 0D                bne     L294D
00E7E2  1  A5 AE                lda     FAC_LAST-1
00E7E4  1  C5 7B                cmp     VARTAB
00E7E6  1  B0 07                bcs     L294D
00E7E8  1               L2946:
00E7E8  1  A5 AE                lda     FAC_LAST-1
00E7EA  1  A4 AF                ldy     FAC_LAST
00E7EC  1  4C 05 E8             jmp     L2963
00E7EF  1               L294D:
00E7EF  1  A0 00                ldy     #$00
00E7F1  1  B1 AE                lda     (FAC_LAST-1),y
00E7F3  1  20 90 F0             jsr     STRINI
00E7F6  1  A5 9E                lda     DSCPTR
00E7F8  1  A4 9F                ldy     DSCPTR+1
00E7FA  1  85 B8                sta     STRNG1
00E7FC  1  84 B9                sty     STRNG1+1
00E7FE  1  20 7E F2             jsr     MOVINS
00E801  1  A9 AC                lda     #FAC
00E803  1  A0 00                ldy     #$00
00E805  1               L2963:
00E805  1  85 9E                sta     DSCPTR
00E807  1  84 9F                sty     DSCPTR+1
00E809  1  20 DF F2             jsr     FRETMS
00E80C  1  A0 00                ldy     #$00
00E80E  1  B1 9E                lda     (DSCPTR),y
00E810  1  91 97                sta     (FORPNT),y
00E812  1  C8                   iny
00E813  1  B1 9E                lda     (DSCPTR),y
00E815  1  91 97                sta     (FORPNT),y
00E817  1  C8                   iny
00E818  1  B1 9E                lda     (DSCPTR),y
00E81A  1  91 97                sta     (FORPNT),y
00E81C  1  60                   rts
00E81D  1               PRSTRING:
00E81D  1  20 BA E8             jsr     STRPRT
00E820  1               L297E:
00E820  1  20 C2 00             jsr     CHRGOT
00E823  1               ; ----------------------------------------------------------------------------
00E823  1               ; "PRINT" STATEMENT
00E823  1               ; ----------------------------------------------------------------------------
00E823  1               PRINT:
00E823  1  F0 3B                beq     CRDO
00E825  1               PRINT2:
00E825  1  F0 57                beq     L29DD
00E827  1  C9 9C                cmp     #TOKEN_TAB
00E829  1  F0 6B                beq     L29F5
00E82B  1  C9 9F                cmp     #TOKEN_SPC
00E82D  1  F0 67                beq     L29F5
00E82F  1  C9 2C                cmp     #','
00E831  1  F0 4C                beq     L29DE
00E833  1  C9 3B                cmp     #$3B
00E835  1  F0 7A                beq     L2A0D
00E837  1  20 B5 EA             jsr     FRMEVL
00E83A  1  24 5F                bit     VALTYP
00E83C  1  30 DF                bmi     PRSTRING
00E83E  1  20 62 F9             jsr     FOUT
00E841  1  20 A2 F0             jsr     STRLIT
00E844  1  A0 00                ldy     #$00
00E846  1  B1 AE                lda     (FAC_LAST-1),y
00E848  1  18                   clc
00E849  1  65 0E                adc     POSX
00E84B  1  C5 0F                cmp     Z17
00E84D  1  90 03                bcc     L29B1
00E84F  1  20 60 E8             jsr     CRDO
00E852  1               L29B1:
00E852  1  20 BA E8             jsr     STRPRT
00E855  1  20 D4 E8             jsr     OUTSP
00E858  1  D0 C6                bne     L297E ; branch always
00E85A  1               L29B9:
00E85A  1  A0 00                ldy     #$00
00E85C  1  94 13                sty     INPUTBUFFER,x
00E85E  1  A2 12                ldx     #LINNUM+1
00E860  1               CRDO:
00E860  1  A9 0D                lda     #CRLF_1
00E862  1  85 0E                sta     POSX
00E864  1  20 D9 E8             jsr     OUTDO
00E867  1  A9 0A                lda     #CRLF_2
00E869  1  20 D9 E8             jsr     OUTDO
00E86C  1               PRINTNULLS:
00E86C  1  8A                   txa
00E86D  1  48                   pha
00E86E  1  A6 0D                ldx     Z15
00E870  1  F0 08                beq     L29D9
00E872  1  A9 00                lda     #$00
00E874  1               L29D3:
00E874  1  20 D9 E8             jsr     OUTDO
00E877  1  CA                   dex
00E878  1  D0 FA                bne     L29D3
00E87A  1               L29D9:
00E87A  1  86 0E                stx     POSX
00E87C  1  68                   pla
00E87D  1  AA                   tax
00E87E  1               L29DD:
00E87E  1  60                   rts
00E87F  1               L29DE:
00E87F  1  A5 0E                lda     POSX
00E881  1  C5 10                cmp     Z18
00E883  1  90 06                bcc     L29EA
00E885  1  20 60 E8             jsr     CRDO
00E888  1  4C B1 E8             jmp     L2A0D
00E88B  1               L29EA:
00E88B  1  38                   sec
00E88C  1               L29EB:
00E88C  1  E9 0E                sbc     #$0E
00E88E  1  B0 FC                bcs     L29EB
00E890  1  49 FF                eor     #$FF
00E892  1  69 01                adc     #$01
00E894  1  D0 14                bne     L2A08
00E896  1               L29F5:
00E896  1  48                   pha
00E897  1  20 9F F3             jsr     GTBYTC
00E89A  1  C9 29                cmp     #')'
00E89C  1  D0 66                bne     SYNERR4
00E89E  1  68                   pla
00E89F  1  C9 9C                cmp     #TOKEN_TAB
00E8A1  1  D0 08                bne     L2A0A
00E8A3  1  8A                   txa
00E8A4  1  E5 0E                sbc     POSX
00E8A6  1  90 09                bcc     L2A0D
00E8A8  1  F0 07                beq     L2A0D
00E8AA  1               L2A08:
00E8AA  1  AA                   tax
00E8AB  1               L2A0A:
00E8AB  1  20 D4 E8             jsr     OUTSP
00E8AE  1  CA                   dex
00E8AF  1  D0 FA                bne     L2A0A
00E8B1  1               L2A0D:
00E8B1  1  20 BC 00             jsr     CHRGET
00E8B4  1  4C 25 E8             jmp     PRINT2
00E8B7  1               ; ----------------------------------------------------------------------------
00E8B7  1               ; PRINT STRING AT (Y,A)
00E8B7  1               ; ----------------------------------------------------------------------------
00E8B7  1               STROUT:
00E8B7  1  20 A2 F0             jsr     STRLIT
00E8BA  1               ; ----------------------------------------------------------------------------
00E8BA  1               ; PRINT STRING AT (FACMO,FACLO)
00E8BA  1               ; ----------------------------------------------------------------------------
00E8BA  1               STRPRT:
00E8BA  1  20 AA F2             jsr     FREFAC
00E8BD  1  AA                   tax
00E8BE  1  A0 00                ldy     #$00
00E8C0  1  E8                   inx
00E8C1  1               L2A22:
00E8C1  1  CA                   dex
00E8C2  1  F0 BA                beq     L29DD
00E8C4  1  B1 71                lda     (INDEX),y
00E8C6  1  20 D9 E8             jsr     OUTDO
00E8C9  1  C8                   iny
00E8CA  1  C9 0D                cmp     #$0D
00E8CC  1  D0 F3                bne     L2A22
00E8CE  1  20 6C E8             jsr     PRINTNULLS
00E8D1  1  4C C1 E8             jmp     L2A22
00E8D4  1               ; ----------------------------------------------------------------------------
00E8D4  1               OUTSP:
00E8D4  1  A9 20                lda     #$20
00E8D6  1  2C                   .byte   $2C
00E8D7  1               OUTQUES:
00E8D7  1  A9 3F                lda     #$3F
00E8D9  1               ; ----------------------------------------------------------------------------
00E8D9  1               ; PRINT CHAR FROM (A)
00E8D9  1               ; ----------------------------------------------------------------------------
00E8D9  1               OUTDO:
00E8D9  1  24 64                bit     Z14
00E8DB  1  30 18                bmi     L2A56
00E8DD  1               ; Commodore forgot to remove this in CBM1
00E8DD  1  48                   pha
00E8DE  1  C9 20                cmp     #$20
00E8E0  1  90 0B                bcc     L2A4E
00E8E2  1  A5 0E                lda     POSX
00E8E4  1  C5 0F                cmp     Z17
00E8E6  1  D0 03                bne     L2A4C
00E8E8  1  20 60 E8             jsr     CRDO
00E8EB  1               L2A4C:
00E8EB  1  E6 0E                inc     POSX
00E8ED  1               L2A4E:
00E8ED  1               ; Commodore forgot to remove this in CBM1
00E8ED  1  68                   pla
00E8EE  1  20 2A FF             jsr     MONCOUT
00E8F1  1  EA                   nop
00E8F2  1  EA                   nop
00E8F3  1  EA                   nop
00E8F4  1  EA                   nop
00E8F5  1               L2A56:
00E8F5  1  29 FF                and     #$FF
00E8F7  1  60                   rts
00E8F8  1               ; ----------------------------------------------------------------------------
00E8F8  1               ; ???
00E8F8  1               ; ----------------------------------------------------------------------------
00E8F8  1               ; ----------------------------------------------------------------------------
00E8F8  1               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00E8F8  1               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00E8F8  1               ; BETWEEN INPUT, READ, AND GET
00E8F8  1               ; ----------------------------------------------------------------------------
00E8F8  1               INPUTERR:
00E8F8  1  A5 62                lda     INPUTFLG
00E8FA  1  F0 0B                beq     RESPERR	; INPUT
00E8FC  1               ; without this, it treats GET errors
00E8FC  1               ; like READ errors
00E8FC  1  A5 8D                lda     Z8C
00E8FE  1  A4 8E                ldy     Z8C+1
00E900  1  85 87                sta     CURLIN
00E902  1  84 88                sty     CURLIN+1
00E904  1               SYNERR4:
00E904  1  4C 00 EC             jmp     SYNERR
00E907  1               RESPERR:
00E907  1  A9 21                lda     #<ERRREENTRY
00E909  1  A0 EA                ldy     #>ERRREENTRY
00E90B  1  20 B7 E8             jsr     STROUT
00E90E  1  A5 8B                lda     OLDTEXT
00E910  1  A4 8C                ldy     OLDTEXT+1
00E912  1  85 C3                sta     TXTPTR
00E914  1  84 C4                sty     TXTPTR+1
00E916  1  60                   rts
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               ; "GET" STATEMENT
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               GET:
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               ; "INPUT#" STATEMENT
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               ; "INPUT" STATEMENT
00E917  1               ; ----------------------------------------------------------------------------
00E917  1               INPUT:
00E917  1  46 64                lsr     Z14
00E919  1  C9 22                cmp     #$22
00E91B  1  D0 0B                bne     L2A9E
00E91D  1  20 B5 EB             jsr     STRTXT
00E920  1  A9 3B                lda     #$3B
00E922  1  20 F7 EB             jsr     SYNCHR
00E925  1  20 BA E8             jsr     STRPRT
00E928  1               L2A9E:
00E928  1  20 C8 EF             jsr     ERRDIR
00E92B  1  A9 2C                lda     #$2C
00E92D  1  85 12                sta     INPUTBUFFER-1
00E92F  1  20 3A E9             jsr     NXIN
00E932  1  A5 13                lda     INPUTBUFFER
00E934  1  D0 12                bne     L2ABE
00E936  1  18                   clc
00E937  1  4C 3B E6             jmp     CONTROL_C_TYPED
00E93A  1               NXIN:
00E93A  1  20 D7 E8             jsr     OUTQUES	; '?'
00E93D  1  20 D4 E8             jsr     OUTSP
00E940  1  4C 57 E3             jmp     INLIN
00E943  1               ; ----------------------------------------------------------------------------
00E943  1               ; "GETC" STATEMENT
00E943  1               ; ----------------------------------------------------------------------------
00E943  1               ; ----------------------------------------------------------------------------
00E943  1               ; "READ" STATEMENT
00E943  1               ; ----------------------------------------------------------------------------
00E943  1               READ:
00E943  1  A6 8F                ldx     DATPTR
00E945  1  A4 90                ldy     DATPTR+1
00E947  1               ; AppleSoft II, too
00E947  1  A9                   .byte   $A9	; LDA #$98
00E948  1               L2ABE:
00E948  1  98                   tya
00E949  1               ; ----------------------------------------------------------------------------
00E949  1               ; PROCESS INPUT LIST
00E949  1               ;
00E949  1               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00E949  1               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00E949  1               ; 				$40 FOR GET
00E949  1               ;				$98 FOR READ
00E949  1               ; ----------------------------------------------------------------------------
00E949  1  85 62                sta     INPUTFLG
00E94B  1  86 91                stx     INPTR
00E94D  1  84 92                sty     INPTR+1
00E94F  1               PROCESS_INPUT_ITEM:
00E94F  1  20 FF EC             jsr     PTRGET
00E952  1  85 97                sta     FORPNT
00E954  1  84 98                sty     FORPNT+1
00E956  1  A5 C3                lda     TXTPTR
00E958  1  A4 C4                ldy     TXTPTR+1
00E95A  1  85 11                sta     TXPSV
00E95C  1  84 12                sty     TXPSV+1
00E95E  1  A6 91                ldx     INPTR
00E960  1  A4 92                ldy     INPTR+1
00E962  1  86 C3                stx     TXTPTR
00E964  1  84 C4                sty     TXTPTR+1
00E966  1  20 C2 00             jsr     CHRGOT
00E969  1  D0 0E                bne     INSTART
00E96B  1  24 62                bit     INPUTFLG
00E96D  1               ; BUG: The beq/bne L2AF8 below is supposed
00E96D  1               ; to be always taken. For this to happen,
00E96D  1               ; the last load must be a 0 for beq
00E96D  1               ; and != 0 for bne. The original Microsoft
00E96D  1               ; code had ldx/ldy/bne here, which was only
00E96D  1               ; correct for a non-ZP INPUTBUFFER. Commodore
00E96D  1               ; fixed it in CBMBASIC V1 by swapping the
00E96D  1               ; ldx and the ldy. It was broken on KIM,
00E96D  1               ; but okay on APPLE and CBM2, because
00E96D  1               ; these used a non-ZP INPUTBUFFER.
00E96D  1               ; Microsoft fixed this somewhere after KIM
00E96D  1               ; and before MICROTAN, by using beq instead
00E96D  1               ; of bne in the ZP case.
00E96D  1  30 62                bmi     FINDATA
00E96F  1  20 D7 E8             jsr     OUTQUES
00E972  1  20 3A E9             jsr     NXIN
00E975  1  86 C3                stx     TXTPTR
00E977  1  84 C4                sty     TXTPTR+1
00E979  1               ; ----------------------------------------------------------------------------
00E979  1               INSTART:
00E979  1  20 BC 00             jsr     CHRGET
00E97C  1  24 5F                bit     VALTYP
00E97E  1  10 24                bpl     L2B34
00E980  1  85 5B                sta     CHARAC
00E982  1  C9 22                cmp     #$22
00E984  1  F0 07                beq     L2B1D
00E986  1  A9 3A                lda     #$3A
00E988  1  85 5B                sta     CHARAC
00E98A  1  A9 2C                lda     #$2C
00E98C  1  18                   clc
00E98D  1               L2B1D:
00E98D  1  85 5C                sta     ENDCHR
00E98F  1  A5 C3                lda     TXTPTR
00E991  1  A4 C4                ldy     TXTPTR+1
00E993  1  69 00                adc     #$00
00E995  1  90 01                bcc     L2B28
00E997  1  C8                   iny
00E998  1               L2B28:
00E998  1  20 A8 F0             jsr     STRLT2
00E99B  1  20 E7 F3             jsr     POINT
00E99E  1  20 C9 E7             jsr     LETSTRING
00E9A1  1  4C AA E9             jmp     INPUT_MORE
00E9A4  1               ; ----------------------------------------------------------------------------
00E9A4  1               L2B34:
00E9A4  1  20 7B F8             jsr     FIN
00E9A7  1  20 68 F7             jsr     SETFOR
00E9AA  1               ; ----------------------------------------------------------------------------
00E9AA  1               INPUT_MORE:
00E9AA  1  20 C2 00             jsr     CHRGOT
00E9AD  1  F0 07                beq     L2B48
00E9AF  1  C9 2C                cmp     #$2C
00E9B1  1  F0 03                beq     L2B48
00E9B3  1  4C F8 E8             jmp     INPUTERR
00E9B6  1               L2B48:
00E9B6  1  A5 C3                lda     TXTPTR
00E9B8  1  A4 C4                ldy     TXTPTR+1
00E9BA  1  85 91                sta     INPTR
00E9BC  1  84 92                sty     INPTR+1
00E9BE  1  A5 11                lda     TXPSV
00E9C0  1  A4 12                ldy     TXPSV+1
00E9C2  1  85 C3                sta     TXTPTR
00E9C4  1  84 C4                sty     TXTPTR+1
00E9C6  1  20 C2 00             jsr     CHRGOT
00E9C9  1  F0 2C                beq     INPDONE
00E9CB  1  20 F5 EB             jsr     CHKCOM
00E9CE  1  4C 4F E9             jmp     PROCESS_INPUT_ITEM
00E9D1  1               ; ----------------------------------------------------------------------------
00E9D1  1               FINDATA:
00E9D1  1  20 0E E7             jsr     DATAN
00E9D4  1  C8                   iny
00E9D5  1  AA                   tax
00E9D6  1  D0 12                bne     L2B7C
00E9D8  1  A2 06                ldx     #ERR_NODATA
00E9DA  1  C8                   iny
00E9DB  1  B1 C3                lda     (TXTPTR),y
00E9DD  1  F0 69                beq     GERR
00E9DF  1  C8                   iny
00E9E0  1  B1 C3                lda     (TXTPTR),y
00E9E2  1  85 8D                sta     Z8C
00E9E4  1  C8                   iny
00E9E5  1  B1 C3                lda     (TXTPTR),y
00E9E7  1  C8                   iny
00E9E8  1  85 8E                sta     Z8C+1
00E9EA  1               L2B7C:
00E9EA  1  B1 C3                lda     (TXTPTR),y
00E9EC  1  AA                   tax
00E9ED  1  20 03 E7             jsr     ADDON
00E9F0  1  E0 83                cpx     #$83
00E9F2  1  D0 DD                bne     FINDATA
00E9F4  1  4C 79 E9             jmp     INSTART
00E9F7  1               ; ---NO MORE INPUT REQUESTED------
00E9F7  1               INPDONE:
00E9F7  1  A5 91                lda     INPTR
00E9F9  1  A4 92                ldy     INPTR+1
00E9FB  1  A6 62                ldx     INPUTFLG
00E9FD  1  F0 03                beq     L2B94 ; INPUT
00E9FF  1  4C 24 E6             jmp     SETDA
00EA02  1               L2B94:
00EA02  1  A0 00                ldy     #$00
00EA04  1  B1 91                lda     (INPTR),y
00EA06  1  F0 07                beq     L2BA1
00EA08  1  A9 10                lda     #<ERREXTRA
00EA0A  1  A0 EA                ldy     #>ERREXTRA
00EA0C  1  4C B7 E8             jmp     STROUT
00EA0F  1               L2BA1:
00EA0F  1  60                   rts
00EA10  1               ; ----------------------------------------------------------------------------
00EA10  1               ERREXTRA:
00EA10  1  3F 45 58 54          .byte   "?EXTRA IGNORED"
00EA14  1  52 41 20 49  
00EA18  1  47 4E 4F 52  
00EA1E  1               
00EA1E  1               
00EA1E  1  0D 0A 00             .byte   $0D,$0A,$00
00EA21  1               ERRREENTRY:
00EA21  1  3F 52 45 44          .byte   "?REDO FROM START"
00EA25  1  4F 20 46 52  
00EA29  1  4F 4D 20 53  
00EA31  1               
00EA31  1               
00EA31  1  0D 0A 00             .byte   $0D,$0A,$00
00EA34  1               ; ----------------------------------------------------------------------------
00EA34  1               ; "NEXT" STATEMENT
00EA34  1               ; ----------------------------------------------------------------------------
00EA34  1               NEXT:
00EA34  1  D0 04                bne     NEXT1
00EA36  1  A0 00                ldy     #$00
00EA38  1  F0 03                beq     NEXT2
00EA3A  1               NEXT1:
00EA3A  1  20 FF EC             jsr     PTRGET
00EA3D  1               NEXT2:
00EA3D  1  85 97                sta     FORPNT
00EA3F  1  84 98                sty     FORPNT+1
00EA41  1  20 A1 E1             jsr     GTFORPNT
00EA44  1  F0 04                beq     NEXT3
00EA46  1  A2 00                ldx     #$00
00EA48  1               GERR:
00EA48  1  F0 68                beq     JERROR
00EA4A  1               NEXT3:
00EA4A  1  9A                   txs
00EA4B  1  E8                   inx
00EA4C  1  E8                   inx
00EA4D  1  E8                   inx
00EA4E  1  E8                   inx
00EA4F  1  8A                   txa
00EA50  1  E8                   inx
00EA51  1  E8                   inx
00EA52  1  E8                   inx
00EA53  1  E8                   inx
00EA54  1  E8                   inx
00EA55  1  86 73                stx     DEST
00EA57  1  A0 01                ldy     #>STACK
00EA59  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00EA5C  1  BA                   tsx
00EA5D  1  BD 08 01             lda     STACK+BYTES_FP+4,x
00EA60  1  85 B0                sta     FACSIGN
00EA62  1  A5 97                lda     FORPNT
00EA64  1  A4 98                ldy     FORPNT+1
00EA66  1  20 60 F4             jsr     FADD
00EA69  1  20 68 F7             jsr     SETFOR
00EA6C  1  A0 01                ldy     #>STACK
00EA6E  1  20 EE F7             jsr     FCOMP2
00EA71  1  BA                   tsx
00EA72  1  38                   sec
00EA73  1  FD 08 01             sbc     STACK+BYTES_FP+4,x
00EA76  1  F0 17                beq     L2C22
00EA78  1  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
00EA7B  1  85 87                sta     CURLIN
00EA7D  1  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00EA80  1  85 88                sta     CURLIN+1
00EA82  1  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00EA85  1  85 C3                sta     TXTPTR
00EA87  1  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
00EA8A  1  85 C4                sta     TXTPTR+1
00EA8C  1               L2C1F:
00EA8C  1  4C C2 E5             jmp     NEWSTT
00EA8F  1               L2C22:
00EA8F  1  8A                   txa
00EA90  1  69 0F                adc     #2*BYTES_FP+7
00EA92  1  AA                   tax
00EA93  1  9A                   txs
00EA94  1  20 C2 00             jsr     CHRGOT
00EA97  1  C9 2C                cmp     #$2C
00EA99  1  D0 F1                bne     L2C1F
00EA9B  1  20 BC 00             jsr     CHRGET
00EA9E  1  20 3A EA             jsr     NEXT1
00EAA1  1               ; ----------------------------------------------------------------------------
00EAA1  1               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00EAA1  1               ; ----------------------------------------------------------------------------
00EAA1  1               FRMNUM:
00EAA1  1  20 B5 EA             jsr     FRMEVL
00EAA4  1               ; ----------------------------------------------------------------------------
00EAA4  1               ; MAKE SURE (FAC) IS NUMERIC
00EAA4  1               ; ----------------------------------------------------------------------------
00EAA4  1               CHKNUM:
00EAA4  1  18                   clc
00EAA5  1  24                   .byte   $24
00EAA6  1               ; ----------------------------------------------------------------------------
00EAA6  1               ; MAKE SURE (FAC) IS STRING
00EAA6  1               ; ----------------------------------------------------------------------------
00EAA6  1               CHKSTR:
00EAA6  1  38                   sec
00EAA7  1               ; ----------------------------------------------------------------------------
00EAA7  1               ; MAKE SURE (FAC) IS CORRECT TYPE
00EAA7  1               ; IF C=0, TYPE MUST BE NUMERIC
00EAA7  1               ; IF C=1, TYPE MUST BE STRING
00EAA7  1               ; ----------------------------------------------------------------------------
00EAA7  1               CHKVAL:
00EAA7  1  24 5F                bit     VALTYP
00EAA9  1  30 03                bmi     L2C41
00EAAB  1  B0 03                bcs     L2C43
00EAAD  1               L2C40:
00EAAD  1  60                   rts
00EAAE  1               L2C41:
00EAAE  1  B0 FD                bcs     L2C40
00EAB0  1               L2C43:
00EAB0  1  A2 18                ldx     #ERR_BADTYPE
00EAB2  1               JERROR:
00EAB2  1  4C 4E E2             jmp     ERROR
00EAB5  1               ; ----------------------------------------------------------------------------
00EAB5  1               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00EAB5  1               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00EAB5  1               ; EXPRESSIONS.
00EAB5  1               ; ----------------------------------------------------------------------------
00EAB5  1               FRMEVL:
00EAB5  1  A6 C3                ldx     TXTPTR
00EAB7  1  D0 02                bne     L2C4E
00EAB9  1  C6 C4                dec     TXTPTR+1
00EABB  1               L2C4E:
00EABB  1  C6 C3                dec     TXTPTR
00EABD  1  A2 00                ldx     #$00
00EABF  1  24                   .byte   $24
00EAC0  1               FRMEVL1:
00EAC0  1  48                   pha
00EAC1  1  8A                   txa
00EAC2  1  48                   pha
00EAC3  1  A9 01                lda     #$01
00EAC5  1  20 12 E2             jsr     CHKMEM
00EAC8  1  20 94 EB             jsr     FRM_ELEMENT
00EACB  1  A9 00                lda     #$00
00EACD  1  85 9B                sta     CPRTYP
00EACF  1               FRMEVL2:
00EACF  1  20 C2 00             jsr     CHRGOT
00EAD2  1               L2C65:
00EAD2  1  38                   sec
00EAD3  1  E9 AA                sbc     #TOKEN_GREATER
00EAD5  1  90 17                bcc     L2C81
00EAD7  1  C9 03                cmp     #$03
00EAD9  1  B0 13                bcs     L2C81
00EADB  1  C9 01                cmp     #$01
00EADD  1  2A                   rol     a
00EADE  1  49 01                eor     #$01
00EAE0  1  45 9B                eor     CPRTYP
00EAE2  1  C5 9B                cmp     CPRTYP
00EAE4  1  90 61                bcc     SNTXERR
00EAE6  1  85 9B                sta     CPRTYP
00EAE8  1  20 BC 00             jsr     CHRGET
00EAEB  1  4C D2 EA             jmp     L2C65
00EAEE  1               L2C81:
00EAEE  1  A6 9B                ldx     CPRTYP
00EAF0  1  D0 2C                bne     FRM_RELATIONAL
00EAF2  1  B0 78                bcs     L2D02
00EAF4  1  69 07                adc     #$07
00EAF6  1  90 74                bcc     L2D02
00EAF8  1  65 5F                adc     VALTYP
00EAFA  1  D0 03                bne     L2C92
00EAFC  1  4C 41 F2             jmp     CAT
00EAFF  1               L2C92:
00EAFF  1  69 FF                adc     #$FF
00EB01  1  85 71                sta     INDEX
00EB03  1  0A                   asl     a
00EB04  1  65 71                adc     INDEX
00EB06  1  A8                   tay
00EB07  1               FRM_PRECEDENCE_TEST:
00EB07  1  68                   pla
00EB08  1  D9 66 E0             cmp     MATHTBL,y
00EB0B  1  B0 64                bcs     FRM_PERFORM1
00EB0D  1  20 A4 EA             jsr     CHKNUM
00EB10  1               L2CA3:
00EB10  1  48                   pha
00EB11  1               L2CA4:
00EB11  1  20 37 EB             jsr     FRM_RECURSE
00EB14  1  68                   pla
00EB15  1  A4 99                ldy     LASTOP
00EB17  1  10 17                bpl     PREFNC
00EB19  1  AA                   tax
00EB1A  1  F0 53                beq     GOEX
00EB1C  1  D0 5C                bne     FRM_PERFORM2
00EB1E  1               ; ----------------------------------------------------------------------------
00EB1E  1               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
00EB1E  1               ; ----------------------------------------------------------------------------
00EB1E  1               FRM_RELATIONAL:
00EB1E  1  46 5F                lsr     VALTYP
00EB20  1  8A                   txa
00EB21  1  2A                   rol     a
00EB22  1  A6 C3                ldx     TXTPTR
00EB24  1  D0 02                bne     L2CBB
00EB26  1  C6 C4                dec     TXTPTR+1
00EB28  1               L2CBB:
00EB28  1  C6 C3                dec     TXTPTR
00EB2A  1  A0 1B                ldy     #$1B
00EB2C  1  85 9B                sta     CPRTYP
00EB2E  1  D0 D7                bne     FRM_PRECEDENCE_TEST
00EB30  1               PREFNC:
00EB30  1  D9 66 E0             cmp     MATHTBL,y
00EB33  1  B0 45                bcs     FRM_PERFORM2
00EB35  1  90 D9                bcc     L2CA3
00EB37  1               ; ----------------------------------------------------------------------------
00EB37  1               ; STACK THIS OPERATION AND CALL FRMEVL FOR
00EB37  1               ; ANOTHER ONE
00EB37  1               ; ----------------------------------------------------------------------------
00EB37  1               FRM_RECURSE:
00EB37  1  B9 68 E0             lda     MATHTBL+2,y
00EB3A  1  48                   pha
00EB3B  1  B9 67 E0             lda     MATHTBL+1,y
00EB3E  1  48                   pha
00EB3F  1  20 4A EB             jsr     FRM_STACK1
00EB42  1  A5 9B                lda     CPRTYP
00EB44  1  4C C0 EA             jmp     FRMEVL1
00EB47  1               SNTXERR:
00EB47  1  4C 00 EC             jmp     SYNERR
00EB4A  1               ; ----------------------------------------------------------------------------
00EB4A  1               ; STACK (FAC)
00EB4A  1               ; THREE ENTRY POINTS:
00EB4A  1               ; 	1, FROM FRMEVL
00EB4A  1               ;	2, FROM "STEP"
00EB4A  1               ;	3, FROM "FOR"
00EB4A  1               ; ----------------------------------------------------------------------------
00EB4A  1               FRM_STACK1:
00EB4A  1  A5 B0                lda     FACSIGN
00EB4C  1  BE 66 E0             ldx     MATHTBL,y
00EB4F  1               ; ----------------------------------------------------------------------------
00EB4F  1               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
00EB4F  1               ; ----------------------------------------------------------------------------
00EB4F  1               FRM_STACK2:
00EB4F  1  A8                   tay
00EB50  1  68                   pla
00EB51  1  85 71                sta     INDEX
00EB53  1  E6 71                inc     INDEX ; bug: assumes not on page boundary
00EB55  1               ; bug exists on AppleSoft II
00EB55  1  68                   pla
00EB56  1  85 72                sta     INDEX+1
00EB58  1  98                   tya
00EB59  1  48                   pha
00EB5A  1               ; ----------------------------------------------------------------------------
00EB5A  1               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
00EB5A  1               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
00EB5A  1               ; ----------------------------------------------------------------------------
00EB5A  1               FRM_STACK3:
00EB5A  1  20 AE F7             jsr     ROUND_FAC
00EB5D  1  A5 AF                lda     FAC+3
00EB5F  1  48                   pha
00EB60  1  A5 AE                lda     FAC+2
00EB62  1  48                   pha
00EB63  1  A5 AD                lda     FAC+1
00EB65  1  48                   pha
00EB66  1  A5 AC                lda     FAC
00EB68  1  48                   pha
00EB69  1  6C 71 00             jmp     (INDEX)
00EB6C  1               L2D02:
00EB6C  1  A0 FF                ldy     #$FF
00EB6E  1  68                   pla
00EB6F  1               GOEX:
00EB6F  1  F0 20                beq     EXIT
00EB71  1               ; ----------------------------------------------------------------------------
00EB71  1               ; PERFORM STACKED OPERATION
00EB71  1               ;
00EB71  1               ; (A) = PRECEDENCE BYTE
00EB71  1               ; STACK:  1 -- CPRMASK
00EB71  1               ;	5 -- (ARG)
00EB71  1               ;	2 -- ADDR OF PERFORMER
00EB71  1               ; ----------------------------------------------------------------------------
00EB71  1               FRM_PERFORM1:
00EB71  1  C9 64                cmp     #$64
00EB73  1  F0 03                beq     L2D0E
00EB75  1  20 A4 EA             jsr     CHKNUM
00EB78  1               L2D0E:
00EB78  1  84 99                sty     LASTOP
00EB7A  1               FRM_PERFORM2:
00EB7A  1  68                   pla
00EB7B  1  4A                   lsr     a
00EB7C  1  85 63                sta     CPRMASK
00EB7E  1  68                   pla
00EB7F  1  85 B3                sta     ARG
00EB81  1  68                   pla
00EB82  1  85 B4                sta     ARG+1
00EB84  1  68                   pla
00EB85  1  85 B5                sta     ARG+2
00EB87  1  68                   pla
00EB88  1  85 B6                sta     ARG+3
00EB8A  1  68                   pla
00EB8B  1  85 B7                sta     ARGSIGN
00EB8D  1  45 B0                eor     FACSIGN
00EB8F  1  85 B8                sta     SGNCPR
00EB91  1               EXIT:
00EB91  1  A5 AC                lda     FAC
00EB93  1  60                   rts
00EB94  1               ; ----------------------------------------------------------------------------
00EB94  1               ; GET ELEMENT IN EXPRESSION
00EB94  1               ;
00EB94  1               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
00EB94  1               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
00EB94  1               ; ----------------------------------------------------------------------------
00EB94  1               FRM_ELEMENT:
00EB94  1  A9 00                lda     #$00
00EB96  1  85 5F                sta     VALTYP
00EB98  1               L2D31:
00EB98  1  20 BC 00             jsr     CHRGET
00EB9B  1  B0 03                bcs     L2D39
00EB9D  1               L2D36:
00EB9D  1  4C 7B F8             jmp     FIN
00EBA0  1               L2D39:
00EBA0  1  20 75 ED             jsr     ISLETC
00EBA3  1  B0 67                bcs     FRM_VARIABLE
00EBA5  1               CON_PI:
00EBA5  1  C9 2E                cmp     #$2E
00EBA7  1  F0 F4                beq     L2D36
00EBA9  1  C9 A4                cmp     #TOKEN_MINUS
00EBAB  1  F0 58                beq     MIN
00EBAD  1  C9 A3                cmp     #TOKEN_PLUS
00EBAF  1  F0 E7                beq     L2D31
00EBB1  1  C9 22                cmp     #$22
00EBB3  1  D0 0F                bne     NOT_
00EBB5  1               ; ----------------------------------------------------------------------------
00EBB5  1               ; STRING CONSTANT ELEMENT
00EBB5  1               ;
00EBB5  1               ; SET Y,A = (TXTPTR)+CARRY
00EBB5  1               ; ----------------------------------------------------------------------------
00EBB5  1               STRTXT:
00EBB5  1  A5 C3                lda     TXTPTR
00EBB7  1  A4 C4                ldy     TXTPTR+1
00EBB9  1  69 00                adc     #$00
00EBBB  1  90 01                bcc     L2D57
00EBBD  1  C8                   iny
00EBBE  1               L2D57:
00EBBE  1  20 A2 F0             jsr     STRLIT
00EBC1  1  4C E7 F3             jmp     POINT
00EBC4  1               ; ----------------------------------------------------------------------------
00EBC4  1               ; "NOT" FUNCTION
00EBC4  1               ; IF FAC=0, RETURN FAC=1
00EBC4  1               ; IF FAC<>0, RETURN FAC=0
00EBC4  1               ; ----------------------------------------------------------------------------
00EBC4  1               NOT_:
00EBC4  1  C9 A1                cmp     #TOKEN_NOT
00EBC6  1  D0 13                bne     L2D74
00EBC8  1  A0 18                ldy     #$18
00EBCA  1  D0 3B                bne     EQUL
00EBCC  1               ; ----------------------------------------------------------------------------
00EBCC  1               ; COMPARISON FOR EQUALITY (= OPERATOR)
00EBCC  1               ; ALSO USED TO EVALUATE "NOT" FUNCTION
00EBCC  1               ; ----------------------------------------------------------------------------
00EBCC  1               EQUOP:
00EBCC  1  20 F9 ED             jsr     AYINT
00EBCF  1  A5 AF                lda     FAC_LAST
00EBD1  1  49 FF                eor     #$FF
00EBD3  1  A8                   tay
00EBD4  1  A5 AE                lda     FAC_LAST-1
00EBD6  1  49 FF                eor     #$FF
00EBD8  1  4C B5 EF             jmp     GIVAYF
00EBDB  1               L2D74:
00EBDB  1  C9 9E                cmp     #TOKEN_FN
00EBDD  1  D0 03                bne     L2D7B
00EBDF  1  4C 12 F0             jmp     L31F3
00EBE2  1               L2D7B:
00EBE2  1  C9 AD                cmp     #TOKEN_SGN
00EBE4  1  90 03                bcc     PARCHK
00EBE6  1  4C 1B EC             jmp     UNARY
00EBE9  1               ; ----------------------------------------------------------------------------
00EBE9  1               ; EVALUATE "(EXPRESSION)"
00EBE9  1               ; ----------------------------------------------------------------------------
00EBE9  1               PARCHK:
00EBE9  1  20 F2 EB             jsr     CHKOPN
00EBEC  1  20 B5 EA             jsr     FRMEVL
00EBEF  1               CHKCLS:
00EBEF  1  A9 29                lda     #$29
00EBF1  1  2C                   .byte   $2C
00EBF2  1               CHKOPN:
00EBF2  1  A9 28                lda     #$28
00EBF4  1  2C                   .byte   $2C
00EBF5  1               CHKCOM:
00EBF5  1  A9 2C                lda     #$2C
00EBF7  1               ; ----------------------------------------------------------------------------
00EBF7  1               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
00EBF7  1               ; ----------------------------------------------------------------------------
00EBF7  1               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
00EBF7  1  A0 00                ldy     #$00
00EBF9  1  D1 C3                cmp     (TXTPTR),y
00EBFB  1  D0 03                bne     SYNERR
00EBFD  1  4C BC 00             jmp     CHRGET
00EC00  1               ; ----------------------------------------------------------------------------
00EC00  1               SYNERR:
00EC00  1  A2 02                ldx     #ERR_SYNTAX
00EC02  1  4C 4E E2             jmp     ERROR
00EC05  1               ; ----------------------------------------------------------------------------
00EC05  1               MIN:
00EC05  1  A0 15                ldy     #$15
00EC07  1               EQUL:
00EC07  1  68                   pla
00EC08  1  68                   pla
00EC09  1  4C 11 EB             jmp     L2CA4
00EC0C  1               ; ----------------------------------------------------------------------------
00EC0C  1               FRM_VARIABLE:
00EC0C  1  20 FF EC             jsr     PTRGET
00EC0F  1               FRM_VARIABLE_CALL	= *-1
00EC0F  1  85 AE                sta     FAC_LAST-1
00EC11  1  84 AF                sty     FAC_LAST
00EC13  1  A6 5F                ldx     VALTYP
00EC15  1  F0 01                beq     L2DB1
00EC17  1               ; bugfix?
00EC17  1               ; fixed on AppleSoft II, not on any CBM
00EC17  1  60                   rts
00EC18  1               L2DB1:
00EC18  1  4C 3F F7             jmp     LOAD_FAC_FROM_YA
00EC1B  1               ; ----------------------------------------------------------------------------
00EC1B  1               UNARY:
00EC1B  1  0A                   asl     a
00EC1C  1  48                   pha
00EC1D  1  AA                   tax
00EC1E  1  20 BC 00             jsr     CHRGET
00EC21  1  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
00EC23  1  90 20                bcc     L2DEF
00EC25  1  20 F2 EB             jsr     CHKOPN
00EC28  1  20 B5 EA             jsr     FRMEVL
00EC2B  1  20 F5 EB             jsr     CHKCOM
00EC2E  1  20 A6 EA             jsr     CHKSTR
00EC31  1  68                   pla
00EC32  1  AA                   tax
00EC33  1  A5 AF                lda     FAC_LAST
00EC35  1  48                   pha
00EC36  1  A5 AE                lda     FAC_LAST-1
00EC38  1  48                   pha
00EC39  1  8A                   txa
00EC3A  1  48                   pha
00EC3B  1  20 A2 F3             jsr     GETBYT
00EC3E  1  68                   pla
00EC3F  1  A8                   tay
00EC40  1  8A                   txa
00EC41  1  48                   pha
00EC42  1  4C 4A EC             jmp     L2DF4
00EC45  1               L2DEF:
00EC45  1  20 E9 EB             jsr     PARCHK
00EC48  1  68                   pla
00EC49  1  A8                   tay
00EC4A  1               L2DF4:
00EC4A  1  B9 DE DF             lda     UNFNC+($80-TOKEN_SGN)*2,y
00EC4D  1  85 A2                sta     JMPADRS+1
00EC4F  1  B9 DF DF             lda     UNFNC+($80-TOKEN_SGN)*2+1,y
00EC52  1  85 A3                sta     JMPADRS+2
00EC54  1  20 A1 00             jsr     JMPADRS
00EC57  1  4C A4 EA             jmp     CHKNUM
00EC5A  1               ; ----------------------------------------------------------------------------
00EC5A  1               OR:
00EC5A  1  A0 FF                ldy     #$FF
00EC5C  1  2C                   .byte   $2C
00EC5D  1               ; ----------------------------------------------------------------------------
00EC5D  1               TAND:
00EC5D  1  A0 00                ldy     #$00
00EC5F  1  84 5D                sty     EOLPNTR
00EC61  1  20 F9 ED             jsr     AYINT
00EC64  1  A5 AE                lda     FAC_LAST-1
00EC66  1  45 5D                eor     EOLPNTR
00EC68  1  85 5B                sta     CHARAC
00EC6A  1  A5 AF                lda     FAC_LAST
00EC6C  1  45 5D                eor     EOLPNTR
00EC6E  1  85 5C                sta     ENDCHR
00EC70  1  20 8F F7             jsr     COPY_ARG_TO_FAC
00EC73  1  20 F9 ED             jsr     AYINT
00EC76  1  A5 AF                lda     FAC_LAST
00EC78  1  45 5D                eor     EOLPNTR
00EC7A  1  25 5C                and     ENDCHR
00EC7C  1  45 5D                eor     EOLPNTR
00EC7E  1  A8                   tay
00EC7F  1  A5 AE                lda     FAC_LAST-1
00EC81  1  45 5D                eor     EOLPNTR
00EC83  1  25 5B                and     CHARAC
00EC85  1  45 5D                eor     EOLPNTR
00EC87  1  4C B5 EF             jmp     GIVAYF
00EC8A  1               ; ----------------------------------------------------------------------------
00EC8A  1               ; PERFORM RELATIONAL OPERATIONS
00EC8A  1               ; ----------------------------------------------------------------------------
00EC8A  1               RELOPS:
00EC8A  1  20 A7 EA             jsr     CHKVAL
00EC8D  1  B0 13                bcs     STRCMP
00EC8F  1  A5 B7                lda     ARGSIGN
00EC91  1  09 7F                ora     #$7F
00EC93  1  25 B4                and     ARG+1
00EC95  1  85 B4                sta     ARG+1
00EC97  1  A9 B3                lda     #<ARG
00EC99  1  A0 00                ldy     #$00
00EC9B  1  20 EC F7             jsr     FCOMP
00EC9E  1  AA                   tax
00EC9F  1  4C D5 EC             jmp     NUMCMP
00ECA2  1               ; ----------------------------------------------------------------------------
00ECA2  1               ; STRING COMPARISON
00ECA2  1               ; ----------------------------------------------------------------------------
00ECA2  1               STRCMP:
00ECA2  1  A9 00                lda     #$00
00ECA4  1  85 5F                sta     VALTYP
00ECA6  1  C6 9B                dec     CPRTYP
00ECA8  1  20 AA F2             jsr     FREFAC
00ECAB  1  85 AC                sta     FAC
00ECAD  1  86 AD                stx     FAC+1
00ECAF  1  84 AE                sty     FAC+2
00ECB1  1  A5 B5                lda     ARG_LAST-1
00ECB3  1  A4 B6                ldy     ARG_LAST
00ECB5  1  20 AE F2             jsr     FRETMP
00ECB8  1  86 B5                stx     ARG_LAST-1
00ECBA  1  84 B6                sty     ARG_LAST
00ECBC  1  AA                   tax
00ECBD  1  38                   sec
00ECBE  1  E5 AC                sbc     FAC
00ECC0  1  F0 08                beq     L2E74
00ECC2  1  A9 01                lda     #$01
00ECC4  1  90 04                bcc     L2E74
00ECC6  1  A6 AC                ldx     FAC
00ECC8  1  A9 FF                lda     #$FF
00ECCA  1               L2E74:
00ECCA  1  85 B0                sta     FACSIGN
00ECCC  1  A0 FF                ldy     #$FF
00ECCE  1  E8                   inx
00ECCF  1               STRCMP1:
00ECCF  1  C8                   iny
00ECD0  1  CA                   dex
00ECD1  1  D0 07                bne     L2E84
00ECD3  1  A6 B0                ldx     FACSIGN
00ECD5  1               NUMCMP:
00ECD5  1  30 0F                bmi     CMPDONE
00ECD7  1  18                   clc
00ECD8  1  90 0C                bcc     CMPDONE
00ECDA  1               L2E84:
00ECDA  1  B1 B5                lda     (ARG_LAST-1),y
00ECDC  1  D1 AD                cmp     (FAC+1),y
00ECDE  1  F0 EF                beq     STRCMP1
00ECE0  1  A2 FF                ldx     #$FF
00ECE2  1  B0 02                bcs     CMPDONE
00ECE4  1  A2 01                ldx     #$01
00ECE6  1               CMPDONE:
00ECE6  1  E8                   inx
00ECE7  1  8A                   txa
00ECE8  1  2A                   rol     a
00ECE9  1  25 63                and     CPRMASK
00ECEB  1  F0 02                beq     L2E99
00ECED  1  A9 FF                lda     #$FF
00ECEF  1               L2E99:
00ECEF  1  4C CF F7             jmp     FLOAT
00ECF2  1               ; ----------------------------------------------------------------------------
00ECF2  1               ; "DIM" STATEMENT
00ECF2  1               ; ----------------------------------------------------------------------------
00ECF2  1               NXDIM:
00ECF2  1  20 F5 EB             jsr     CHKCOM
00ECF5  1               DIM:
00ECF5  1  AA                   tax
00ECF6  1  20 04 ED             jsr     PTRGET2
00ECF9  1  20 C2 00             jsr     CHRGOT
00ECFC  1  D0 F4                bne     NXDIM
00ECFE  1  60                   rts
00ECFF  1               ; ----------------------------------------------------------------------------
00ECFF  1               ; PTRGET -- GENERAL VARIABLE SCAN
00ECFF  1               ;
00ECFF  1               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
00ECFF  1               ; VARTAB AND ARYTAB FOR THE NAME.
00ECFF  1               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
00ECFF  1               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
00ECFF  1               ;
00ECFF  1               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
00ECFF  1               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
00ECFF  1               ;		ELSE = 0
00ECFF  1               ;
00ECFF  1               ;	SUBFLG -- = $00
00ECFF  1               ;		= $40 IF CALLED FROM "GETARYPT"
00ECFF  1               ; ----------------------------------------------------------------------------
00ECFF  1               PTRGET:
00ECFF  1  A2 00                ldx     #$00
00ED01  1  20 C2 00             jsr     CHRGOT
00ED04  1               PTRGET2:
00ED04  1  86 5E                stx     DIMFLG
00ED06  1               PTRGET3:
00ED06  1  85 93                sta     VARNAM
00ED08  1  20 C2 00             jsr     CHRGOT
00ED0B  1  20 75 ED             jsr     ISLETC
00ED0E  1  B0 03                bcs     NAMOK
00ED10  1  4C 00 EC             jmp     SYNERR
00ED13  1               NAMOK:
00ED13  1  A2 00                ldx     #$00
00ED15  1  86 5F                stx     VALTYP
00ED17  1  20 BC 00             jsr     CHRGET
00ED1A  1  90 05                bcc     L2ECD
00ED1C  1  20 75 ED             jsr     ISLETC
00ED1F  1  90 0B                bcc     L2ED8
00ED21  1               L2ECD:
00ED21  1  AA                   tax
00ED22  1               L2ECE:
00ED22  1  20 BC 00             jsr     CHRGET
00ED25  1  90 FB                bcc     L2ECE
00ED27  1  20 75 ED             jsr     ISLETC
00ED2A  1  B0 F6                bcs     L2ECE
00ED2C  1               L2ED8:
00ED2C  1  C9 24                cmp     #$24
00ED2E  1  D0 0B                bne     L2EF9
00ED30  1  A9 FF                lda     #$FF
00ED32  1  85 5F                sta     VALTYP
00ED34  1  8A                   txa
00ED35  1  09 80                ora     #$80
00ED37  1  AA                   tax
00ED38  1  20 BC 00             jsr     CHRGET
00ED3B  1               L2EF9:
00ED3B  1  86 94                stx     VARNAM+1
00ED3D  1  38                   sec
00ED3E  1  05 61                ora     SUBFLG
00ED40  1  E9 28                sbc     #$28
00ED42  1  D0 03                bne     L2F05
00ED44  1  4C 0B EE             jmp     ARRAY
00ED47  1               L2F05:
00ED47  1  A9 00                lda     #$00
00ED49  1  85 61                sta     SUBFLG
00ED4B  1  A5 7B                lda     VARTAB
00ED4D  1  A6 7C                ldx     VARTAB+1
00ED4F  1  A0 00                ldy     #$00
00ED51  1               L2F0F:
00ED51  1  86 AB                stx     LOWTR+1
00ED53  1               L2F11:
00ED53  1  85 AA                sta     LOWTR
00ED55  1  E4 7E                cpx     ARYTAB+1
00ED57  1  D0 04                bne     L2F1B
00ED59  1  C5 7D                cmp     ARYTAB
00ED5B  1  F0 22                beq     NAMENOTFOUND
00ED5D  1               L2F1B:
00ED5D  1  A5 93                lda     VARNAM
00ED5F  1  D1 AA                cmp     (LOWTR),y
00ED61  1  D0 08                bne     L2F29
00ED63  1  A5 94                lda     VARNAM+1
00ED65  1  C8                   iny
00ED66  1  D1 AA                cmp     (LOWTR),y
00ED68  1  F0 61                beq     SET_VARPNT_AND_YA
00ED6A  1  88                   dey
00ED6B  1               L2F29:
00ED6B  1  18                   clc
00ED6C  1  A5 AA                lda     LOWTR
00ED6E  1  69 06                adc     #BYTES_PER_VARIABLE
00ED70  1  90 E1                bcc     L2F11
00ED72  1  E8                   inx
00ED73  1  D0 DC                bne     L2F0F
00ED75  1               ; ----------------------------------------------------------------------------
00ED75  1               ; CHECK IF (A) IS ASCII LETTER A-Z
00ED75  1               ;
00ED75  1               ; RETURN CARRY = 1 IF A-Z
00ED75  1               ;	= 0 IF NOT
00ED75  1               ; ----------------------------------------------------------------------------
00ED75  1               ISLETC:
00ED75  1  C9 41                cmp     #$41
00ED77  1  90 05                bcc     L2F3C
00ED79  1  E9 5B                sbc     #$5B
00ED7B  1  38                   sec
00ED7C  1  E9 A5                sbc     #$A5
00ED7E  1               L2F3C:
00ED7E  1  60                   rts
00ED7F  1               ; ----------------------------------------------------------------------------
00ED7F  1               ; VARIABLE NOT FOUND, SO MAKE ONE
00ED7F  1               ; ----------------------------------------------------------------------------
00ED7F  1               NAMENOTFOUND:
00ED7F  1  68                   pla
00ED80  1  48                   pha
00ED81  1  C9 0E                cmp     #<FRM_VARIABLE_CALL
00ED83  1  D0 07                bne     MAKENEWVARIABLE
00ED85  1  A9 8A                lda     #<C_ZERO
00ED87  1  A0 ED                ldy     #>C_ZERO
00ED89  1  60                   rts
00ED8A  1               ; ----------------------------------------------------------------------------
00ED8A  1               C_ZERO:
00ED8A  1  00 00                .byte   $00,$00
00ED8C  1               ; ----------------------------------------------------------------------------
00ED8C  1               ; MAKE A NEW SIMPLE VARIABLE
00ED8C  1               ;
00ED8C  1               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
00ED8C  1               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
00ED8C  1               ; ----------------------------------------------------------------------------
00ED8C  1               MAKENEWVARIABLE:
00ED8C  1  A5 7D                lda     ARYTAB
00ED8E  1  A4 7E                ldy     ARYTAB+1
00ED90  1  85 AA                sta     LOWTR
00ED92  1  84 AB                sty     LOWTR+1
00ED94  1  A5 7F                lda     STREND
00ED96  1  A4 80                ldy     STREND+1
00ED98  1  85 A6                sta     HIGHTR
00ED9A  1  84 A7                sty     HIGHTR+1
00ED9C  1  18                   clc
00ED9D  1  69 06                adc     #BYTES_PER_VARIABLE
00ED9F  1  90 01                bcc     L2F68
00EDA1  1  C8                   iny
00EDA2  1               L2F68:
00EDA2  1  85 A4                sta     HIGHDS
00EDA4  1  84 A5                sty     HIGHDS+1
00EDA6  1  20 CF E1             jsr     BLTU
00EDA9  1  A5 A4                lda     HIGHDS
00EDAB  1  A4 A5                ldy     HIGHDS+1
00EDAD  1  C8                   iny
00EDAE  1  85 7D                sta     ARYTAB
00EDB0  1  84 7E                sty     ARYTAB+1
00EDB2  1  A0 00                ldy     #$00
00EDB4  1  A5 93                lda     VARNAM
00EDB6  1  91 AA                sta     (LOWTR),y
00EDB8  1  C8                   iny
00EDB9  1  A5 94                lda     VARNAM+1
00EDBB  1  91 AA                sta     (LOWTR),y
00EDBD  1  A9 00                lda     #$00
00EDBF  1  C8                   iny
00EDC0  1  91 AA                sta     (LOWTR),y
00EDC2  1  C8                   iny
00EDC3  1  91 AA                sta     (LOWTR),y
00EDC5  1  C8                   iny
00EDC6  1  91 AA                sta     (LOWTR),y
00EDC8  1  C8                   iny
00EDC9  1  91 AA                sta     (LOWTR),y
00EDCB  1               ; ----------------------------------------------------------------------------
00EDCB  1               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
00EDCB  1               ; ----------------------------------------------------------------------------
00EDCB  1               SET_VARPNT_AND_YA:
00EDCB  1  A5 AA                lda     LOWTR
00EDCD  1  18                   clc
00EDCE  1  69 02                adc     #$02
00EDD0  1  A4 AB                ldy     LOWTR+1
00EDD2  1  90 01                bcc     L2F9E
00EDD4  1  C8                   iny
00EDD5  1               L2F9E:
00EDD5  1  85 95                sta     VARPNT
00EDD7  1  84 96                sty     VARPNT+1
00EDD9  1  60                   rts
00EDDA  1               ; ----------------------------------------------------------------------------
00EDDA  1               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
00EDDA  1               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
00EDDA  1               ; ----------------------------------------------------------------------------
00EDDA  1               GETARY:
00EDDA  1  A5 5D                lda     EOLPNTR
00EDDC  1  0A                   asl     a
00EDDD  1  69 05                adc     #$05
00EDDF  1  65 AA                adc     LOWTR
00EDE1  1  A4 AB                ldy     LOWTR+1
00EDE3  1  90 01                bcc     L2FAF
00EDE5  1  C8                   iny
00EDE6  1               L2FAF:
00EDE6  1  85 A4                sta     HIGHDS
00EDE8  1  84 A5                sty     HIGHDS+1
00EDEA  1  60                   rts
00EDEB  1               ; ----------------------------------------------------------------------------
00EDEB  1               NEG32768:
00EDEB  1  90 80 00 00          .byte   $90,$80,$00,$00
00EDEF  1               ; ----------------------------------------------------------------------------
00EDEF  1               ; EVALUATE NUMERIC FORMULA AT TXTPTR
00EDEF  1               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
00EDEF  1               ; IN FAC+3,4
00EDEF  1               ; ----------------------------------------------------------------------------
00EDEF  1               MAKINT:
00EDEF  1  20 BC 00             jsr     CHRGET
00EDF2  1  20 A1 EA             jsr     FRMNUM
00EDF5  1               ; ----------------------------------------------------------------------------
00EDF5  1               ; CONVERT FAC TO INTEGER
00EDF5  1               ; MUST BE POSITIVE AND LESS THAN 32768
00EDF5  1               ; ----------------------------------------------------------------------------
00EDF5  1               MKINT:
00EDF5  1  A5 B0                lda     FACSIGN
00EDF7  1  30 0D                bmi     MI1
00EDF9  1               ; ----------------------------------------------------------------------------
00EDF9  1               ; CONVERT FAC TO INTEGER
00EDF9  1               ; MUST BE -32767 <= FAC <= 32767
00EDF9  1               ; ----------------------------------------------------------------------------
00EDF9  1               AYINT:
00EDF9  1  A5 AC                lda     FAC
00EDFB  1  C9 90                cmp     #$90
00EDFD  1  90 09                bcc     MI2
00EDFF  1  A9 EB                lda     #<NEG32768
00EE01  1  A0 ED                ldy     #>NEG32768
00EE03  1  20 EC F7             jsr     FCOMP
00EE06  1               MI1:
00EE06  1  D0 74                bne     IQERR
00EE08  1               MI2:
00EE08  1  4C 25 F8             jmp     QINT
00EE0B  1               ; ----------------------------------------------------------------------------
00EE0B  1               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
00EE0B  1               ; ----------------------------------------------------------------------------
00EE0B  1               ARRAY:
00EE0B  1  A5 5E                lda     DIMFLG
00EE0D  1  48                   pha
00EE0E  1  A5 5F                lda     VALTYP
00EE10  1  48                   pha
00EE11  1  A0 00                ldy     #$00
00EE13  1               L2FDE:
00EE13  1  98                   tya
00EE14  1  48                   pha
00EE15  1  A5 94                lda     VARNAM+1
00EE17  1  48                   pha
00EE18  1  A5 93                lda     VARNAM
00EE1A  1  48                   pha
00EE1B  1  20 EF ED             jsr     MAKINT
00EE1E  1  68                   pla
00EE1F  1  85 93                sta     VARNAM
00EE21  1  68                   pla
00EE22  1  85 94                sta     VARNAM+1
00EE24  1  68                   pla
00EE25  1  A8                   tay
00EE26  1  BA                   tsx
00EE27  1  BD 02 01             lda     STACK+2,x
00EE2A  1  48                   pha
00EE2B  1  BD 01 01             lda     STACK+1,x
00EE2E  1  48                   pha
00EE2F  1  A5 AE                lda     FAC_LAST-1
00EE31  1  9D 02 01             sta     STACK+2,x
00EE34  1  A5 AF                lda     FAC_LAST
00EE36  1  9D 01 01             sta     STACK+1,x
00EE39  1  C8                   iny
00EE3A  1  20 C2 00             jsr     CHRGOT
00EE3D  1  C9 2C                cmp     #$2C
00EE3F  1  F0 D2                beq     L2FDE
00EE41  1  84 5D                sty     EOLPNTR
00EE43  1  20 EF EB             jsr     CHKCLS
00EE46  1  68                   pla
00EE47  1  85 5F                sta     VALTYP
00EE49  1  68                   pla
00EE4A  1  85 5E                sta     DIMFLG
00EE4C  1               ; ----------------------------------------------------------------------------
00EE4C  1               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
00EE4C  1               ; ----------------------------------------------------------------------------
00EE4C  1  A6 7D                ldx     ARYTAB
00EE4E  1  A5 7E                lda     ARYTAB+1
00EE50  1               L301F:
00EE50  1  86 AA                stx     LOWTR
00EE52  1  85 AB                sta     LOWTR+1
00EE54  1  C5 80                cmp     STREND+1
00EE56  1  D0 04                bne     L302B
00EE58  1  E4 7F                cpx     STREND
00EE5A  1  F0 39                beq     MAKE_NEW_ARRAY
00EE5C  1               L302B:
00EE5C  1  A0 00                ldy     #$00
00EE5E  1  B1 AA                lda     (LOWTR),y
00EE60  1  C8                   iny
00EE61  1  C5 93                cmp     VARNAM
00EE63  1  D0 06                bne     L303A
00EE65  1  A5 94                lda     VARNAM+1
00EE67  1  D1 AA                cmp     (LOWTR),y
00EE69  1  F0 16                beq     USE_OLD_ARRAY
00EE6B  1               L303A:
00EE6B  1  C8                   iny
00EE6C  1  B1 AA                lda     (LOWTR),y
00EE6E  1  18                   clc
00EE6F  1  65 AA                adc     LOWTR
00EE71  1  AA                   tax
00EE72  1  C8                   iny
00EE73  1  B1 AA                lda     (LOWTR),y
00EE75  1  65 AB                adc     LOWTR+1
00EE77  1  90 D7                bcc     L301F
00EE79  1               ; ----------------------------------------------------------------------------
00EE79  1               ; ERROR:  BAD SUBSCRIPTS
00EE79  1               ; ----------------------------------------------------------------------------
00EE79  1               SUBERR:
00EE79  1  A2 10                ldx     #ERR_BADSUBS
00EE7B  1  2C                   .byte   $2C
00EE7C  1               ; ----------------------------------------------------------------------------
00EE7C  1               ; ERROR:  ILLEGAL QUANTITY
00EE7C  1               ; ----------------------------------------------------------------------------
00EE7C  1               IQERR:
00EE7C  1  A2 08                ldx     #ERR_ILLQTY
00EE7E  1               JER:
00EE7E  1  4C 4E E2             jmp     ERROR
00EE81  1               ; ----------------------------------------------------------------------------
00EE81  1               ; FOUND THE ARRAY
00EE81  1               ; ----------------------------------------------------------------------------
00EE81  1               USE_OLD_ARRAY:
00EE81  1  A2 12                ldx     #ERR_REDIMD
00EE83  1  A5 5E                lda     DIMFLG
00EE85  1  D0 F7                bne     JER
00EE87  1  20 DA ED             jsr     GETARY
00EE8A  1  A5 5D                lda     EOLPNTR
00EE8C  1  A0 04                ldy     #$04
00EE8E  1  D1 AA                cmp     (LOWTR),y
00EE90  1  D0 E7                bne     SUBERR
00EE92  1  4C 18 EF             jmp     FIND_ARRAY_ELEMENT
00EE95  1               ; ----------------------------------------------------------------------------
00EE95  1               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
00EE95  1               ; ----------------------------------------------------------------------------
00EE95  1               MAKE_NEW_ARRAY:
00EE95  1  20 DA ED             jsr     GETARY
00EE98  1  20 1F E2             jsr     REASON
00EE9B  1  A9 00                lda     #$00
00EE9D  1  A8                   tay
00EE9E  1  85 BB                sta     STRNG2+1
00EEA0  1  A2 04                ldx     #BYTES_PER_ELEMENT
00EEA2  1  86 BA                stx     STRNG2
00EEA4  1  A5 93                lda     VARNAM
00EEA6  1  91 AA                sta     (LOWTR),y
00EEA8  1  C8                   iny
00EEA9  1  A5 94                lda     VARNAM+1
00EEAB  1  91 AA                sta     (LOWTR),y
00EEAD  1  A5 5D                lda     EOLPNTR
00EEAF  1  C8                   iny
00EEB0  1  C8                   iny
00EEB1  1  C8                   iny
00EEB2  1  91 AA                sta     (LOWTR),y
00EEB4  1               L308A:
00EEB4  1  A2 0B                ldx     #$0B
00EEB6  1  A9 00                lda     #$00
00EEB8  1  24 5E                bit     DIMFLG
00EEBA  1  50 08                bvc     L309A
00EEBC  1  68                   pla
00EEBD  1  18                   clc
00EEBE  1  69 01                adc     #$01
00EEC0  1  AA                   tax
00EEC1  1  68                   pla
00EEC2  1  69 00                adc     #$00
00EEC4  1               L309A:
00EEC4  1  C8                   iny
00EEC5  1  91 AA                sta     (LOWTR),y
00EEC7  1  C8                   iny
00EEC8  1  8A                   txa
00EEC9  1  91 AA                sta     (LOWTR),y
00EECB  1  20 70 EF             jsr     MULTIPLY_SUBSCRIPT
00EECE  1  86 BA                stx     STRNG2
00EED0  1  85 BB                sta     STRNG2+1
00EED2  1  A4 71                ldy     INDEX
00EED4  1  C6 5D                dec     EOLPNTR
00EED6  1  D0 DC                bne     L308A
00EED8  1  65 A5                adc     HIGHDS+1
00EEDA  1  B0 5D                bcs     GME
00EEDC  1  85 A5                sta     HIGHDS+1
00EEDE  1  A8                   tay
00EEDF  1  8A                   txa
00EEE0  1  65 A4                adc     HIGHDS
00EEE2  1  90 03                bcc     L30BD
00EEE4  1  C8                   iny
00EEE5  1  F0 52                beq     GME
00EEE7  1               L30BD:
00EEE7  1  20 1F E2             jsr     REASON
00EEEA  1  85 7F                sta     STREND
00EEEC  1  84 80                sty     STREND+1
00EEEE  1  A9 00                lda     #$00
00EEF0  1  E6 BB                inc     STRNG2+1
00EEF2  1  A4 BA                ldy     STRNG2
00EEF4  1  F0 05                beq     L30D1
00EEF6  1               L30CC:
00EEF6  1  88                   dey
00EEF7  1  91 A4                sta     (HIGHDS),y
00EEF9  1  D0 FB                bne     L30CC
00EEFB  1               L30D1:
00EEFB  1  C6 A5                dec     HIGHDS+1
00EEFD  1  C6 BB                dec     STRNG2+1
00EEFF  1  D0 F5                bne     L30CC
00EF01  1  E6 A5                inc     HIGHDS+1
00EF03  1  38                   sec
00EF04  1  A5 7F                lda     STREND
00EF06  1  E5 AA                sbc     LOWTR
00EF08  1  A0 02                ldy     #$02
00EF0A  1  91 AA                sta     (LOWTR),y
00EF0C  1  A5 80                lda     STREND+1
00EF0E  1  C8                   iny
00EF0F  1  E5 AB                sbc     LOWTR+1
00EF11  1  91 AA                sta     (LOWTR),y
00EF13  1  A5 5E                lda     DIMFLG
00EF15  1  D0 58                bne     RTS9
00EF17  1  C8                   iny
00EF18  1               ; ----------------------------------------------------------------------------
00EF18  1               ; FIND SPECIFIED ARRAY ELEMENT
00EF18  1               ;
00EF18  1               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
00EF18  1               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
00EF18  1               ; ----------------------------------------------------------------------------
00EF18  1               FIND_ARRAY_ELEMENT:
00EF18  1  B1 AA                lda     (LOWTR),y
00EF1A  1  85 5D                sta     EOLPNTR
00EF1C  1  A9 00                lda     #$00
00EF1E  1  85 BA                sta     STRNG2
00EF20  1               L30F6:
00EF20  1  85 BB                sta     STRNG2+1
00EF22  1  C8                   iny
00EF23  1  68                   pla
00EF24  1  AA                   tax
00EF25  1  85 AE                sta     FAC_LAST-1
00EF27  1  68                   pla
00EF28  1  85 AF                sta     FAC_LAST
00EF2A  1  D1 AA                cmp     (LOWTR),y
00EF2C  1  90 0E                bcc     FAE2
00EF2E  1  D0 06                bne     GSE
00EF30  1  C8                   iny
00EF31  1  8A                   txa
00EF32  1  D1 AA                cmp     (LOWTR),y
00EF34  1  90 07                bcc     FAE3
00EF36  1               ; ----------------------------------------------------------------------------
00EF36  1               GSE:
00EF36  1  4C 79 EE             jmp     SUBERR
00EF39  1               GME:
00EF39  1  4C 4C E2             jmp     MEMERR
00EF3C  1               ; ----------------------------------------------------------------------------
00EF3C  1               FAE2:
00EF3C  1  C8                   iny
00EF3D  1               FAE3:
00EF3D  1  A5 BB                lda     STRNG2+1
00EF3F  1  05 BA                ora     STRNG2
00EF41  1  18                   clc
00EF42  1  F0 0A                beq     L3124
00EF44  1  20 70 EF             jsr     MULTIPLY_SUBSCRIPT
00EF47  1  8A                   txa
00EF48  1  65 AE                adc     FAC_LAST-1
00EF4A  1  AA                   tax
00EF4B  1  98                   tya
00EF4C  1  A4 71                ldy     INDEX
00EF4E  1               L3124:
00EF4E  1  65 AF                adc     FAC_LAST
00EF50  1  86 BA                stx     STRNG2
00EF52  1  C6 5D                dec     EOLPNTR
00EF54  1  D0 CA                bne     L30F6
00EF56  1  06 BA                asl     STRNG2
00EF58  1  2A                   rol     a
00EF59  1  B0 DB                bcs     GSE
00EF5B  1  06 BA                asl     STRNG2
00EF5D  1  2A                   rol     a
00EF5E  1  B0 D6                bcs     GSE
00EF60  1  A8                   tay
00EF61  1  A5 BA                lda     STRNG2
00EF63  1  65 A4                adc     HIGHDS
00EF65  1  85 95                sta     VARPNT
00EF67  1  98                   tya
00EF68  1  65 A5                adc     HIGHDS+1
00EF6A  1  85 96                sta     VARPNT+1
00EF6C  1  A8                   tay
00EF6D  1  A5 95                lda     VARPNT
00EF6F  1               RTS9:
00EF6F  1  60                   rts
00EF70  1               ; ----------------------------------------------------------------------------
00EF70  1               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
00EF70  1               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
00EF70  1               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
00EF70  1               ; ----------------------------------------------------------------------------
00EF70  1               MULTIPLY_SUBSCRIPT:
00EF70  1  84 71                sty     INDEX
00EF72  1  B1 AA                lda     (LOWTR),y
00EF74  1  85 76                sta     RESULT_LAST-2
00EF76  1  88                   dey
00EF77  1  B1 AA                lda     (LOWTR),y
00EF79  1  85 77                sta     RESULT_LAST-1
00EF7B  1  A9 10                lda     #$10
00EF7D  1  85 A8                sta     INDX
00EF7F  1  A2 00                ldx     #$00
00EF81  1  A0 00                ldy     #$00
00EF83  1               L3163:
00EF83  1  8A                   txa
00EF84  1  0A                   asl     a
00EF85  1  AA                   tax
00EF86  1  98                   tya
00EF87  1  2A                   rol     a
00EF88  1  A8                   tay
00EF89  1  B0 AE                bcs     GME
00EF8B  1  06 BA                asl     STRNG2
00EF8D  1  26 BB                rol     STRNG2+1
00EF8F  1  90 0B                bcc     L317C
00EF91  1  18                   clc
00EF92  1  8A                   txa
00EF93  1  65 76                adc     RESULT_LAST-2
00EF95  1  AA                   tax
00EF96  1  98                   tya
00EF97  1  65 77                adc     RESULT_LAST-1
00EF99  1  A8                   tay
00EF9A  1  B0 9D                bcs     GME
00EF9C  1               L317C:
00EF9C  1  C6 A8                dec     INDX
00EF9E  1  D0 E3                bne     L3163
00EFA0  1  60                   rts
00EFA1  1               ; ----------------------------------------------------------------------------
00EFA1  1               ; "FRE" FUNCTION
00EFA1  1               ;
00EFA1  1               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
00EFA1  1               ; ----------------------------------------------------------------------------
00EFA1  1               FRE:
00EFA1  1  A5 5F                lda     VALTYP
00EFA3  1  F0 03                beq     L3188
00EFA5  1  20 AA F2             jsr     FREFAC
00EFA8  1               L3188:
00EFA8  1  20 3B F1             jsr     GARBAG
00EFAB  1  38                   sec
00EFAC  1  A5 81                lda     FRETOP
00EFAE  1  E5 7F                sbc     STREND
00EFB0  1  A8                   tay
00EFB1  1  A5 82                lda     FRETOP+1
00EFB3  1  E5 80                sbc     STREND+1
00EFB5  1               ; FALL INTO GIVAYF TO FLOAT THE VALUE
00EFB5  1               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
00EFB5  1               ; ----------------------------------------------------------------------------
00EFB5  1               ; FLOAT THE SIGNED INTEGER IN A,Y
00EFB5  1               ; ----------------------------------------------------------------------------
00EFB5  1               GIVAYF:
00EFB5  1  A2 00                ldx     #$00
00EFB7  1  86 5F                stx     VALTYP
00EFB9  1  85 AD                sta     FAC+1
00EFBB  1  84 AE                sty     FAC+2
00EFBD  1  A2 90                ldx     #$90
00EFBF  1  4C D7 F7             jmp     FLOAT1
00EFC2  1               POS:
00EFC2  1  A4 0E                ldy     POSX
00EFC4  1               ; ----------------------------------------------------------------------------
00EFC4  1               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
00EFC4  1               ; ----------------------------------------------------------------------------
00EFC4  1               SNGFLT:
00EFC4  1  A9 00                lda     #$00
00EFC6  1  F0 ED                beq     GIVAYF
00EFC8  1               ; ----------------------------------------------------------------------------
00EFC8  1               ; CHECK FOR DIRECT OR RUNNING MODE
00EFC8  1               ; GIVING ERROR IF DIRECT MODE
00EFC8  1               ; ----------------------------------------------------------------------------
00EFC8  1               ERRDIR:
00EFC8  1  A6 88                ldx     CURLIN+1
00EFCA  1  E8                   inx
00EFCB  1  D0 A2                bne     RTS9
00EFCD  1  A2 16                ldx     #ERR_ILLDIR
00EFCF  1               L31AF:
00EFCF  1  4C 4E E2             jmp     ERROR
00EFD2  1               DEF:
00EFD2  1  20 FF EF             jsr     FNC
00EFD5  1  20 C8 EF             jsr     ERRDIR
00EFD8  1  20 F2 EB             jsr     CHKOPN
00EFDB  1  A9 80                lda     #$80
00EFDD  1  85 61                sta     SUBFLG
00EFDF  1  20 FF EC             jsr     PTRGET
00EFE2  1  20 A4 EA             jsr     CHKNUM
00EFE5  1  20 EF EB             jsr     CHKCLS
00EFE8  1  A9 AB                lda     #TOKEN_EQUAL
00EFEA  1  20 F7 EB             jsr     SYNCHR
00EFED  1  A5 96                lda     VARPNT+1
00EFEF  1  48                   pha
00EFF0  1  A5 95                lda     VARPNT
00EFF2  1  48                   pha
00EFF3  1  A5 C4                lda     TXTPTR+1
00EFF5  1  48                   pha
00EFF6  1  A5 C3                lda     TXTPTR
00EFF8  1  48                   pha
00EFF9  1  20 00 E7             jsr     DATA
00EFFC  1  4C 6E F0             jmp     L3250
00EFFF  1               FNC:
00EFFF  1  A9 9E                lda     #TOKEN_FN
00F001  1  20 F7 EB             jsr     SYNCHR
00F004  1  09 80                ora     #$80
00F006  1  85 61                sta     SUBFLG
00F008  1  20 06 ED             jsr     PTRGET3
00F00B  1  85 9C                sta     FNCNAM
00F00D  1  84 9D                sty     FNCNAM+1
00F00F  1  4C A4 EA             jmp     CHKNUM
00F012  1               L31F3:
00F012  1  20 FF EF             jsr     FNC
00F015  1  A5 9D                lda     FNCNAM+1
00F017  1  48                   pha
00F018  1  A5 9C                lda     FNCNAM
00F01A  1  48                   pha
00F01B  1  20 E9 EB             jsr     PARCHK
00F01E  1  20 A4 EA             jsr     CHKNUM
00F021  1  68                   pla
00F022  1  85 9C                sta     FNCNAM
00F024  1  68                   pla
00F025  1  85 9D                sta     FNCNAM+1
00F027  1  A0 02                ldy     #$02
00F029  1  A2 20                ldx     #ERR_UNDEFFN
00F02B  1  B1 9C                lda     (FNCNAM),y
00F02D  1  F0 A0                beq     L31AF
00F02F  1  85 95                sta     VARPNT
00F031  1  AA                   tax
00F032  1  C8                   iny
00F033  1  B1 9C                lda     (FNCNAM),y
00F035  1  85 96                sta     VARPNT+1
00F037  1               L3219:
00F037  1  B1 95                lda     (VARPNT),y
00F039  1  48                   pha
00F03A  1  88                   dey
00F03B  1  10 FA                bpl     L3219
00F03D  1  A4 96                ldy     VARPNT+1
00F03F  1  20 6C F7             jsr     STORE_FAC_AT_YX_ROUNDED
00F042  1  A5 C4                lda     TXTPTR+1
00F044  1  48                   pha
00F045  1  A5 C3                lda     TXTPTR
00F047  1  48                   pha
00F048  1  B1 9C                lda     (FNCNAM),y
00F04A  1  85 C3                sta     TXTPTR
00F04C  1  C8                   iny
00F04D  1  B1 9C                lda     (FNCNAM),y
00F04F  1  85 C4                sta     TXTPTR+1
00F051  1  A5 96                lda     VARPNT+1
00F053  1  48                   pha
00F054  1  A5 95                lda     VARPNT
00F056  1  48                   pha
00F057  1  20 A1 EA             jsr     FRMNUM
00F05A  1  68                   pla
00F05B  1  85 9C                sta     FNCNAM
00F05D  1  68                   pla
00F05E  1  85 9D                sta     FNCNAM+1
00F060  1  20 C2 00             jsr     CHRGOT
00F063  1  F0 03                beq     L324A
00F065  1  4C 00 EC             jmp     SYNERR
00F068  1               L324A:
00F068  1  68                   pla
00F069  1  85 C3                sta     TXTPTR
00F06B  1  68                   pla
00F06C  1  85 C4                sta     TXTPTR+1
00F06E  1               L3250:
00F06E  1  A0 00                ldy     #$00
00F070  1  68                   pla
00F071  1  91 9C                sta     (FNCNAM),y
00F073  1  68                   pla
00F074  1  C8                   iny
00F075  1  91 9C                sta     (FNCNAM),y
00F077  1  68                   pla
00F078  1  C8                   iny
00F079  1  91 9C                sta     (FNCNAM),y
00F07B  1  68                   pla
00F07C  1  C8                   iny
00F07D  1  91 9C                sta     (FNCNAM),y
00F07F  1  60                   rts
00F080  1               ; ----------------------------------------------------------------------------
00F080  1               ; "STR$" FUNCTION
00F080  1               ; ----------------------------------------------------------------------------
00F080  1               STR:
00F080  1  20 A4 EA             jsr     CHKNUM
00F083  1  A0 00                ldy     #$00
00F085  1  20 64 F9             jsr     FOUT1
00F088  1  68                   pla
00F089  1  68                   pla
00F08A  1  A9 FF                lda     #$FF
00F08C  1  A0 00                ldy     #$00
00F08E  1  F0 12                beq     STRLIT
00F090  1               ; ----------------------------------------------------------------------------
00F090  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00F090  1               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00F090  1               ; ----------------------------------------------------------------------------
00F090  1               STRINI:
00F090  1  A6 AE                ldx     FAC_LAST-1
00F092  1  A4 AF                ldy     FAC_LAST
00F094  1  86 9E                stx     DSCPTR
00F096  1  84 9F                sty     DSCPTR+1
00F098  1               ; ----------------------------------------------------------------------------
00F098  1               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00F098  1               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
00F098  1               ; ----------------------------------------------------------------------------
00F098  1               STRSPA:
00F098  1  20 09 F1             jsr     GETSPA
00F09B  1  86 AD                stx     FAC+1
00F09D  1  84 AE                sty     FAC+2
00F09F  1  85 AC                sta     FAC
00F0A1  1  60                   rts
00F0A2  1               ; ----------------------------------------------------------------------------
00F0A2  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00F0A2  1               ; AND TERMINATED BY $00 OR QUOTATION MARK
00F0A2  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00F0A2  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00F0A2  1               ; ----------------------------------------------------------------------------
00F0A2  1               STRLIT:
00F0A2  1  A2 22                ldx     #$22
00F0A4  1  86 5B                stx     CHARAC
00F0A6  1  86 5C                stx     ENDCHR
00F0A8  1               ; ----------------------------------------------------------------------------
00F0A8  1               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00F0A8  1               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
00F0A8  1               ;
00F0A8  1               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00F0A8  1               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00F0A8  1               ; ----------------------------------------------------------------------------
00F0A8  1               STRLT2:
00F0A8  1  85 B8                sta     STRNG1
00F0AA  1  84 B9                sty     STRNG1+1
00F0AC  1  85 AD                sta     FAC+1
00F0AE  1  84 AE                sty     FAC+2
00F0B0  1  A0 FF                ldy     #$FF
00F0B2  1               L3298:
00F0B2  1  C8                   iny
00F0B3  1  B1 B8                lda     (STRNG1),y
00F0B5  1  F0 0C                beq     L32A9
00F0B7  1  C5 5B                cmp     CHARAC
00F0B9  1  F0 04                beq     L32A5
00F0BB  1  C5 5C                cmp     ENDCHR
00F0BD  1  D0 F3                bne     L3298
00F0BF  1               L32A5:
00F0BF  1  C9 22                cmp     #$22
00F0C1  1  F0 01                beq     L32AA
00F0C3  1               L32A9:
00F0C3  1  18                   clc
00F0C4  1               L32AA:
00F0C4  1  84 AC                sty     FAC
00F0C6  1  98                   tya
00F0C7  1  65 B8                adc     STRNG1
00F0C9  1  85 BA                sta     STRNG2
00F0CB  1  A6 B9                ldx     STRNG1+1
00F0CD  1  90 01                bcc     L32B6
00F0CF  1  E8                   inx
00F0D0  1               L32B6:
00F0D0  1  86 BB                stx     STRNG2+1
00F0D2  1  A5 B9                lda     STRNG1+1
00F0D4  1  D0 0B                bne     PUTNEW
00F0D6  1  98                   tya
00F0D7  1  20 90 F0             jsr     STRINI
00F0DA  1  A6 B8                ldx     STRNG1
00F0DC  1  A4 B9                ldy     STRNG1+1
00F0DE  1  20 8C F2             jsr     MOVSTR
00F0E1  1               ; ----------------------------------------------------------------------------
00F0E1  1               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
00F0E1  1               ;
00F0E1  1               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
00F0E1  1               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
00F0E1  1               ; ----------------------------------------------------------------------------
00F0E1  1               PUTNEW:
00F0E1  1  A6 65                ldx     TEMPPT
00F0E3  1  E0 71                cpx     #TEMPST+9
00F0E5  1  D0 05                bne     PUTEMP
00F0E7  1  A2 1C                ldx     #ERR_FRMCPX
00F0E9  1               JERR:
00F0E9  1  4C 4E E2             jmp     ERROR
00F0EC  1               PUTEMP:
00F0EC  1  A5 AC                lda     FAC
00F0EE  1  95 00                sta     0,x
00F0F0  1  A5 AD                lda     FAC+1
00F0F2  1  95 01                sta     1,x
00F0F4  1  A5 AE                lda     FAC+2
00F0F6  1  95 02                sta     2,x
00F0F8  1  A0 00                ldy     #$00
00F0FA  1  86 AE                stx     FAC_LAST-1
00F0FC  1  84 AF                sty     FAC_LAST
00F0FE  1  88                   dey
00F0FF  1  84 5F                sty     VALTYP
00F101  1  86 66                stx     LASTPT
00F103  1  E8                   inx
00F104  1  E8                   inx
00F105  1  E8                   inx
00F106  1  86 65                stx     TEMPPT
00F108  1  60                   rts
00F109  1               ; ----------------------------------------------------------------------------
00F109  1               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00F109  1               ; (A)=# BYTES SPACE TO MAKE
00F109  1               ;
00F109  1               ; RETURN WITH (A) SAME,
00F109  1               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00F109  1               ; ----------------------------------------------------------------------------
00F109  1               GETSPA:
00F109  1  46 60                lsr     DATAFLG
00F10B  1               L32F1:
00F10B  1  48                   pha
00F10C  1  49 FF                eor     #$FF
00F10E  1  38                   sec
00F10F  1  65 81                adc     FRETOP
00F111  1  A4 82                ldy     FRETOP+1
00F113  1  B0 01                bcs     L32FC
00F115  1  88                   dey
00F116  1               L32FC:
00F116  1  C4 80                cpy     STREND+1
00F118  1  90 11                bcc     L3311
00F11A  1  D0 04                bne     L3306
00F11C  1  C5 7F                cmp     STREND
00F11E  1  90 0B                bcc     L3311
00F120  1               L3306:
00F120  1  85 81                sta     FRETOP
00F122  1  84 82                sty     FRETOP+1
00F124  1  85 83                sta     FRESPC
00F126  1  84 84                sty     FRESPC+1
00F128  1  AA                   tax
00F129  1  68                   pla
00F12A  1  60                   rts
00F12B  1               L3311:
00F12B  1  A2 0C                ldx     #ERR_MEMFULL
00F12D  1  A5 60                lda     DATAFLG
00F12F  1  30 B8                bmi     JERR
00F131  1  20 3B F1             jsr     GARBAG
00F134  1  A9 80                lda     #$80
00F136  1  85 60                sta     DATAFLG
00F138  1  68                   pla
00F139  1  D0 D0                bne     L32F1
00F13B  1               ; ----------------------------------------------------------------------------
00F13B  1               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00F13B  1               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00F13B  1               ; BELOW STRING AREA DOWN TO STREND.
00F13B  1               ; ----------------------------------------------------------------------------
00F13B  1               GARBAG:
00F13B  1  A6 85                ldx     MEMSIZ
00F13D  1  A5 86                lda     MEMSIZ+1
00F13F  1               FINDHIGHESTSTRING:
00F13F  1  86 81                stx     FRETOP
00F141  1  85 82                sta     FRETOP+1
00F143  1  A0 00                ldy     #$00
00F145  1  84 9D                sty     FNCNAM+1
00F147  1  A5 7F                lda     STREND
00F149  1  A6 80                ldx     STREND+1
00F14B  1  85 AA                sta     LOWTR
00F14D  1  86 AB                stx     LOWTR+1
00F14F  1  A9 68                lda     #TEMPST
00F151  1  A2 00                ldx     #$00
00F153  1  85 71                sta     INDEX
00F155  1  86 72                stx     INDEX+1
00F157  1               L333D:
00F157  1  C5 65                cmp     TEMPPT
00F159  1  F0 05                beq     L3346
00F15B  1  20 CD F1             jsr     CHECK_VARIABLE
00F15E  1  F0 F7                beq     L333D
00F160  1               L3346:
00F160  1  A9 06                lda     #BYTES_PER_VARIABLE
00F162  1  85 A0                sta     DSCLEN
00F164  1  A5 7B                lda     VARTAB
00F166  1  A6 7C                ldx     VARTAB+1
00F168  1  85 71                sta     INDEX
00F16A  1  86 72                stx     INDEX+1
00F16C  1               L3352:
00F16C  1  E4 7E                cpx     ARYTAB+1
00F16E  1  D0 04                bne     L335A
00F170  1  C5 7D                cmp     ARYTAB
00F172  1  F0 05                beq     L335F
00F174  1               L335A:
00F174  1  20 C7 F1             jsr     CHECK_SIMPLE_VARIABLE
00F177  1  F0 F3                beq     L3352
00F179  1               L335F:
00F179  1  85 A4                sta     HIGHDS
00F17B  1  86 A5                stx     HIGHDS+1
00F17D  1  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00F17F  1  85 A0                sta     DSCLEN
00F181  1               L3367:
00F181  1  A5 A4                lda     HIGHDS
00F183  1  A6 A5                ldx     HIGHDS+1
00F185  1               L336B:
00F185  1  E4 80                cpx     STREND+1
00F187  1  D0 07                bne     L3376
00F189  1  C5 7F                cmp     STREND
00F18B  1  D0 03                bne     L3376
00F18D  1  4C 0C F2             jmp     MOVE_HIGHEST_STRING_TO_TOP
00F190  1               L3376:
00F190  1  85 71                sta     INDEX
00F192  1  86 72                stx     INDEX+1
00F194  1  A0 01                ldy     #$01
00F196  1  B1 71                lda     (INDEX),y
00F198  1  08                   php
00F199  1  C8                   iny
00F19A  1  B1 71                lda     (INDEX),y
00F19C  1  65 A4                adc     HIGHDS
00F19E  1  85 A4                sta     HIGHDS
00F1A0  1  C8                   iny
00F1A1  1  B1 71                lda     (INDEX),y
00F1A3  1  65 A5                adc     HIGHDS+1
00F1A5  1  85 A5                sta     HIGHDS+1
00F1A7  1  28                   plp
00F1A8  1  10 D7                bpl     L3367
00F1AA  1  C8                   iny
00F1AB  1  B1 71                lda     (INDEX),y
00F1AD  1  0A                   asl     a
00F1AE  1  69 05                adc     #$05
00F1B0  1  65 71                adc     INDEX
00F1B2  1  85 71                sta     INDEX
00F1B4  1  90 02                bcc     L33A7
00F1B6  1  E6 72                inc     INDEX+1
00F1B8  1               L33A7:
00F1B8  1  A6 72                ldx     INDEX+1
00F1BA  1               L33A9:
00F1BA  1  E4 A5                cpx     HIGHDS+1
00F1BC  1  D0 04                bne     L33B1
00F1BE  1  C5 A4                cmp     HIGHDS
00F1C0  1  F0 C3                beq     L336B
00F1C2  1               L33B1:
00F1C2  1  20 CD F1             jsr     CHECK_VARIABLE
00F1C5  1  F0 F3                beq     L33A9
00F1C7  1               ; ----------------------------------------------------------------------------
00F1C7  1               ; PROCESS A SIMPLE VARIABLE
00F1C7  1               ; ----------------------------------------------------------------------------
00F1C7  1               CHECK_SIMPLE_VARIABLE:
00F1C7  1  C8                   iny
00F1C8  1  B1 71                lda     (INDEX),y
00F1CA  1  10 30                bpl     CHECK_BUMP
00F1CC  1  C8                   iny
00F1CD  1               ; ----------------------------------------------------------------------------
00F1CD  1               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00F1CD  1               ; ----------------------------------------------------------------------------
00F1CD  1               CHECK_VARIABLE:
00F1CD  1  B1 71                lda     (INDEX),y
00F1CF  1  F0 2B                beq     CHECK_BUMP
00F1D1  1  C8                   iny
00F1D2  1  B1 71                lda     (INDEX),y
00F1D4  1  AA                   tax
00F1D5  1  C8                   iny
00F1D6  1  B1 71                lda     (INDEX),y
00F1D8  1  C5 82                cmp     FRETOP+1
00F1DA  1  90 06                bcc     L33D5
00F1DC  1  D0 1E                bne     CHECK_BUMP
00F1DE  1  E4 81                cpx     FRETOP
00F1E0  1  B0 1A                bcs     CHECK_BUMP
00F1E2  1               L33D5:
00F1E2  1  C5 AB                cmp     LOWTR+1
00F1E4  1  90 16                bcc     CHECK_BUMP
00F1E6  1  D0 04                bne     L33DF
00F1E8  1  E4 AA                cpx     LOWTR
00F1EA  1  90 10                bcc     CHECK_BUMP
00F1EC  1               L33DF:
00F1EC  1  86 AA                stx     LOWTR
00F1EE  1  85 AB                sta     LOWTR+1
00F1F0  1  A5 71                lda     INDEX
00F1F2  1  A6 72                ldx     INDEX+1
00F1F4  1  85 9C                sta     FNCNAM
00F1F6  1  86 9D                stx     FNCNAM+1
00F1F8  1  A5 A0                lda     DSCLEN
00F1FA  1  85 A2                sta     Z52
00F1FC  1               ; ----------------------------------------------------------------------------
00F1FC  1               ; ADD (DSCLEN) TO PNTR IN INDEX
00F1FC  1               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00F1FC  1               ; ----------------------------------------------------------------------------
00F1FC  1               CHECK_BUMP:
00F1FC  1  A5 A0                lda     DSCLEN
00F1FE  1  18                   clc
00F1FF  1  65 71                adc     INDEX
00F201  1  85 71                sta     INDEX
00F203  1  90 02                bcc     L33FA
00F205  1  E6 72                inc     INDEX+1
00F207  1               L33FA:
00F207  1  A6 72                ldx     INDEX+1
00F209  1  A0 00                ldy     #$00
00F20B  1  60                   rts
00F20C  1               ; ----------------------------------------------------------------------------
00F20C  1               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00F20C  1               ; TO TOP AND GO BACK FOR ANOTHER
00F20C  1               ; ----------------------------------------------------------------------------
00F20C  1               MOVE_HIGHEST_STRING_TO_TOP:
00F20C  1  A6 9D                ldx     FNCNAM+1
00F20E  1  F0 F7                beq     L33FA
00F210  1  A5 A2                lda     Z52
00F212  1  29 04                and     #$04
00F214  1  4A                   lsr     a
00F215  1  A8                   tay
00F216  1  85 A2                sta     Z52
00F218  1  B1 9C                lda     (FNCNAM),y
00F21A  1  65 AA                adc     LOWTR
00F21C  1  85 A6                sta     HIGHTR
00F21E  1  A5 AB                lda     LOWTR+1
00F220  1  69 00                adc     #$00
00F222  1  85 A7                sta     HIGHTR+1
00F224  1  A5 81                lda     FRETOP
00F226  1  A6 82                ldx     FRETOP+1
00F228  1  85 A4                sta     HIGHDS
00F22A  1  86 A5                stx     HIGHDS+1
00F22C  1  20 D6 E1             jsr     BLTU2
00F22F  1  A4 A2                ldy     Z52
00F231  1  C8                   iny
00F232  1  A5 A4                lda     HIGHDS
00F234  1  91 9C                sta     (FNCNAM),y
00F236  1  AA                   tax
00F237  1  E6 A5                inc     HIGHDS+1
00F239  1  A5 A5                lda     HIGHDS+1
00F23B  1  C8                   iny
00F23C  1  91 9C                sta     (FNCNAM),y
00F23E  1  4C 3F F1             jmp     FINDHIGHESTSTRING
00F241  1               ; ----------------------------------------------------------------------------
00F241  1               ; CONCATENATE TWO STRINGS
00F241  1               ; ----------------------------------------------------------------------------
00F241  1               CAT:
00F241  1  A5 AF                lda     FAC_LAST
00F243  1  48                   pha
00F244  1  A5 AE                lda     FAC_LAST-1
00F246  1  48                   pha
00F247  1  20 94 EB             jsr     FRM_ELEMENT
00F24A  1  20 A6 EA             jsr     CHKSTR
00F24D  1  68                   pla
00F24E  1  85 B8                sta     STRNG1
00F250  1  68                   pla
00F251  1  85 B9                sta     STRNG1+1
00F253  1  A0 00                ldy     #$00
00F255  1  B1 B8                lda     (STRNG1),y
00F257  1  18                   clc
00F258  1  71 AE                adc     (FAC_LAST-1),y
00F25A  1  90 05                bcc     L3454
00F25C  1  A2 1A                ldx     #ERR_STRLONG
00F25E  1  4C 4E E2             jmp     ERROR
00F261  1               L3454:
00F261  1  20 90 F0             jsr     STRINI
00F264  1  20 7E F2             jsr     MOVINS
00F267  1  A5 9E                lda     DSCPTR
00F269  1  A4 9F                ldy     DSCPTR+1
00F26B  1  20 AE F2             jsr     FRETMP
00F26E  1  20 90 F2             jsr     MOVSTR1
00F271  1  A5 B8                lda     STRNG1
00F273  1  A4 B9                ldy     STRNG1+1
00F275  1  20 AE F2             jsr     FRETMP
00F278  1  20 E1 F0             jsr     PUTNEW
00F27B  1  4C CF EA             jmp     FRMEVL2
00F27E  1               ; ----------------------------------------------------------------------------
00F27E  1               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00F27E  1               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00F27E  1               ; ----------------------------------------------------------------------------
00F27E  1               MOVINS:
00F27E  1  A0 00                ldy     #$00
00F280  1  B1 B8                lda     (STRNG1),y
00F282  1  48                   pha
00F283  1  C8                   iny
00F284  1  B1 B8                lda     (STRNG1),y
00F286  1  AA                   tax
00F287  1  C8                   iny
00F288  1  B1 B8                lda     (STRNG1),y
00F28A  1  A8                   tay
00F28B  1  68                   pla
00F28C  1               ; ----------------------------------------------------------------------------
00F28C  1               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00F28C  1               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00F28C  1               ; ----------------------------------------------------------------------------
00F28C  1               MOVSTR:
00F28C  1  86 71                stx     INDEX
00F28E  1  84 72                sty     INDEX+1
00F290  1               MOVSTR1:
00F290  1  A8                   tay
00F291  1  F0 0A                beq     L3490
00F293  1  48                   pha
00F294  1               L3487:
00F294  1  88                   dey
00F295  1  B1 71                lda     (INDEX),y
00F297  1  91 83                sta     (FRESPC),y
00F299  1  98                   tya
00F29A  1  D0 F8                bne     L3487
00F29C  1  68                   pla
00F29D  1               L3490:
00F29D  1  18                   clc
00F29E  1  65 83                adc     FRESPC
00F2A0  1  85 83                sta     FRESPC
00F2A2  1  90 02                bcc     L3499
00F2A4  1  E6 84                inc     FRESPC+1
00F2A6  1               L3499:
00F2A6  1  60                   rts
00F2A7  1               ; ----------------------------------------------------------------------------
00F2A7  1               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00F2A7  1               ; ----------------------------------------------------------------------------
00F2A7  1               FRESTR:
00F2A7  1  20 A6 EA             jsr     CHKSTR
00F2AA  1               ; ----------------------------------------------------------------------------
00F2AA  1               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00F2AA  1               ; A TEMPORARY STRING, RELEASE IT.
00F2AA  1               ; ----------------------------------------------------------------------------
00F2AA  1               FREFAC:
00F2AA  1  A5 AE                lda     FAC_LAST-1
00F2AC  1  A4 AF                ldy     FAC_LAST
00F2AE  1               ; ----------------------------------------------------------------------------
00F2AE  1               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00F2AE  1               ; A TEMPORARY STRING, RELEASE IT.
00F2AE  1               ; ----------------------------------------------------------------------------
00F2AE  1               FRETMP:
00F2AE  1  85 71                sta     INDEX
00F2B0  1  84 72                sty     INDEX+1
00F2B2  1  20 DF F2             jsr     FRETMS
00F2B5  1  08                   php
00F2B6  1  A0 00                ldy     #$00
00F2B8  1  B1 71                lda     (INDEX),y
00F2BA  1  48                   pha
00F2BB  1  C8                   iny
00F2BC  1  B1 71                lda     (INDEX),y
00F2BE  1  AA                   tax
00F2BF  1  C8                   iny
00F2C0  1  B1 71                lda     (INDEX),y
00F2C2  1  A8                   tay
00F2C3  1  68                   pla
00F2C4  1  28                   plp
00F2C5  1  D0 13                bne     L34CD
00F2C7  1  C4 82                cpy     FRETOP+1
00F2C9  1  D0 0F                bne     L34CD
00F2CB  1  E4 81                cpx     FRETOP
00F2CD  1  D0 0B                bne     L34CD
00F2CF  1  48                   pha
00F2D0  1  18                   clc
00F2D1  1  65 81                adc     FRETOP
00F2D3  1  85 81                sta     FRETOP
00F2D5  1  90 02                bcc     L34CC
00F2D7  1  E6 82                inc     FRETOP+1
00F2D9  1               L34CC:
00F2D9  1  68                   pla
00F2DA  1               L34CD:
00F2DA  1  86 71                stx     INDEX
00F2DC  1  84 72                sty     INDEX+1
00F2DE  1  60                   rts
00F2DF  1               ; ----------------------------------------------------------------------------
00F2DF  1               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00F2DF  1               ; ----------------------------------------------------------------------------
00F2DF  1               FRETMS:
00F2DF  1  C4 67                cpy     LASTPT+1
00F2E1  1  D0 0C                bne     L34E2
00F2E3  1  C5 66                cmp     LASTPT
00F2E5  1  D0 08                bne     L34E2
00F2E7  1  85 65                sta     TEMPPT
00F2E9  1  E9 03                sbc     #$03
00F2EB  1  85 66                sta     LASTPT
00F2ED  1  A0 00                ldy     #$00
00F2EF  1               L34E2:
00F2EF  1  60                   rts
00F2F0  1               ; ----------------------------------------------------------------------------
00F2F0  1               ; "CHR$" FUNCTION
00F2F0  1               ; ----------------------------------------------------------------------------
00F2F0  1               CHRSTR:
00F2F0  1  20 A5 F3             jsr     CONINT
00F2F3  1  8A                   txa
00F2F4  1  48                   pha
00F2F5  1  A9 01                lda     #$01
00F2F7  1  20 98 F0             jsr     STRSPA
00F2FA  1  68                   pla
00F2FB  1  A0 00                ldy     #$00
00F2FD  1  91 AD                sta     (FAC+1),y
00F2FF  1  68                   pla
00F300  1  68                   pla
00F301  1  4C E1 F0             jmp     PUTNEW
00F304  1               ; ----------------------------------------------------------------------------
00F304  1               ; "LEFT$" FUNCTION
00F304  1               ; ----------------------------------------------------------------------------
00F304  1               LEFTSTR:
00F304  1  20 63 F3             jsr     SUBSTRING_SETUP
00F307  1  D1 9E                cmp     (DSCPTR),y
00F309  1  98                   tya
00F30A  1               SUBSTRING1:
00F30A  1  90 04                bcc     L3503
00F30C  1  B1 9E                lda     (DSCPTR),y
00F30E  1  AA                   tax
00F30F  1  98                   tya
00F310  1               L3503:
00F310  1  48                   pha
00F311  1               SUBSTRING2:
00F311  1  8A                   txa
00F312  1               SUBSTRING3:
00F312  1  48                   pha
00F313  1  20 98 F0             jsr     STRSPA
00F316  1  A5 9E                lda     DSCPTR
00F318  1  A4 9F                ldy     DSCPTR+1
00F31A  1  20 AE F2             jsr     FRETMP
00F31D  1  68                   pla
00F31E  1  A8                   tay
00F31F  1  68                   pla
00F320  1  18                   clc
00F321  1  65 71                adc     INDEX
00F323  1  85 71                sta     INDEX
00F325  1  90 02                bcc     L351C
00F327  1  E6 72                inc     INDEX+1
00F329  1               L351C:
00F329  1  98                   tya
00F32A  1  20 90 F2             jsr     MOVSTR1
00F32D  1  4C E1 F0             jmp     PUTNEW
00F330  1               ; ----------------------------------------------------------------------------
00F330  1               ; "RIGHT$" FUNCTION
00F330  1               ; ----------------------------------------------------------------------------
00F330  1               RIGHTSTR:
00F330  1  20 63 F3             jsr     SUBSTRING_SETUP
00F333  1  18                   clc
00F334  1  F1 9E                sbc     (DSCPTR),y
00F336  1  49 FF                eor     #$FF
00F338  1  4C 0A F3             jmp     SUBSTRING1
00F33B  1               ; ----------------------------------------------------------------------------
00F33B  1               ; "MID$" FUNCTION
00F33B  1               ; ----------------------------------------------------------------------------
00F33B  1               MIDSTR:
00F33B  1  A9 FF                lda     #$FF
00F33D  1  85 AF                sta     FAC_LAST
00F33F  1  20 C2 00             jsr     CHRGOT
00F342  1  C9 29                cmp     #$29
00F344  1  F0 06                beq     L353F
00F346  1  20 F5 EB             jsr     CHKCOM
00F349  1  20 A2 F3             jsr     GETBYT
00F34C  1               L353F:
00F34C  1  20 63 F3             jsr     SUBSTRING_SETUP
00F34F  1  CA                   dex
00F350  1  8A                   txa
00F351  1  48                   pha
00F352  1  18                   clc
00F353  1  A2 00                ldx     #$00
00F355  1  F1 9E                sbc     (DSCPTR),y
00F357  1  B0 B8                bcs     SUBSTRING2
00F359  1  49 FF                eor     #$FF
00F35B  1  C5 AF                cmp     FAC_LAST
00F35D  1  90 B3                bcc     SUBSTRING3
00F35F  1  A5 AF                lda     FAC_LAST
00F361  1  B0 AF                bcs     SUBSTRING3
00F363  1               ; ----------------------------------------------------------------------------
00F363  1               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
00F363  1               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
00F363  1               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
00F363  1               ; ----------------------------------------------------------------------------
00F363  1               SUBSTRING_SETUP:
00F363  1  20 EF EB             jsr     CHKCLS
00F366  1  68                   pla
00F367  1  85 A2                sta     JMPADRS+1
00F369  1  68                   pla
00F36A  1  85 A3                sta     JMPADRS+2
00F36C  1  68                   pla
00F36D  1  68                   pla
00F36E  1  68                   pla
00F36F  1  AA                   tax
00F370  1  68                   pla
00F371  1  85 9E                sta     DSCPTR
00F373  1  68                   pla
00F374  1  85 9F                sta     DSCPTR+1
00F376  1  A0 00                ldy     #$00
00F378  1  8A                   txa
00F379  1  F0 21                beq     GOIQ
00F37B  1  E6 A2                inc     JMPADRS+1
00F37D  1  6C A2 00             jmp     (JMPADRS+1)
00F380  1               ; ----------------------------------------------------------------------------
00F380  1               ; "LEN" FUNCTION
00F380  1               ; ----------------------------------------------------------------------------
00F380  1               LEN:
00F380  1  20 86 F3             jsr     GETSTR
00F383  1               SNGFLT1:
00F383  1  4C C4 EF             jmp     SNGFLT
00F386  1               ; ----------------------------------------------------------------------------
00F386  1               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
00F386  1               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
00F386  1               ; ----------------------------------------------------------------------------
00F386  1               GETSTR:
00F386  1  20 A7 F2             jsr     FRESTR
00F389  1  A2 00                ldx     #$00
00F38B  1  86 5F                stx     VALTYP
00F38D  1  A8                   tay
00F38E  1  60                   rts
00F38F  1               ; ----------------------------------------------------------------------------
00F38F  1               ; "ASC" FUNCTION
00F38F  1               ; ----------------------------------------------------------------------------
00F38F  1               ASC:
00F38F  1  20 86 F3             jsr     GETSTR
00F392  1  F0 08                beq     GOIQ
00F394  1  A0 00                ldy     #$00
00F396  1  B1 71                lda     (INDEX),y
00F398  1  A8                   tay
00F399  1  4C 83 F3             jmp     SNGFLT1
00F39C  1               ; ----------------------------------------------------------------------------
00F39C  1               GOIQ:
00F39C  1  4C 7C EE             jmp     IQERR
00F39F  1               ; ----------------------------------------------------------------------------
00F39F  1               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00F39F  1               ; TO SINGLE BYTE IN X-REG
00F39F  1               ; ----------------------------------------------------------------------------
00F39F  1               GTBYTC:
00F39F  1  20 BC 00             jsr     CHRGET
00F3A2  1               ; ----------------------------------------------------------------------------
00F3A2  1               ; EVALUATE EXPRESSION AT TXTPTR, AND
00F3A2  1               ; CONVERT IT TO SINGLE BYTE IN X-REG
00F3A2  1               ; ----------------------------------------------------------------------------
00F3A2  1               GETBYT:
00F3A2  1  20 A1 EA             jsr     FRMNUM
00F3A5  1               ; ----------------------------------------------------------------------------
00F3A5  1               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00F3A5  1               ; ----------------------------------------------------------------------------
00F3A5  1               CONINT:
00F3A5  1  20 F5 ED             jsr     MKINT
00F3A8  1  A6 AE                ldx     FAC_LAST-1
00F3AA  1  D0 F0                bne     GOIQ
00F3AC  1  A6 AF                ldx     FAC_LAST
00F3AE  1  4C C2 00             jmp     CHRGOT
00F3B1  1               ; ----------------------------------------------------------------------------
00F3B1  1               ; "VAL" FUNCTION
00F3B1  1               ; ----------------------------------------------------------------------------
00F3B1  1               VAL:
00F3B1  1  20 86 F3             jsr     GETSTR
00F3B4  1  D0 03                bne     L35AC
00F3B6  1  4C E5 F4             jmp     ZERO_FAC
00F3B9  1               L35AC:
00F3B9  1  A6 C3                ldx     TXTPTR
00F3BB  1  A4 C4                ldy     TXTPTR+1
00F3BD  1  86 BA                stx     STRNG2
00F3BF  1  84 BB                sty     STRNG2+1
00F3C1  1  A6 71                ldx     INDEX
00F3C3  1  86 C3                stx     TXTPTR
00F3C5  1  18                   clc
00F3C6  1  65 71                adc     INDEX
00F3C8  1  85 73                sta     DEST
00F3CA  1  A6 72                ldx     INDEX+1
00F3CC  1  86 C4                stx     TXTPTR+1
00F3CE  1  90 01                bcc     L35C4
00F3D0  1  E8                   inx
00F3D1  1               L35C4:
00F3D1  1  86 74                stx     DEST+1
00F3D3  1  A0 00                ldy     #$00
00F3D5  1  B1 73                lda     (DEST),y
00F3D7  1  48                   pha
00F3D8  1  A9 00                lda     #$00
00F3DA  1  91 73                sta     (DEST),y
00F3DC  1  20 C2 00             jsr     CHRGOT
00F3DF  1  20 7B F8             jsr     FIN
00F3E2  1  68                   pla
00F3E3  1  A0 00                ldy     #$00
00F3E5  1  91 73                sta     (DEST),y
00F3E7  1               ; ----------------------------------------------------------------------------
00F3E7  1               ; COPY STRNG2 INTO TXTPTR
00F3E7  1               ; ----------------------------------------------------------------------------
00F3E7  1               POINT:
00F3E7  1  A6 BA                ldx     STRNG2
00F3E9  1  A4 BB                ldy     STRNG2+1
00F3EB  1  86 C3                stx     TXTPTR
00F3ED  1  84 C4                sty     TXTPTR+1
00F3EF  1  60                   rts
00F3F0  1               ; ----------------------------------------------------------------------------
00F3F0  1               ; EVALUATE "EXP1,EXP2"
00F3F0  1               ;
00F3F0  1               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00F3F0  1               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00F3F0  1               ; ----------------------------------------------------------------------------
00F3F0  1               GTNUM:
00F3F0  1  20 A1 EA             jsr     FRMNUM
00F3F3  1  20 FC F3             jsr     GETADR
00F3F6  1               ; ----------------------------------------------------------------------------
00F3F6  1               ; EVALUATE ",EXPRESSION"
00F3F6  1               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
00F3F6  1               ; ----------------------------------------------------------------------------
00F3F6  1               COMBYTE:
00F3F6  1  20 F5 EB             jsr     CHKCOM
00F3F9  1  4C A2 F3             jmp     GETBYT
00F3FC  1               ; ----------------------------------------------------------------------------
00F3FC  1               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00F3FC  1               ; ----------------------------------------------------------------------------
00F3FC  1               GETADR:
00F3FC  1  A5 B0                lda     FACSIGN
00F3FE  1  30 9C                bmi     GOIQ
00F400  1  A5 AC                lda     FAC
00F402  1  C9 91                cmp     #$91
00F404  1  B0 96                bcs     GOIQ
00F406  1  20 25 F8             jsr     QINT
00F409  1  A5 AE                lda     FAC_LAST-1
00F40B  1  A4 AF                ldy     FAC_LAST
00F40D  1  84 11                sty     LINNUM
00F40F  1  85 12                sta     LINNUM+1
00F411  1  60                   rts
00F412  1               ; ----------------------------------------------------------------------------
00F412  1               ; "PEEK" FUNCTION
00F412  1               ; ----------------------------------------------------------------------------
00F412  1               PEEK:
00F412  1  20 FC F3             jsr     GETADR
00F415  1  A0 00                ldy     #$00
00F417  1               ; disallow PEEK between $C000 and $DFFF
00F417  1  B1 11                lda     (LINNUM),y
00F419  1  A8                   tay
00F41A  1  4C C4 EF             jmp     SNGFLT
00F41D  1               ; ----------------------------------------------------------------------------
00F41D  1               ; "POKE" STATEMENT
00F41D  1               ; ----------------------------------------------------------------------------
00F41D  1               POKE:
00F41D  1  20 F0 F3             jsr     GTNUM
00F420  1  8A                   txa
00F421  1  A0 00                ldy     #$00
00F423  1  91 11                sta     (LINNUM),y
00F425  1  60                   rts
00F426  1               ; ----------------------------------------------------------------------------
00F426  1               ; "WAIT" STATEMENT
00F426  1               ; ----------------------------------------------------------------------------
00F426  1               WAIT:
00F426  1  20 F0 F3             jsr     GTNUM
00F429  1  86 97                stx     FORPNT
00F42B  1  A2 00                ldx     #$00
00F42D  1  20 C2 00             jsr     CHRGOT
00F430  1  F0 03                beq     L3628
00F432  1  20 F6 F3             jsr     COMBYTE
00F435  1               L3628:
00F435  1  86 98                stx     FORPNT+1
00F437  1  A0 00                ldy     #$00
00F439  1               L362C:
00F439  1  B1 11                lda     (LINNUM),y
00F43B  1  45 98                eor     FORPNT+1
00F43D  1  25 97                and     FORPNT
00F43F  1  F0 F8                beq     L362C
00F441  1               RTS3:
00F441  1  60                   rts
00F442  1               TEMP1X = TEMP1+(5-BYTES_FP)
00F442  1               ; ----------------------------------------------------------------------------
00F442  1               ; ADD 0.5 TO FAC
00F442  1               ; ----------------------------------------------------------------------------
00F442  1               FADDH:
00F442  1  A9 8A                lda     #<CON_HALF
00F444  1  A0 FA                ldy     #>CON_HALF
00F446  1  4C 60 F4             jmp     FADD
00F449  1               ; ----------------------------------------------------------------------------
00F449  1               ; FAC = (Y,A) - FAC
00F449  1               ; ----------------------------------------------------------------------------
00F449  1               FSUB:
00F449  1  20 41 F6             jsr     LOAD_ARG_FROM_YA
00F44C  1               ; ----------------------------------------------------------------------------
00F44C  1               ; FAC = ARG - FAC
00F44C  1               ; ----------------------------------------------------------------------------
00F44C  1               FSUBT:
00F44C  1  A5 B0                lda     FACSIGN
00F44E  1  49 FF                eor     #$FF
00F450  1  85 B0                sta     FACSIGN
00F452  1  45 B7                eor     ARGSIGN
00F454  1  85 B8                sta     SGNCPR
00F456  1  A5 AC                lda     FAC
00F458  1  4C 63 F4             jmp     FADDT
00F45B  1               ; ----------------------------------------------------------------------------
00F45B  1               ; Commodore BASIC V2 Easter Egg
00F45B  1               ; ----------------------------------------------------------------------------
00F45B  1               ; ----------------------------------------------------------------------------
00F45B  1               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00F45B  1               ; ----------------------------------------------------------------------------
00F45B  1               FADD1:
00F45B  1  20 6F F5             jsr     SHIFT_RIGHT
00F45E  1  90 3C                bcc     FADD3
00F460  1               ; ----------------------------------------------------------------------------
00F460  1               ; FAC = (Y,A) + FAC
00F460  1               ; ----------------------------------------------------------------------------
00F460  1               FADD:
00F460  1  20 41 F6             jsr     LOAD_ARG_FROM_YA
00F463  1               ; ----------------------------------------------------------------------------
00F463  1               ; FAC = ARG + FAC
00F463  1               ; ----------------------------------------------------------------------------
00F463  1               FADDT:
00F463  1  D0 03                bne     L365B
00F465  1  4C 8F F7             jmp     COPY_ARG_TO_FAC
00F468  1               L365B:
00F468  1  A6 B9                ldx     FACEXTENSION
00F46A  1  86 A3                stx     ARGEXTENSION
00F46C  1  A2 B3                ldx     #ARG
00F46E  1  A5 B3                lda     ARG
00F470  1               FADD2:
00F470  1  A8                   tay
00F471  1  F0 CE                beq     RTS3
00F473  1  38                   sec
00F474  1  E5 AC                sbc     FAC
00F476  1  F0 24                beq     FADD3
00F478  1  90 12                bcc     L367F
00F47A  1  84 AC                sty     FAC
00F47C  1  A4 B7                ldy     ARGSIGN
00F47E  1  84 B0                sty     FACSIGN
00F480  1  49 FF                eor     #$FF
00F482  1  69 00                adc     #$00
00F484  1  A0 00                ldy     #$00
00F486  1  84 A3                sty     ARGEXTENSION
00F488  1  A2 AC                ldx     #FAC
00F48A  1  D0 04                bne     L3683
00F48C  1               L367F:
00F48C  1  A0 00                ldy     #$00
00F48E  1  84 B9                sty     FACEXTENSION
00F490  1               L3683:
00F490  1  C9 F9                cmp     #$F9
00F492  1  30 C7                bmi     FADD1
00F494  1  A8                   tay
00F495  1  A5 B9                lda     FACEXTENSION
00F497  1  56 01                lsr     1,x
00F499  1  20 86 F5             jsr     SHIFT_RIGHT4
00F49C  1               FADD3:
00F49C  1  24 B8                bit     SGNCPR
00F49E  1  10 4C                bpl     FADD4
00F4A0  1  A0 AC                ldy     #FAC
00F4A2  1  E0 B3                cpx     #ARG
00F4A4  1  F0 02                beq     L369B
00F4A6  1  A0 B3                ldy     #ARG
00F4A8  1               L369B:
00F4A8  1  38                   sec
00F4A9  1  49 FF                eor     #$FF
00F4AB  1  65 A3                adc     ARGEXTENSION
00F4AD  1  85 B9                sta     FACEXTENSION
00F4AF  1  B9 03 00             lda     3,y
00F4B2  1  F5 03                sbc     3,x
00F4B4  1  85 AF                sta     FAC+3
00F4B6  1  B9 02 00             lda     2,y
00F4B9  1  F5 02                sbc     2,x
00F4BB  1  85 AE                sta     FAC+2
00F4BD  1  B9 01 00             lda     1,y
00F4C0  1  F5 01                sbc     1,x
00F4C2  1  85 AD                sta     FAC+1
00F4C4  1               ; ----------------------------------------------------------------------------
00F4C4  1               ; NORMALIZE VALUE IN FAC
00F4C4  1               ; ----------------------------------------------------------------------------
00F4C4  1               NORMALIZE_FAC1:
00F4C4  1  B0 03                bcs     NORMALIZE_FAC2
00F4C6  1  20 2B F5             jsr     COMPLEMENT_FAC
00F4C9  1               NORMALIZE_FAC2:
00F4C9  1  A0 00                ldy     #$00
00F4CB  1  98                   tya
00F4CC  1  18                   clc
00F4CD  1               L36C7:
00F4CD  1  A6 AD                ldx     FAC+1
00F4CF  1  D0 3E                bne     NORMALIZE_FAC4
00F4D1  1  A6 AE                ldx     FAC+2
00F4D3  1  86 AD                stx     FAC+1
00F4D5  1  A6 AF                ldx     FAC+3
00F4D7  1  86 AE                stx     FAC+2
00F4D9  1  A6 B9                ldx     FACEXTENSION
00F4DB  1  86 AF                stx     FAC+3
00F4DD  1  84 B9                sty     FACEXTENSION
00F4DF  1  69 08                adc     #$08
00F4E1  1               ; bugfix?
00F4E1  1               ; fix does not exist on AppleSoft 2
00F4E1  1  C9 18                cmp     #MANTISSA_BYTES*8
00F4E3  1  D0 E8                bne     L36C7
00F4E5  1               ; ----------------------------------------------------------------------------
00F4E5  1               ; SET FAC = 0
00F4E5  1               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00F4E5  1               ; ----------------------------------------------------------------------------
00F4E5  1               ZERO_FAC:
00F4E5  1  A9 00                lda     #$00
00F4E7  1               STA_IN_FAC_SIGN_AND_EXP:
00F4E7  1  85 AC                sta     FAC
00F4E9  1               STA_IN_FAC_SIGN:
00F4E9  1  85 B0                sta     FACSIGN
00F4EB  1  60                   rts
00F4EC  1               ; ----------------------------------------------------------------------------
00F4EC  1               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00F4EC  1               ; ----------------------------------------------------------------------------
00F4EC  1               FADD4:
00F4EC  1  65 A3                adc     ARGEXTENSION
00F4EE  1  85 B9                sta     FACEXTENSION
00F4F0  1  A5 AF                lda     FAC+3
00F4F2  1  65 B6                adc     ARG+3
00F4F4  1  85 AF                sta     FAC+3
00F4F6  1  A5 AE                lda     FAC+2
00F4F8  1  65 B5                adc     ARG+2
00F4FA  1  85 AE                sta     FAC+2
00F4FC  1  A5 AD                lda     FAC+1
00F4FE  1  65 B4                adc     ARG+1
00F500  1  85 AD                sta     FAC+1
00F502  1  4C 1C F5             jmp     NORMALIZE_FAC5
00F505  1               ; ----------------------------------------------------------------------------
00F505  1               ; FINISH NORMALIZING FAC
00F505  1               ; ----------------------------------------------------------------------------
00F505  1               NORMALIZE_FAC3:
00F505  1  69 01                adc     #$01
00F507  1  06 B9                asl     FACEXTENSION
00F509  1  26 AF                rol     FAC+3
00F50B  1  26 AE                rol     FAC+2
00F50D  1  26 AD                rol     FAC+1
00F50F  1               NORMALIZE_FAC4:
00F50F  1  10 F4                bpl     NORMALIZE_FAC3
00F511  1  38                   sec
00F512  1  E5 AC                sbc     FAC
00F514  1  B0 CF                bcs     ZERO_FAC
00F516  1  49 FF                eor     #$FF
00F518  1  69 01                adc     #$01
00F51A  1  85 AC                sta     FAC
00F51C  1               NORMALIZE_FAC5:
00F51C  1  90 0C                bcc     L3764
00F51E  1               NORMALIZE_FAC6:
00F51E  1  E6 AC                inc     FAC
00F520  1  F0 36                beq     OVERFLOW
00F522  1  66 AD                ror     FAC+1
00F524  1  66 AE                ror     FAC+2
00F526  1  66 AF                ror     FAC+3
00F528  1  66 B9                ror     FACEXTENSION
00F52A  1               L3764:
00F52A  1  60                   rts
00F52B  1               ; ----------------------------------------------------------------------------
00F52B  1               ; 2'S COMPLEMENT OF FAC
00F52B  1               ; ----------------------------------------------------------------------------
00F52B  1               COMPLEMENT_FAC:
00F52B  1  A5 B0                lda     FACSIGN
00F52D  1  49 FF                eor     #$FF
00F52F  1  85 B0                sta     FACSIGN
00F531  1               ; ----------------------------------------------------------------------------
00F531  1               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
00F531  1               ; ----------------------------------------------------------------------------
00F531  1               COMPLEMENT_FAC_MANTISSA:
00F531  1  A5 AD                lda     FAC+1
00F533  1  49 FF                eor     #$FF
00F535  1  85 AD                sta     FAC+1
00F537  1  A5 AE                lda     FAC+2
00F539  1  49 FF                eor     #$FF
00F53B  1  85 AE                sta     FAC+2
00F53D  1  A5 AF                lda     FAC+3
00F53F  1  49 FF                eor     #$FF
00F541  1  85 AF                sta     FAC+3
00F543  1  A5 B9                lda     FACEXTENSION
00F545  1  49 FF                eor     #$FF
00F547  1  85 B9                sta     FACEXTENSION
00F549  1  E6 B9                inc     FACEXTENSION
00F54B  1  D0 0A                bne     RTS12
00F54D  1               ; ----------------------------------------------------------------------------
00F54D  1               ; INCREMENT FAC MANTISSA
00F54D  1               ; ----------------------------------------------------------------------------
00F54D  1               INCREMENT_FAC_MANTISSA:
00F54D  1  E6 AF                inc     FAC+3
00F54F  1  D0 06                bne     RTS12
00F551  1  E6 AE                inc     FAC+2
00F553  1  D0 02                bne     RTS12
00F555  1  E6 AD                inc     FAC+1
00F557  1               RTS12:
00F557  1  60                   rts
00F558  1               OVERFLOW:
00F558  1  A2 0A                ldx     #ERR_OVERFLOW
00F55A  1  4C 4E E2             jmp     ERROR
00F55D  1               ; ----------------------------------------------------------------------------
00F55D  1               ; SHIFT 1,X THRU 5,X RIGHT
00F55D  1               ; (A) = NEGATIVE OF SHIFT COUNT
00F55D  1               ; (X) = POINTER TO BYTES TO BE SHIFTED
00F55D  1               ;
00F55D  1               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00F55D  1               ; ----------------------------------------------------------------------------
00F55D  1               SHIFT_RIGHT1:
00F55D  1  A2 74                ldx     #RESULT-1
00F55F  1               SHIFT_RIGHT2:
00F55F  1  B4 03                ldy     3,x
00F561  1  84 B9                sty     FACEXTENSION
00F563  1  B4 02                ldy     2,x
00F565  1  94 03                sty     3,x
00F567  1  B4 01                ldy     1,x
00F569  1  94 02                sty     2,x
00F56B  1  A4 B2                ldy     SHIFTSIGNEXT
00F56D  1  94 01                sty     1,x
00F56F  1               ; ----------------------------------------------------------------------------
00F56F  1               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00F56F  1               ; ----------------------------------------------------------------------------
00F56F  1               SHIFT_RIGHT:
00F56F  1  69 08                adc     #$08
00F571  1  30 EC                bmi     SHIFT_RIGHT2
00F573  1  F0 EA                beq     SHIFT_RIGHT2
00F575  1  E9 08                sbc     #$08
00F577  1  A8                   tay
00F578  1  A5 B9                lda     FACEXTENSION
00F57A  1  B0 12                bcs     SHIFT_RIGHT5
00F57C  1               LB588:
00F57C  1  16 01                asl     1,x
00F57E  1  90 02                bcc     LB58E
00F580  1  F6 01                inc     1,x
00F582  1               LB58E:
00F582  1  76 01                ror     1,x
00F584  1  76 01                ror     1,x
00F586  1               ; ----------------------------------------------------------------------------
00F586  1               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00F586  1               ; ----------------------------------------------------------------------------
00F586  1               SHIFT_RIGHT4:
00F586  1  76 02                ror     2,x
00F588  1  76 03                ror     3,x
00F58A  1  6A                   ror     a
00F58B  1  C8                   iny
00F58C  1  D0 EE                bne     LB588
00F58E  1               SHIFT_RIGHT5:
00F58E  1  18                   clc
00F58F  1  60                   rts
00F590  1               ; ----------------------------------------------------------------------------
00F590  1               CON_ONE:
00F590  1  81 00 00 00          .byte   $81,$00,$00,$00
00F594  1               POLY_LOG:
00F594  1  02           		.byte	$02
00F595  1  80 19 56 62  		.byte   $80,$19,$56,$62
00F599  1  80 76 22 F3  		.byte   $80,$76,$22,$F3
00F59D  1  82 38 AA 40  		.byte   $82,$38,$AA,$40
00F5A1  1               CON_SQR_HALF:
00F5A1  1  80 35 04 F3  		.byte   $80,$35,$04,$F3
00F5A5  1               CON_SQR_TWO:
00F5A5  1  81 35 04 F3  		.byte   $81,$35,$04,$F3
00F5A9  1               CON_NEG_HALF:
00F5A9  1  80 80 00 00  		.byte   $80,$80,$00,$00
00F5AD  1               CON_LOG_TWO:
00F5AD  1  80 31 72 18  		.byte   $80,$31,$72,$18
00F5B1  1               ; ----------------------------------------------------------------------------
00F5B1  1               ; "LOG" FUNCTION
00F5B1  1               ; ----------------------------------------------------------------------------
00F5B1  1               LOG:
00F5B1  1  20 BE F7             jsr     SIGN
00F5B4  1  F0 02                beq     GIQ
00F5B6  1  10 03                bpl     LOG2
00F5B8  1               GIQ:
00F5B8  1  4C 7C EE             jmp     IQERR
00F5BB  1               LOG2:
00F5BB  1  A5 AC                lda     FAC
00F5BD  1  E9 7F                sbc     #$7F
00F5BF  1  48                   pha
00F5C0  1  A9 80                lda     #$80
00F5C2  1  85 AC                sta     FAC
00F5C4  1  A9 A1                lda     #<CON_SQR_HALF
00F5C6  1  A0 F5                ldy     #>CON_SQR_HALF
00F5C8  1  20 60 F4             jsr     FADD
00F5CB  1  A9 A5                lda     #<CON_SQR_TWO
00F5CD  1  A0 F5                ldy     #>CON_SQR_TWO
00F5CF  1  20 BE F6             jsr     FDIV
00F5D2  1  A9 90                lda     #<CON_ONE
00F5D4  1  A0 F5                ldy     #>CON_ONE
00F5D6  1  20 49 F4             jsr     FSUB
00F5D9  1  A9 94                lda     #<POLY_LOG
00F5DB  1  A0 F5                ldy     #>POLY_LOG
00F5DD  1  20 62 FB             jsr     POLYNOMIAL_ODD
00F5E0  1  A9 A9                lda     #<CON_NEG_HALF
00F5E2  1  A0 F5                ldy     #>CON_NEG_HALF
00F5E4  1  20 60 F4             jsr     FADD
00F5E7  1  68                   pla
00F5E8  1  20 06 F9             jsr     ADDACC
00F5EB  1  A9 AD                lda     #<CON_LOG_TWO
00F5ED  1  A0 F5                ldy     #>CON_LOG_TWO
00F5EF  1               ; ----------------------------------------------------------------------------
00F5EF  1               ; FAC = (Y,A) * FAC
00F5EF  1               ; ----------------------------------------------------------------------------
00F5EF  1               FMULT:
00F5EF  1  20 41 F6             jsr     LOAD_ARG_FROM_YA
00F5F2  1               ; ----------------------------------------------------------------------------
00F5F2  1               ; FAC = ARG * FAC
00F5F2  1               ; ----------------------------------------------------------------------------
00F5F2  1               FMULTT:
00F5F2  1  F0 4C                beq     L3903
00F5F4  1  20 67 F6             jsr     ADD_EXPONENTS
00F5F7  1  A9 00                lda     #$00
00F5F9  1  85 75                sta     RESULT
00F5FB  1  85 76                sta     RESULT+1
00F5FD  1  85 77                sta     RESULT+2
00F5FF  1  A5 B9                lda     FACEXTENSION
00F601  1  20 16 F6             jsr     MULTIPLY1
00F604  1  A5 AF                lda     FAC+3
00F606  1  20 16 F6             jsr     MULTIPLY1
00F609  1  A5 AE                lda     FAC+2
00F60B  1  20 16 F6             jsr     MULTIPLY1
00F60E  1  A5 AD                lda     FAC+1
00F610  1  20 1B F6             jsr     MULTIPLY2
00F613  1  4C 30 F7             jmp     COPY_RESULT_INTO_FAC
00F616  1               ; ----------------------------------------------------------------------------
00F616  1               ; MULTIPLY ARG BY (A) INTO RESULT
00F616  1               ; ----------------------------------------------------------------------------
00F616  1               MULTIPLY1:
00F616  1  D0 03                bne     MULTIPLY2
00F618  1  4C 5D F5             jmp     SHIFT_RIGHT1
00F61B  1               MULTIPLY2:
00F61B  1  4A                   lsr     a
00F61C  1  09 80                ora     #$80
00F61E  1               L38A7:
00F61E  1  A8                   tay
00F61F  1  90 13                bcc     L38C3
00F621  1  18                   clc
00F622  1  A5 77                lda     RESULT+2
00F624  1  65 B6                adc     ARG+3
00F626  1  85 77                sta     RESULT+2
00F628  1  A5 76                lda     RESULT+1
00F62A  1  65 B5                adc     ARG+2
00F62C  1  85 76                sta     RESULT+1
00F62E  1  A5 75                lda     RESULT
00F630  1  65 B4                adc     ARG+1
00F632  1  85 75                sta     RESULT
00F634  1               L38C3:
00F634  1  66 75                ror     RESULT
00F636  1  66 76                ror     RESULT+1
00F638  1               ; this seems to be a bad byte in the dump
00F638  1  66 77                ror     RESULT+2
00F63A  1  66 B9                ror     FACEXTENSION
00F63C  1  98                   tya
00F63D  1  4A                   lsr     a
00F63E  1  D0 DE                bne     L38A7
00F640  1               L3903:
00F640  1  60                   rts
00F641  1               ; ----------------------------------------------------------------------------
00F641  1               ; UNPACK NUMBER AT (Y,A) INTO ARG
00F641  1               ; ----------------------------------------------------------------------------
00F641  1               LOAD_ARG_FROM_YA:
00F641  1  85 71                sta     INDEX
00F643  1  84 72                sty     INDEX+1
00F645  1  A0 03                ldy     #BYTES_FP-1
00F647  1  B1 71                lda     (INDEX),y
00F649  1  85 B6                sta     ARG+3
00F64B  1  88                   dey
00F64C  1  B1 71                lda     (INDEX),y
00F64E  1  85 B5                sta     ARG+2
00F650  1  88                   dey
00F651  1  B1 71                lda     (INDEX),y
00F653  1  85 B7                sta     ARGSIGN
00F655  1  45 B0                eor     FACSIGN
00F657  1  85 B8                sta     SGNCPR
00F659  1  A5 B7                lda     ARGSIGN
00F65B  1  09 80                ora     #$80
00F65D  1  85 B4                sta     ARG+1
00F65F  1  88                   dey
00F660  1  B1 71                lda     (INDEX),y
00F662  1  85 B3                sta     ARG
00F664  1  A5 AC                lda     FAC
00F666  1  60                   rts
00F667  1               ; ----------------------------------------------------------------------------
00F667  1               ; ADD EXPONENTS OF ARG AND FAC
00F667  1               ; (CALLED BY FMULT AND FDIV)
00F667  1               ;
00F667  1               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00F667  1               ; ----------------------------------------------------------------------------
00F667  1               ADD_EXPONENTS:
00F667  1  A5 B3                lda     ARG
00F669  1               ADD_EXPONENTS1:
00F669  1  F0 1F                beq     ZERO
00F66B  1  18                   clc
00F66C  1  65 AC                adc     FAC
00F66E  1  90 04                bcc     L393C
00F670  1  30 1D                bmi     JOV
00F672  1  18                   clc
00F673  1  2C                   .byte   $2C
00F674  1               L393C:
00F674  1  10 14                bpl     ZERO
00F676  1  69 80                adc     #$80
00F678  1  85 AC                sta     FAC
00F67A  1  D0 03                bne     L3947
00F67C  1  4C E9 F4             jmp     STA_IN_FAC_SIGN
00F67F  1               L3947:
00F67F  1  A5 B8                lda     SGNCPR
00F681  1  85 B0                sta     FACSIGN
00F683  1  60                   rts
00F684  1               ; ----------------------------------------------------------------------------
00F684  1               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00F684  1               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00F684  1               ; CALLED FROM "EXP" FUNCTION
00F684  1               ; ----------------------------------------------------------------------------
00F684  1               OUTOFRNG:
00F684  1  A5 B0                lda     FACSIGN
00F686  1  49 FF                eor     #$FF
00F688  1  30 05                bmi     JOV
00F68A  1               ; ----------------------------------------------------------------------------
00F68A  1               ; POP RETURN ADDRESS AND SET FAC=0
00F68A  1               ; ----------------------------------------------------------------------------
00F68A  1               ZERO:
00F68A  1  68                   pla
00F68B  1  68                   pla
00F68C  1  4C E5 F4             jmp     ZERO_FAC
00F68F  1               JOV:
00F68F  1  4C 58 F5             jmp     OVERFLOW
00F692  1               ; ----------------------------------------------------------------------------
00F692  1               ; MULTIPLY FAC BY 10
00F692  1               ; ----------------------------------------------------------------------------
00F692  1               MUL10:
00F692  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00F695  1  AA                   tax
00F696  1  F0 10                beq     L3970
00F698  1  18                   clc
00F699  1  69 02                adc     #$02
00F69B  1  B0 F2                bcs     JOV
00F69D  1  A2 00                ldx     #$00
00F69F  1  86 B8                stx     SGNCPR
00F6A1  1  20 70 F4             jsr     FADD2
00F6A4  1  E6 AC                inc     FAC
00F6A6  1  F0 E7                beq     JOV
00F6A8  1               L3970:
00F6A8  1  60                   rts
00F6A9  1               ; ----------------------------------------------------------------------------
00F6A9  1               CONTEN:
00F6A9  1  84 20 00 00          .byte   $84,$20,$00,$00
00F6AD  1               ; ----------------------------------------------------------------------------
00F6AD  1               ; DIVIDE FAC BY 10
00F6AD  1               ; ----------------------------------------------------------------------------
00F6AD  1               DIV10:
00F6AD  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00F6B0  1  A9 A9                lda     #<CONTEN
00F6B2  1  A0 F6                ldy     #>CONTEN
00F6B4  1  A2 00                ldx     #$00
00F6B6  1               ; ----------------------------------------------------------------------------
00F6B6  1               ; FAC = ARG / (Y,A)
00F6B6  1               ; ----------------------------------------------------------------------------
00F6B6  1               DIV:
00F6B6  1  86 B8                stx     SGNCPR
00F6B8  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00F6BB  1  4C C1 F6             jmp     FDIVT
00F6BE  1               ; ----------------------------------------------------------------------------
00F6BE  1               ; FAC = (Y,A) / FAC
00F6BE  1               ; ----------------------------------------------------------------------------
00F6BE  1               FDIV:
00F6BE  1  20 41 F6             jsr     LOAD_ARG_FROM_YA
00F6C1  1               ; ----------------------------------------------------------------------------
00F6C1  1               ; FAC = ARG / FAC
00F6C1  1               ; ----------------------------------------------------------------------------
00F6C1  1               FDIVT:
00F6C1  1  F0 68                beq     L3A02
00F6C3  1  20 AE F7             jsr     ROUND_FAC
00F6C6  1  A9 00                lda     #$00
00F6C8  1  38                   sec
00F6C9  1  E5 AC                sbc     FAC
00F6CB  1  85 AC                sta     FAC
00F6CD  1  20 67 F6             jsr     ADD_EXPONENTS
00F6D0  1  E6 AC                inc     FAC
00F6D2  1  F0 BB                beq     JOV
00F6D4  1  A2 FD                ldx     #-MANTISSA_BYTES
00F6D6  1  A9 01                lda     #$01
00F6D8  1               L39A1:
00F6D8  1  A4 B4                ldy     ARG+1
00F6DA  1  C4 AD                cpy     FAC+1
00F6DC  1  D0 0A                bne     L39B7
00F6DE  1  A4 B5                ldy     ARG+2
00F6E0  1  C4 AE                cpy     FAC+2
00F6E2  1  D0 04                bne     L39B7
00F6E4  1  A4 B6                ldy     ARG+3
00F6E6  1  C4 AF                cpy     FAC+3
00F6E8  1               L39B7:
00F6E8  1  08                   php
00F6E9  1  2A                   rol     a
00F6EA  1  90 09                bcc     L39C4
00F6EC  1  E8                   inx
00F6ED  1  95 77                sta     RESULT_LAST-1,x
00F6EF  1  F0 2A                beq     L39F2
00F6F1  1  10 2C                bpl     L39F6
00F6F3  1  A9 01                lda     #$01
00F6F5  1               L39C4:
00F6F5  1  28                   plp
00F6F6  1  B0 0C                bcs     L39D5
00F6F8  1               L39C7:
00F6F8  1  06 B6                asl     ARG_LAST
00F6FA  1  26 B5                rol     ARG+2
00F6FC  1  26 B4                rol     ARG+1
00F6FE  1  B0 E8                bcs     L39B7
00F700  1  30 D6                bmi     L39A1
00F702  1  10 E4                bpl     L39B7
00F704  1               L39D5:
00F704  1  A8                   tay
00F705  1  A5 B6                lda     ARG+3
00F707  1  E5 AF                sbc     FAC+3
00F709  1  85 B6                sta     ARG+3
00F70B  1  A5 B5                lda     ARG+2
00F70D  1  E5 AE                sbc     FAC+2
00F70F  1  85 B5                sta     ARG+2
00F711  1  A5 B4                lda     ARG+1
00F713  1  E5 AD                sbc     FAC+1
00F715  1  85 B4                sta     ARG+1
00F717  1  98                   tya
00F718  1  4C F8 F6             jmp     L39C7
00F71B  1               L39F2:
00F71B  1  A9 40                lda     #$40
00F71D  1  D0 D6                bne     L39C4
00F71F  1               L39F6:
00F71F  1  0A                   asl     a
00F720  1  0A                   asl     a
00F721  1  0A                   asl     a
00F722  1  0A                   asl     a
00F723  1  0A                   asl     a
00F724  1  0A                   asl     a
00F725  1  85 B9                sta     FACEXTENSION
00F727  1  28                   plp
00F728  1  4C 30 F7             jmp     COPY_RESULT_INTO_FAC
00F72B  1               L3A02:
00F72B  1  A2 14                ldx     #ERR_ZERODIV
00F72D  1  4C 4E E2             jmp     ERROR
00F730  1               ; ----------------------------------------------------------------------------
00F730  1               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
00F730  1               ; ----------------------------------------------------------------------------
00F730  1               COPY_RESULT_INTO_FAC:
00F730  1  A5 75                lda     RESULT
00F732  1  85 AD                sta     FAC+1
00F734  1  A5 76                lda     RESULT+1
00F736  1  85 AE                sta     FAC+2
00F738  1  A5 77                lda     RESULT+2
00F73A  1  85 AF                sta     FAC+3
00F73C  1  4C C9 F4             jmp     NORMALIZE_FAC2
00F73F  1               ; ----------------------------------------------------------------------------
00F73F  1               ; UNPACK (Y,A) INTO FAC
00F73F  1               ; ----------------------------------------------------------------------------
00F73F  1               LOAD_FAC_FROM_YA:
00F73F  1  85 71                sta     INDEX
00F741  1  84 72                sty     INDEX+1
00F743  1  A0 03                ldy     #MANTISSA_BYTES
00F745  1  B1 71                lda     (INDEX),y
00F747  1  85 AF                sta     FAC+3
00F749  1  88                   dey
00F74A  1  B1 71                lda     (INDEX),y
00F74C  1  85 AE                sta     FAC+2
00F74E  1  88                   dey
00F74F  1  B1 71                lda     (INDEX),y
00F751  1  85 B0                sta     FACSIGN
00F753  1  09 80                ora     #$80
00F755  1  85 AD                sta     FAC+1
00F757  1  88                   dey
00F758  1  B1 71                lda     (INDEX),y
00F75A  1  85 AC                sta     FAC
00F75C  1  84 B9                sty     FACEXTENSION
00F75E  1  60                   rts
00F75F  1               ; ----------------------------------------------------------------------------
00F75F  1               ; ROUND FAC, STORE IN TEMP2
00F75F  1               ; ----------------------------------------------------------------------------
00F75F  1               STORE_FAC_IN_TEMP2_ROUNDED:
00F75F  1  A2 A8                ldx     #TEMP2
00F761  1  2C                   .byte   $2C
00F762  1               ; ----------------------------------------------------------------------------
00F762  1               ; ROUND FAC, STORE IN TEMP1
00F762  1               ; ----------------------------------------------------------------------------
00F762  1               STORE_FAC_IN_TEMP1_ROUNDED:
00F762  1  A2 A4                ldx     #TEMP1X
00F764  1  A0 00                ldy     #$00
00F766  1  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
00F768  1               ; ----------------------------------------------------------------------------
00F768  1               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
00F768  1               ; ----------------------------------------------------------------------------
00F768  1               SETFOR:
00F768  1  A6 97                ldx     FORPNT
00F76A  1  A4 98                ldy     FORPNT+1
00F76C  1               ; ----------------------------------------------------------------------------
00F76C  1               ; ROUND FAC, AND STORE AT (Y,X)
00F76C  1               ; ----------------------------------------------------------------------------
00F76C  1               STORE_FAC_AT_YX_ROUNDED:
00F76C  1  20 AE F7             jsr     ROUND_FAC
00F76F  1  86 71                stx     INDEX
00F771  1  84 72                sty     INDEX+1
00F773  1  A0 03                ldy     #MANTISSA_BYTES
00F775  1  A5 AF                lda     FAC+3
00F777  1  91 71                sta     (INDEX),y
00F779  1  88                   dey
00F77A  1  A5 AE                lda     FAC+2
00F77C  1  91 71                sta     (INDEX),y
00F77E  1  88                   dey
00F77F  1  A5 B0                lda     FACSIGN
00F781  1  09 7F                ora     #$7F
00F783  1  25 AD                and     FAC+1
00F785  1  91 71                sta     (INDEX),y
00F787  1  88                   dey
00F788  1  A5 AC                lda     FAC
00F78A  1  91 71                sta     (INDEX),y
00F78C  1  84 B9                sty     FACEXTENSION
00F78E  1  60                   rts
00F78F  1               ; ----------------------------------------------------------------------------
00F78F  1               ; COPY ARG INTO FAC
00F78F  1               ; ----------------------------------------------------------------------------
00F78F  1               COPY_ARG_TO_FAC:
00F78F  1  A5 B7                lda     ARGSIGN
00F791  1               MFA:
00F791  1  85 B0                sta     FACSIGN
00F793  1  A2 04                ldx     #BYTES_FP
00F795  1               L3A7A:
00F795  1  B5 B2                lda     SHIFTSIGNEXT,x
00F797  1  95 AB                sta     EXPSGN,x
00F799  1  CA                   dex
00F79A  1  D0 F9                bne     L3A7A
00F79C  1  86 B9                stx     FACEXTENSION
00F79E  1  60                   rts
00F79F  1               ; ----------------------------------------------------------------------------
00F79F  1               ; ROUND FAC AND COPY TO ARG
00F79F  1               ; ----------------------------------------------------------------------------
00F79F  1               COPY_FAC_TO_ARG_ROUNDED:
00F79F  1  20 AE F7             jsr     ROUND_FAC
00F7A2  1               MAF:
00F7A2  1  A2 05                ldx     #BYTES_FP+1
00F7A4  1               L3A89:
00F7A4  1  B5 AB                lda     EXPSGN,x
00F7A6  1  95 B2                sta     SHIFTSIGNEXT,x
00F7A8  1  CA                   dex
00F7A9  1  D0 F9                bne     L3A89
00F7AB  1  86 B9                stx     FACEXTENSION
00F7AD  1               RTS14:
00F7AD  1  60                   rts
00F7AE  1               ; ----------------------------------------------------------------------------
00F7AE  1               ; ROUND FAC USING EXTENSION BYTE
00F7AE  1               ; ----------------------------------------------------------------------------
00F7AE  1               ROUND_FAC:
00F7AE  1  A5 AC                lda     FAC
00F7B0  1  F0 FB                beq     RTS14
00F7B2  1  06 B9                asl     FACEXTENSION
00F7B4  1  90 F7                bcc     RTS14
00F7B6  1               ; ----------------------------------------------------------------------------
00F7B6  1               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00F7B6  1               ; ----------------------------------------------------------------------------
00F7B6  1               INCREMENT_MANTISSA:
00F7B6  1  20 4D F5             jsr     INCREMENT_FAC_MANTISSA
00F7B9  1  D0 F2                bne     RTS14
00F7BB  1  4C 1E F5             jmp     NORMALIZE_FAC6
00F7BE  1               ; ----------------------------------------------------------------------------
00F7BE  1               ; TEST FAC FOR ZERO AND SIGN
00F7BE  1               ;
00F7BE  1               ; FAC > 0, RETURN +1
00F7BE  1               ; FAC = 0, RETURN  0
00F7BE  1               ; FAC < 0, RETURN -1
00F7BE  1               ; ----------------------------------------------------------------------------
00F7BE  1               SIGN:
00F7BE  1  A5 AC                lda     FAC
00F7C0  1  F0 09                beq     RTS15
00F7C2  1               L3AA7:
00F7C2  1  A5 B0                lda     FACSIGN
00F7C4  1               SIGN2:
00F7C4  1  2A                   rol     a
00F7C5  1  A9 FF                lda     #$FF
00F7C7  1  B0 02                bcs     RTS15
00F7C9  1  A9 01                lda     #$01
00F7CB  1               RTS15:
00F7CB  1  60                   rts
00F7CC  1               ; ----------------------------------------------------------------------------
00F7CC  1               ; "SGN" FUNCTION
00F7CC  1               ; ----------------------------------------------------------------------------
00F7CC  1               SGN:
00F7CC  1  20 BE F7             jsr     SIGN
00F7CF  1               ; ----------------------------------------------------------------------------
00F7CF  1               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00F7CF  1               ; ----------------------------------------------------------------------------
00F7CF  1               FLOAT:
00F7CF  1  85 AD                sta     FAC+1
00F7D1  1  A9 00                lda     #$00
00F7D3  1  85 AE                sta     FAC+2
00F7D5  1  A2 88                ldx     #$88
00F7D7  1               ; ----------------------------------------------------------------------------
00F7D7  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00F7D7  1               ; (X) = EXPONENT
00F7D7  1               ; ----------------------------------------------------------------------------
00F7D7  1               FLOAT1:
00F7D7  1  A5 AD                lda     FAC+1
00F7D9  1  49 FF                eor     #$FF
00F7DB  1  2A                   rol     a
00F7DC  1               ; ----------------------------------------------------------------------------
00F7DC  1               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00F7DC  1               ; (X) = EXPONENT
00F7DC  1               ; C=0 TO MAKE VALUE NEGATIVE
00F7DC  1               ; C=1 TO MAKE VALUE POSITIVE
00F7DC  1               ; ----------------------------------------------------------------------------
00F7DC  1               FLOAT2:
00F7DC  1  A9 00                lda     #$00
00F7DE  1  85 AF                sta     FAC+3
00F7E0  1  86 AC                stx     FAC
00F7E2  1  85 B9                sta     FACEXTENSION
00F7E4  1  85 B0                sta     FACSIGN
00F7E6  1  4C C4 F4             jmp     NORMALIZE_FAC1
00F7E9  1               ; ----------------------------------------------------------------------------
00F7E9  1               ; "ABS" FUNCTION
00F7E9  1               ; ----------------------------------------------------------------------------
00F7E9  1               ABS:
00F7E9  1  46 B0                lsr     FACSIGN
00F7EB  1  60                   rts
00F7EC  1               ; ----------------------------------------------------------------------------
00F7EC  1               ; COMPARE FAC WITH PACKED # AT (Y,A)
00F7EC  1               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00F7EC  1               ; ----------------------------------------------------------------------------
00F7EC  1               FCOMP:
00F7EC  1  85 73                sta     DEST
00F7EE  1               ; ----------------------------------------------------------------------------
00F7EE  1               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00F7EE  1               ; "DEST" ALREADY SET UP
00F7EE  1               ; ----------------------------------------------------------------------------
00F7EE  1               FCOMP2:
00F7EE  1  84 74                sty     DEST+1
00F7F0  1  A0 00                ldy     #$00
00F7F2  1  B1 73                lda     (DEST),y
00F7F4  1  C8                   iny
00F7F5  1  AA                   tax
00F7F6  1  F0 C6                beq     SIGN
00F7F8  1  B1 73                lda     (DEST),y
00F7FA  1  45 B0                eor     FACSIGN
00F7FC  1  30 C4                bmi     L3AA7
00F7FE  1  E4 AC                cpx     FAC
00F800  1  D0 1A                bne     L3B0A
00F802  1  B1 73                lda     (DEST),y
00F804  1  09 80                ora     #$80
00F806  1  C5 AD                cmp     FAC+1
00F808  1  D0 12                bne     L3B0A
00F80A  1  C8                   iny
00F80B  1  B1 73                lda     (DEST),y
00F80D  1  C5 AE                cmp     FAC+2
00F80F  1  D0 0B                bne     L3B0A
00F811  1  C8                   iny
00F812  1  A9 7F                lda     #$7F
00F814  1  C5 B9                cmp     FACEXTENSION
00F816  1  B1 73                lda     (DEST),y
00F818  1  E5 AF                sbc     FAC_LAST
00F81A  1  F0 28                beq     L3B32
00F81C  1               L3B0A:
00F81C  1  A5 B0                lda     FACSIGN
00F81E  1  90 02                bcc     L3B10
00F820  1  49 FF                eor     #$FF
00F822  1               L3B10:
00F822  1  4C C4 F7             jmp     SIGN2
00F825  1               ; ----------------------------------------------------------------------------
00F825  1               ; QUICK INTEGER FUNCTION
00F825  1               ;
00F825  1               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00F825  1               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00F825  1               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00F825  1               ;
00F825  1               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00F825  1               ; ----------------------------------------------------------------------------
00F825  1               QINT:
00F825  1  A5 AC                lda     FAC
00F827  1  F0 4A                beq     QINT3
00F829  1  38                   sec
00F82A  1  E9 98                sbc     #120+8*BYTES_FP
00F82C  1  24 B0                bit     FACSIGN
00F82E  1  10 09                bpl     L3B27
00F830  1  AA                   tax
00F831  1  A9 FF                lda     #$FF
00F833  1  85 B2                sta     SHIFTSIGNEXT
00F835  1  20 31 F5             jsr     COMPLEMENT_FAC_MANTISSA
00F838  1  8A                   txa
00F839  1               L3B27:
00F839  1  A2 AC                ldx     #FAC
00F83B  1  C9 F9                cmp     #$F9
00F83D  1  10 06                bpl     QINT2
00F83F  1  20 6F F5             jsr     SHIFT_RIGHT
00F842  1  84 B2                sty     SHIFTSIGNEXT
00F844  1               L3B32:
00F844  1  60                   rts
00F845  1               QINT2:
00F845  1  A8                   tay
00F846  1  A5 B0                lda     FACSIGN
00F848  1  29 80                and     #$80
00F84A  1  46 AD                lsr     FAC+1
00F84C  1  05 AD                ora     FAC+1
00F84E  1  85 AD                sta     FAC+1
00F850  1  20 86 F5             jsr     SHIFT_RIGHT4
00F853  1  84 B2                sty     SHIFTSIGNEXT
00F855  1  60                   rts
00F856  1               ; ----------------------------------------------------------------------------
00F856  1               ; "INT" FUNCTION
00F856  1               ;
00F856  1               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00F856  1               ; AND THEN REFLOATS THE INTEGER.
00F856  1               ; ----------------------------------------------------------------------------
00F856  1               INT:
00F856  1  A5 AC                lda     FAC
00F858  1  C9 98                cmp     #120+8*BYTES_FP
00F85A  1  B0 1E                bcs     RTS17
00F85C  1  20 25 F8             jsr     QINT
00F85F  1  84 B9                sty     FACEXTENSION
00F861  1  A5 B0                lda     FACSIGN
00F863  1  84 B0                sty     FACSIGN
00F865  1  49 80                eor     #$80
00F867  1  2A                   rol     a
00F868  1  A9 98                lda     #120+8*BYTES_FP
00F86A  1  85 AC                sta     FAC
00F86C  1  A5 AF                lda     FAC_LAST
00F86E  1  85 5B                sta     CHARAC
00F870  1  4C C4 F4             jmp     NORMALIZE_FAC1
00F873  1               QINT3:
00F873  1  85 AD                sta     FAC+1
00F875  1  85 AE                sta     FAC+2
00F877  1  85 AF                sta     FAC+3
00F879  1  A8                   tay
00F87A  1               RTS17:
00F87A  1  60                   rts
00F87B  1               ; ----------------------------------------------------------------------------
00F87B  1               ; CONVERT STRING TO FP VALUE IN FAC
00F87B  1               ;
00F87B  1               ; STRING POINTED TO BY TXTPTR
00F87B  1               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00F87B  1               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00F87B  1               ; ----------------------------------------------------------------------------
00F87B  1               FIN:
00F87B  1  A0 00                ldy     #$00
00F87D  1  A2 09                ldx     #SERLEN-TMPEXP
00F87F  1               L3B6F:
00F87F  1  94 A8                sty     TMPEXP,x
00F881  1  CA                   dex
00F882  1  10 FB                bpl     L3B6F
00F884  1  90 0F                bcc     FIN2
00F886  1  C9 2D                cmp     #$2D
00F888  1  D0 04                bne     L3B7E
00F88A  1  86 B1                stx     SERLEN
00F88C  1  F0 04                beq     FIN1
00F88E  1               L3B7E:
00F88E  1  C9 2B                cmp     #$2B
00F890  1  D0 05                bne     FIN3
00F892  1               FIN1:
00F892  1  20 BC 00             jsr     CHRGET
00F895  1               FIN2:
00F895  1  90 5B                bcc     FIN9
00F897  1               FIN3:
00F897  1  C9 2E                cmp     #$2E
00F899  1  F0 2E                beq     FIN10
00F89B  1  C9 45                cmp     #$45
00F89D  1  D0 30                bne     FIN7
00F89F  1  20 BC 00             jsr     CHRGET
00F8A2  1  90 17                bcc     FIN5
00F8A4  1  C9 A4                cmp     #TOKEN_MINUS
00F8A6  1  F0 0E                beq     L3BA6
00F8A8  1  C9 2D                cmp     #$2D
00F8AA  1  F0 0A                beq     L3BA6
00F8AC  1  C9 A3                cmp     #TOKEN_PLUS
00F8AE  1  F0 08                beq     FIN4
00F8B0  1  C9 2B                cmp     #$2B
00F8B2  1  F0 04                beq     FIN4
00F8B4  1  D0 07                bne     FIN6
00F8B6  1               L3BA6:
00F8B6  1  66 AB                ror     EXPSGN
00F8B8  1               FIN4:
00F8B8  1  20 BC 00             jsr     CHRGET
00F8BB  1               FIN5:
00F8BB  1  90 5C                bcc     GETEXP
00F8BD  1               FIN6:
00F8BD  1  24 AB                bit     EXPSGN
00F8BF  1  10 0E                bpl     FIN7
00F8C1  1  A9 00                lda     #$00
00F8C3  1  38                   sec
00F8C4  1  E5 A9                sbc     EXPON
00F8C6  1  4C D1 F8             jmp     FIN8
00F8C9  1               ; ----------------------------------------------------------------------------
00F8C9  1               ; FOUND A DECIMAL POINT
00F8C9  1               ; ----------------------------------------------------------------------------
00F8C9  1               FIN10:
00F8C9  1  66 AA                ror     LOWTR
00F8CB  1  24 AA                bit     LOWTR
00F8CD  1  50 C3                bvc     FIN1
00F8CF  1               ; ----------------------------------------------------------------------------
00F8CF  1               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00F8CF  1               ; ----------------------------------------------------------------------------
00F8CF  1               FIN7:
00F8CF  1  A5 A9                lda     EXPON
00F8D1  1               FIN8:
00F8D1  1  38                   sec
00F8D2  1  E5 A8                sbc     INDX
00F8D4  1  85 A9                sta     EXPON
00F8D6  1  F0 12                beq     L3BEE
00F8D8  1  10 09                bpl     L3BE7
00F8DA  1               L3BDE:
00F8DA  1  20 AD F6             jsr     DIV10
00F8DD  1  E6 A9                inc     EXPON
00F8DF  1  D0 F9                bne     L3BDE
00F8E1  1  F0 07                beq     L3BEE
00F8E3  1               L3BE7:
00F8E3  1  20 92 F6             jsr     MUL10
00F8E6  1  C6 A9                dec     EXPON
00F8E8  1  D0 F9                bne     L3BE7
00F8EA  1               L3BEE:
00F8EA  1  A5 B1                lda     SERLEN
00F8EC  1  30 01                bmi     L3BF3
00F8EE  1  60                   rts
00F8EF  1               L3BF3:
00F8EF  1  4C E3 FA             jmp     NEGOP
00F8F2  1               ; ----------------------------------------------------------------------------
00F8F2  1               ; ACCUMULATE A DIGIT INTO FAC
00F8F2  1               ; ----------------------------------------------------------------------------
00F8F2  1               FIN9:
00F8F2  1  48                   pha
00F8F3  1  24 AA                bit     LOWTR
00F8F5  1  10 02                bpl     L3BFD
00F8F7  1  E6 A8                inc     INDX
00F8F9  1               L3BFD:
00F8F9  1  20 92 F6             jsr     MUL10
00F8FC  1  68                   pla
00F8FD  1  38                   sec
00F8FE  1  E9 30                sbc     #$30
00F900  1  20 06 F9             jsr     ADDACC
00F903  1  4C 92 F8             jmp     FIN1
00F906  1               ; ----------------------------------------------------------------------------
00F906  1               ; ADD (A) TO FAC
00F906  1               ; ----------------------------------------------------------------------------
00F906  1               ADDACC:
00F906  1  48                   pha
00F907  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00F90A  1  68                   pla
00F90B  1  20 CF F7             jsr     FLOAT
00F90E  1  A5 B7                lda     ARGSIGN
00F910  1  45 B0                eor     FACSIGN
00F912  1  85 B8                sta     SGNCPR
00F914  1  A6 AC                ldx     FAC
00F916  1  4C 63 F4             jmp     FADDT
00F919  1               ; ----------------------------------------------------------------------------
00F919  1               ; ACCUMULATE DIGIT OF EXPONENT
00F919  1               ; ----------------------------------------------------------------------------
00F919  1               GETEXP:
00F919  1  A5 A9                lda     EXPON
00F91B  1  C9 0A                cmp     #MAX_EXPON
00F91D  1  90 09                bcc     L3C2C
00F91F  1  A9 64                lda     #$64
00F921  1  24 AB                bit     EXPSGN
00F923  1  30 11                bmi     L3C3A
00F925  1  4C 58 F5             jmp     OVERFLOW
00F928  1               L3C2C:
00F928  1  0A                   asl     a
00F929  1  0A                   asl     a
00F92A  1  18                   clc
00F92B  1  65 A9                adc     EXPON
00F92D  1  0A                   asl     a
00F92E  1  18                   clc
00F92F  1  A0 00                ldy     #$00
00F931  1  71 C3                adc     (TXTPTR),y
00F933  1  38                   sec
00F934  1  E9 30                sbc     #$30
00F936  1               L3C3A:
00F936  1  85 A9                sta     EXPON
00F938  1  4C B8 F8             jmp     FIN4
00F93B  1               ; ----------------------------------------------------------------------------
00F93B  1               ; these values are /1000 of what the labels say
00F93B  1               CON_99999999_9:
00F93B  1  91 43 4F F8          .byte   $91,$43,$4F,$F8
00F93F  1               CON_999999999:
00F93F  1  94 74 23 F7  		.byte   $94,$74,$23,$F7
00F943  1               CON_BILLION:
00F943  1  94 74 24 00          .byte   $94,$74,$24,$00
00F947  1               ; ----------------------------------------------------------------------------
00F947  1               ; PRINT "IN <LINE #>"
00F947  1               ; ----------------------------------------------------------------------------
00F947  1               INPRT:
00F947  1  A9 8D                lda     #<QT_IN
00F949  1  A0 E1                ldy     #>QT_IN
00F94B  1  20 5F F9             jsr     GOSTROUT2
00F94E  1  A5 88                lda     CURLIN+1
00F950  1  A6 87                ldx     CURLIN
00F952  1               ; ----------------------------------------------------------------------------
00F952  1               ; PRINT A,X AS DECIMAL INTEGER
00F952  1               ; ----------------------------------------------------------------------------
00F952  1               LINPRT:
00F952  1  85 AD                sta     FAC+1
00F954  1  86 AE                stx     FAC+2
00F956  1  A2 90                ldx     #$90
00F958  1  38                   sec
00F959  1  20 DC F7             jsr     FLOAT2
00F95C  1  20 62 F9             jsr     FOUT
00F95F  1               GOSTROUT2:
00F95F  1  4C B7 E8             jmp     STROUT
00F962  1               ; ----------------------------------------------------------------------------
00F962  1               ; CONVERT (FAC) TO STRING STARTING AT STACK
00F962  1               ; RETURN WITH (Y,A) POINTING AT STRING
00F962  1               ; ----------------------------------------------------------------------------
00F962  1               FOUT:
00F962  1  A0 01                ldy     #$01
00F964  1               ; ----------------------------------------------------------------------------
00F964  1               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
00F964  1               ; SO THAT RESULT STRING STARTS AT STACK-1
00F964  1               ; (THIS IS USED AS A FLAG)
00F964  1               ; ----------------------------------------------------------------------------
00F964  1               FOUT1:
00F964  1  A9 20                lda     #$20
00F966  1  24 B0                bit     FACSIGN
00F968  1  10 02                bpl     L3C73
00F96A  1  A9 2D                lda     #$2D
00F96C  1               L3C73:
00F96C  1  99 FF 00             sta     $FF,y
00F96F  1  85 B0                sta     FACSIGN
00F971  1  84 BA                sty     STRNG2
00F973  1  C8                   iny
00F974  1  A9 30                lda     #$30
00F976  1  A6 AC                ldx     FAC
00F978  1  D0 03                bne     L3C84
00F97A  1  4C 7D FA             jmp     FOUT4
00F97D  1               L3C84:
00F97D  1  A9 00                lda     #$00
00F97F  1  E0 80                cpx     #$80
00F981  1  F0 02                beq     L3C8C
00F983  1  B0 09                bcs     L3C95
00F985  1               L3C8C:
00F985  1  A9 43                lda     #<CON_BILLION
00F987  1  A0 F9                ldy     #>CON_BILLION
00F989  1  20 EF F5             jsr     FMULT
00F98C  1  A9 FA                lda     #-6 ; exponent adjustment
00F98E  1               L3C95:
00F98E  1  85 A8                sta     INDX
00F990  1               ; ----------------------------------------------------------------------------
00F990  1               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00F990  1               ; ----------------------------------------------------------------------------
00F990  1               L3C97:
00F990  1  A9 3F                lda     #<CON_999999999
00F992  1  A0 F9                ldy     #>CON_999999999
00F994  1  20 EC F7             jsr     FCOMP
00F997  1  F0 1E                beq     L3CBE
00F999  1  10 12                bpl     L3CB4
00F99B  1               L3CA2:
00F99B  1  A9 3B                lda     #<CON_99999999_9
00F99D  1  A0 F9                ldy     #>CON_99999999_9
00F99F  1  20 EC F7             jsr     FCOMP
00F9A2  1  F0 02                beq     L3CAD
00F9A4  1  10 0E                bpl     L3CBB
00F9A6  1               L3CAD:
00F9A6  1  20 92 F6             jsr     MUL10
00F9A9  1  C6 A8                dec     INDX
00F9AB  1  D0 EE                bne     L3CA2
00F9AD  1               L3CB4:
00F9AD  1  20 AD F6             jsr     DIV10
00F9B0  1  E6 A8                inc     INDX
00F9B2  1  D0 DC                bne     L3C97
00F9B4  1               L3CBB:
00F9B4  1  20 42 F4             jsr     FADDH
00F9B7  1               L3CBE:
00F9B7  1  20 25 F8             jsr     QINT
00F9BA  1               ; ----------------------------------------------------------------------------
00F9BA  1               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00F9BA  1               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00F9BA  1               ;
00F9BA  1               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00F9BA  1               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00F9BA  1               ; ----------------------------------------------------------------------------
00F9BA  1  A2 01                ldx     #$01
00F9BC  1  A5 A8                lda     INDX
00F9BE  1  18                   clc
00F9BF  1  69 07                adc     #3*BYTES_FP-5
00F9C1  1  30 09                bmi     L3CD3
00F9C3  1  C9 08                cmp     #3*BYTES_FP-4
00F9C5  1  B0 06                bcs     L3CD4
00F9C7  1  69 FF                adc     #$FF
00F9C9  1  AA                   tax
00F9CA  1  A9 02                lda     #$02
00F9CC  1               L3CD3:
00F9CC  1  38                   sec
00F9CD  1               L3CD4:
00F9CD  1  E9 02                sbc     #$02
00F9CF  1  85 A9                sta     EXPON
00F9D1  1  86 A8                stx     INDX
00F9D3  1  8A                   txa
00F9D4  1  F0 02                beq     L3CDF
00F9D6  1  10 13                bpl     L3CF2
00F9D8  1               L3CDF:
00F9D8  1  A4 BA                ldy     STRNG2
00F9DA  1  A9 2E                lda     #$2E
00F9DC  1  C8                   iny
00F9DD  1  99 FF 00             sta     $FF,y
00F9E0  1  8A                   txa
00F9E1  1  F0 06                beq     L3CF0
00F9E3  1  A9 30                lda     #$30
00F9E5  1  C8                   iny
00F9E6  1  99 FF 00             sta     $FF,y
00F9E9  1               L3CF0:
00F9E9  1  84 BA                sty     STRNG2
00F9EB  1               ; ----------------------------------------------------------------------------
00F9EB  1               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
00F9EB  1               ; ----------------------------------------------------------------------------
00F9EB  1               L3CF2:
00F9EB  1  A0 00                ldy     #$00
00F9ED  1  A2 80                ldx     #$80
00F9EF  1               L3CF6:
00F9EF  1  A5 AF                lda     FAC_LAST
00F9F1  1  18                   clc
00F9F2  1  79 90 FA             adc     DECTBL+2,y
00F9F5  1  85 AF                sta     FAC+3
00F9F7  1  A5 AE                lda     FAC+2
00F9F9  1  79 8F FA             adc     DECTBL+1,y
00F9FC  1  85 AE                sta     FAC+2
00F9FE  1  A5 AD                lda     FAC+1
00FA00  1  79 8E FA             adc     DECTBL,y
00FA03  1  85 AD                sta     FAC+1
00FA05  1  E8                   inx
00FA06  1  B0 04                bcs     L3D1A
00FA08  1  10 E5                bpl     L3CF6
00FA0A  1  30 02                bmi     L3D1C
00FA0C  1               L3D1A:
00FA0C  1  30 E1                bmi     L3CF6
00FA0E  1               L3D1C:
00FA0E  1  8A                   txa
00FA0F  1  90 04                bcc     L3D23
00FA11  1  49 FF                eor     #$FF
00FA13  1  69 0A                adc     #$0A
00FA15  1               L3D23:
00FA15  1  69 2F                adc     #$2F
00FA17  1  C8                   iny
00FA18  1  C8                   iny
00FA19  1  C8                   iny
00FA1A  1  84 95                sty     VARPNT
00FA1C  1  A4 BA                ldy     STRNG2
00FA1E  1  C8                   iny
00FA1F  1  AA                   tax
00FA20  1  29 7F                and     #$7F
00FA22  1  99 FF 00             sta     $FF,y
00FA25  1  C6 A8                dec     INDX
00FA27  1  D0 06                bne     L3D3E
00FA29  1  A9 2E                lda     #$2E
00FA2B  1  C8                   iny
00FA2C  1  99 FF 00             sta     $FF,y
00FA2F  1               L3D3E:
00FA2F  1  84 BA                sty     STRNG2
00FA31  1  A4 95                ldy     VARPNT
00FA33  1  8A                   txa
00FA34  1  49 FF                eor     #$FF
00FA36  1  29 80                and     #$80
00FA38  1  AA                   tax
00FA39  1  C0 12                cpy     #DECTBL_END-DECTBL
00FA3B  1  D0 B2                bne     L3CF6
00FA3D  1               ; ----------------------------------------------------------------------------
00FA3D  1               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
00FA3D  1               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
00FA3D  1               ; DECIMAL POINT.
00FA3D  1               ; ----------------------------------------------------------------------------
00FA3D  1  A4 BA                ldy     STRNG2
00FA3F  1               L3D4E:
00FA3F  1  B9 FF 00             lda     $FF,y
00FA42  1  88                   dey
00FA43  1  C9 30                cmp     #$30
00FA45  1  F0 F8                beq     L3D4E
00FA47  1  C9 2E                cmp     #$2E
00FA49  1  F0 01                beq     L3D5B
00FA4B  1  C8                   iny
00FA4C  1               L3D5B:
00FA4C  1  A9 2B                lda     #$2B
00FA4E  1  A6 A9                ldx     EXPON
00FA50  1  F0 2E                beq     L3D8F
00FA52  1  10 08                bpl     L3D6B
00FA54  1  A9 00                lda     #$00
00FA56  1  38                   sec
00FA57  1  E5 A9                sbc     EXPON
00FA59  1  AA                   tax
00FA5A  1  A9 2D                lda     #$2D
00FA5C  1               L3D6B:
00FA5C  1  99 01 01             sta     STACK+1,y
00FA5F  1  A9 45                lda     #$45
00FA61  1  99 00 01             sta     STACK,y
00FA64  1  8A                   txa
00FA65  1  A2 2F                ldx     #$2F
00FA67  1  38                   sec
00FA68  1               L3D77:
00FA68  1  E8                   inx
00FA69  1  E9 0A                sbc     #$0A
00FA6B  1  B0 FB                bcs     L3D77
00FA6D  1  69 3A                adc     #$3A
00FA6F  1  99 03 01             sta     STACK+3,y
00FA72  1  8A                   txa
00FA73  1  99 02 01             sta     STACK+2,y
00FA76  1  A9 00                lda     #$00
00FA78  1  99 04 01             sta     STACK+4,y
00FA7B  1  F0 08                beq     L3D94
00FA7D  1               FOUT4:
00FA7D  1  99 FF 00             sta     $FF,y
00FA80  1               L3D8F:
00FA80  1  A9 00                lda     #$00
00FA82  1  99 00 01             sta     STACK,y
00FA85  1               L3D94:
00FA85  1  A9 00                lda     #$00
00FA87  1  A0 01                ldy     #$01
00FA89  1  60                   rts
00FA8A  1               ; ----------------------------------------------------------------------------
00FA8A  1               CON_HALF:
00FA8A  1  80 00 00 00          .byte   $80,$00,$00,$00
00FA8E  1               ; ----------------------------------------------------------------------------
00FA8E  1               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00FA8E  1               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00FA8E  1               ; ----------------------------------------------------------------------------
00FA8E  1               DECTBL:
00FA8E  1  FE 79 60             .byte   $FE,$79,$60 ; -100000
00FA91  1  00 27 10     		.byte	$00,$27,$10 ; 10000
00FA94  1  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
00FA97  1  00 00 64     		.byte	$00,$00,$64 ; 100
00FA9A  1  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00FA9D  1  00 00 01     		.byte	$00,$00,$01 ; 1
00FAA0  1               DECTBL_END:
00FAA0  1               ; ----------------------------------------------------------------------------
00FAA0  1               ; "SQR" FUNCTION
00FAA0  1               ; ----------------------------------------------------------------------------
00FAA0  1               SQR:
00FAA0  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00FAA3  1  A9 8A                lda     #<CON_HALF
00FAA5  1  A0 FA                ldy     #>CON_HALF
00FAA7  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00FAAA  1               ; ----------------------------------------------------------------------------
00FAAA  1               ; EXPONENTIATION OPERATION
00FAAA  1               ;
00FAAA  1               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
00FAAA  1               ; ----------------------------------------------------------------------------
00FAAA  1               FPWRT:
00FAAA  1  F0 63                beq     EXP
00FAAC  1  A5 B3                lda     ARG
00FAAE  1  D0 03                bne     L3DD5
00FAB0  1  4C E7 F4             jmp     STA_IN_FAC_SIGN_AND_EXP
00FAB3  1               L3DD5:
00FAB3  1  A2 9C                ldx     #TEMP3
00FAB5  1  A0 00                ldy     #$00
00FAB7  1  20 6C F7             jsr     STORE_FAC_AT_YX_ROUNDED
00FABA  1  A5 B7                lda     ARGSIGN
00FABC  1  10 0F                bpl     L3DEF
00FABE  1  20 56 F8             jsr     INT
00FAC1  1  A9 9C                lda     #TEMP3
00FAC3  1  A0 00                ldy     #$00
00FAC5  1  20 EC F7             jsr     FCOMP
00FAC8  1  D0 03                bne     L3DEF
00FACA  1  98                   tya
00FACB  1  A4 5B                ldy     CHARAC
00FACD  1               L3DEF:
00FACD  1  20 91 F7             jsr     MFA
00FAD0  1  98                   tya
00FAD1  1  48                   pha
00FAD2  1  20 B1 F5             jsr     LOG
00FAD5  1  A9 9C                lda     #TEMP3
00FAD7  1  A0 00                ldy     #$00
00FAD9  1  20 EF F5             jsr     FMULT
00FADC  1  20 0F FB             jsr     EXP
00FADF  1  68                   pla
00FAE0  1  4A                   lsr     a
00FAE1  1  90 0A                bcc     L3E0F
00FAE3  1               ; ----------------------------------------------------------------------------
00FAE3  1               ; NEGATE VALUE IN FAC
00FAE3  1               ; ----------------------------------------------------------------------------
00FAE3  1               NEGOP:
00FAE3  1  A5 AC                lda     FAC
00FAE5  1  F0 06                beq     L3E0F
00FAE7  1  A5 B0                lda     FACSIGN
00FAE9  1  49 FF                eor     #$FF
00FAEB  1  85 B0                sta     FACSIGN
00FAED  1               L3E0F:
00FAED  1  60                   rts
00FAEE  1               ; ----------------------------------------------------------------------------
00FAEE  1               CON_LOG_E:
00FAEE  1  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00FAF2  1               POLY_EXP:
00FAF2  1  06           		.byte	$06
00FAF3  1  74 63 90 8C  		.byte	$74,$63,$90,$8C
00FAF7  1  77 23 0C AB  		.byte	$77,$23,$0C,$AB
00FAFB  1  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
00FAFF  1  7C 63 42 80  		.byte	$7C,$63,$42,$80
00FB03  1  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
00FB07  1  80 31 72 15  		.byte	$80,$31,$72,$15
00FB0B  1  81 00 00 00  		.byte	$81,$00,$00,$00
00FB0F  1               ; ----------------------------------------------------------------------------
00FB0F  1               ; "EXP" FUNCTION
00FB0F  1               ;
00FB0F  1               ; FAC = E ^ FAC
00FB0F  1               ; ----------------------------------------------------------------------------
00FB0F  1               EXP:
00FB0F  1  A9 EE                lda     #<CON_LOG_E
00FB11  1  A0 FA                ldy     #>CON_LOG_E
00FB13  1  20 EF F5             jsr     FMULT
00FB16  1  A5 B9                lda     FACEXTENSION
00FB18  1  69 50                adc     #$50
00FB1A  1  90 03                bcc     L3E4E
00FB1C  1  20 B6 F7             jsr     INCREMENT_MANTISSA
00FB1F  1               L3E4E:
00FB1F  1  85 A3                sta     ARGEXTENSION
00FB21  1  20 A2 F7             jsr     MAF
00FB24  1  A5 AC                lda     FAC
00FB26  1  C9 88                cmp     #$88
00FB28  1  90 03                bcc     L3E5C
00FB2A  1               L3E59:
00FB2A  1  20 84 F6             jsr     OUTOFRNG
00FB2D  1               L3E5C:
00FB2D  1  20 56 F8             jsr     INT
00FB30  1  A5 5B                lda     CHARAC
00FB32  1  18                   clc
00FB33  1  69 81                adc     #$81
00FB35  1  F0 F3                beq     L3E59
00FB37  1  38                   sec
00FB38  1  E9 01                sbc     #$01
00FB3A  1  48                   pha
00FB3B  1  A2 04                ldx     #BYTES_FP
00FB3D  1               L3E6C:
00FB3D  1  B5 B3                lda     ARG,x
00FB3F  1  B4 AC                ldy     FAC,x
00FB41  1  95 AC                sta     FAC,x
00FB43  1  94 B3                sty     ARG,x
00FB45  1  CA                   dex
00FB46  1  10 F5                bpl     L3E6C
00FB48  1  A5 A3                lda     ARGEXTENSION
00FB4A  1  85 B9                sta     FACEXTENSION
00FB4C  1  20 4C F4             jsr     FSUBT
00FB4F  1  20 E3 FA             jsr     NEGOP
00FB52  1  A9 F2                lda     #<POLY_EXP
00FB54  1  A0 FA                ldy     #>POLY_EXP
00FB56  1  20 78 FB             jsr     POLYNOMIAL
00FB59  1  A9 00                lda     #$00
00FB5B  1  85 B8                sta     SGNCPR
00FB5D  1  68                   pla
00FB5E  1  20 69 F6             jsr     ADD_EXPONENTS1
00FB61  1  60                   rts
00FB62  1               ; ----------------------------------------------------------------------------
00FB62  1               ; ODD POLYNOMIAL SUBROUTINE
00FB62  1               ;
00FB62  1               ; F(X) = X * P(X^2)
00FB62  1               ;
00FB62  1               ; WHERE:  X IS VALUE IN FAC
00FB62  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00FB62  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00FB62  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00FB62  1               ;
00FB62  1               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
00FB62  1               ; ----------------------------------------------------------------------------
00FB62  1               POLYNOMIAL_ODD:
00FB62  1  85 BA                sta     STRNG2
00FB64  1  84 BB                sty     STRNG2+1
00FB66  1  20 62 F7             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00FB69  1  A9 A4                lda     #TEMP1X
00FB6B  1  20 EF F5             jsr     FMULT
00FB6E  1  20 7C FB             jsr     SERMAIN
00FB71  1  A9 A4                lda     #TEMP1X
00FB73  1  A0 00                ldy     #$00
00FB75  1  4C EF F5             jmp     FMULT
00FB78  1               ; ----------------------------------------------------------------------------
00FB78  1               ; NORMAL POLYNOMIAL SUBROUTINE
00FB78  1               ;
00FB78  1               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
00FB78  1               ;
00FB78  1               ; WHERE:  X IS VALUE IN FAC
00FB78  1               ;	Y,A POINTS AT COEFFICIENT TABLE
00FB78  1               ;	FIRST BYTE OF COEFF. TABLE IS N
00FB78  1               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
00FB78  1               ; ----------------------------------------------------------------------------
00FB78  1               POLYNOMIAL:
00FB78  1  85 BA                sta     STRNG2
00FB7A  1  84 BB                sty     STRNG2+1
00FB7C  1               SERMAIN:
00FB7C  1  20 5F F7             jsr     STORE_FAC_IN_TEMP2_ROUNDED
00FB7F  1  B1 BA                lda     (STRNG2),y
00FB81  1  85 B1                sta     SERLEN
00FB83  1  A4 BA                ldy     STRNG2
00FB85  1  C8                   iny
00FB86  1  98                   tya
00FB87  1  D0 02                bne     L3EBA
00FB89  1  E6 BB                inc     STRNG2+1
00FB8B  1               L3EBA:
00FB8B  1  85 BA                sta     STRNG2
00FB8D  1  A4 BB                ldy     STRNG2+1
00FB8F  1               L3EBE:
00FB8F  1  20 EF F5             jsr     FMULT
00FB92  1  A5 BA                lda     STRNG2
00FB94  1  A4 BB                ldy     STRNG2+1
00FB96  1  18                   clc
00FB97  1  69 04                adc     #BYTES_FP
00FB99  1  90 01                bcc     L3ECB
00FB9B  1  C8                   iny
00FB9C  1               L3ECB:
00FB9C  1  85 BA                sta     STRNG2
00FB9E  1  84 BB                sty     STRNG2+1
00FBA0  1  20 60 F4             jsr     FADD
00FBA3  1  A9 A8                lda     #TEMP2
00FBA5  1  A0 00                ldy     #$00
00FBA7  1  C6 B1                dec     SERLEN
00FBA9  1  D0 E4                bne     L3EBE
00FBAB  1               RTS19:
00FBAB  1  60                   rts
00FBAC  1               ; ----------------------------------------------------------------------------
00FBAC  1               ; "RND" FUNCTION
00FBAC  1               ; ----------------------------------------------------------------------------
00FBAC  1               CONRND1:
00FBAC  1  98 35 44 7A          .byte   $98,$35,$44,$7A
00FBB0  1               CONRND2:
00FBB0  1  68 28 B1 46          .byte   $68,$28,$B1,$46
00FBB4  1               RND:
00FBB4  1  20 BE F7             jsr     SIGN
00FBB7  1  AA                   tax
00FBB8  1  30 18                bmi     L3F01
00FBBA  1  A9 D4                lda     #<RNDSEED
00FBBC  1  A0 00                ldy     #>RNDSEED
00FBBE  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00FBC1  1  8A                   txa
00FBC2  1  F0 E7                beq     RTS19
00FBC4  1  A9 AC                lda     #<CONRND1
00FBC6  1  A0 FB                ldy     #>CONRND1
00FBC8  1  20 EF F5             jsr     FMULT
00FBCB  1  A9 B0                lda     #<CONRND2
00FBCD  1  A0 FB                ldy     #>CONRND2
00FBCF  1  20 60 F4             jsr     FADD
00FBD2  1               L3F01:
00FBD2  1  A6 AF                ldx     FAC_LAST
00FBD4  1  A5 AD                lda     FAC+1
00FBD6  1  85 AF                sta     FAC_LAST
00FBD8  1  86 AD                stx     FAC+1
00FBDA  1  A9 00                lda     #$00
00FBDC  1  85 B0                sta     FACSIGN
00FBDE  1  A5 AC                lda     FAC
00FBE0  1  85 B9                sta     FACEXTENSION
00FBE2  1  A9 80                lda     #$80
00FBE4  1  85 AC                sta     FAC
00FBE6  1  20 C9 F4             jsr     NORMALIZE_FAC2
00FBE9  1  A2 D4                ldx     #<RNDSEED
00FBEB  1  A0 00                ldy     #>RNDSEED
00FBED  1               GOMOVMF:
00FBED  1  4C 6C F7             jmp     STORE_FAC_AT_YX_ROUNDED
00FBF0  1               ; ----------------------------------------------------------------------------
00FBF0  1               ; "COS" FUNCTION
00FBF0  1               ; ----------------------------------------------------------------------------
00FBF0  1               COS:
00FBF0  1  A9 6C                lda     #<CON_PI_HALF
00FBF2  1  A0 FC                ldy     #>CON_PI_HALF
00FBF4  1  20 60 F4             jsr     FADD
00FBF7  1               ; ----------------------------------------------------------------------------
00FBF7  1               ; "SIN" FUNCTION
00FBF7  1               ; ----------------------------------------------------------------------------
00FBF7  1               SIN:
00FBF7  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00FBFA  1  A9 70                lda     #<CON_PI_DOUB
00FBFC  1  A0 FC                ldy     #>CON_PI_DOUB
00FBFE  1  A6 B7                ldx     ARGSIGN
00FC00  1  20 B6 F6             jsr     DIV
00FC03  1  20 9F F7             jsr     COPY_FAC_TO_ARG_ROUNDED
00FC06  1  20 56 F8             jsr     INT
00FC09  1  A9 00                lda     #$00
00FC0B  1  85 B8                sta     STRNG1
00FC0D  1  20 4C F4             jsr     FSUBT
00FC10  1               ; ----------------------------------------------------------------------------
00FC10  1               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
00FC10  1               ;
00FC10  1               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
00FC10  1               ;
00FC10  1               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
00FC10  1               ; ----------------------------------------------------------------------------
00FC10  1  A9 74                lda     #<QUARTER
00FC12  1  A0 FC                ldy     #>QUARTER
00FC14  1  20 49 F4             jsr     FSUB
00FC17  1  A5 B0                lda     FACSIGN
00FC19  1  48                   pha
00FC1A  1  10 0D                bpl     SIN1
00FC1C  1  20 42 F4             jsr     FADDH
00FC1F  1  A5 B0                lda     FACSIGN
00FC21  1  30 09                bmi     L3F5B
00FC23  1  A5 63                lda     CPRMASK
00FC25  1  49 FF                eor     #$FF
00FC27  1  85 63                sta     CPRMASK
00FC29  1               ; ----------------------------------------------------------------------------
00FC29  1               ; IF FALL THRU, RANGE IS 0...1/2
00FC29  1               ; IF BRANCH HERE, RANGE IS 0...1/4
00FC29  1               ; ----------------------------------------------------------------------------
00FC29  1               SIN1:
00FC29  1  20 E3 FA             jsr     NEGOP
00FC2C  1               ; ----------------------------------------------------------------------------
00FC2C  1               ; IF FALL THRU, RANGE IS -1/2...0
00FC2C  1               ; IF BRANCH HERE, RANGE IS -1/4...0
00FC2C  1               ; ----------------------------------------------------------------------------
00FC2C  1               L3F5B:
00FC2C  1  A9 74                lda     #<QUARTER
00FC2E  1  A0 FC                ldy     #>QUARTER
00FC30  1  20 60 F4             jsr     FADD
00FC33  1  68                   pla
00FC34  1  10 03                bpl     L3F68
00FC36  1  20 E3 FA             jsr     NEGOP
00FC39  1               L3F68:
00FC39  1  A9 78                lda     #<POLY_SIN
00FC3B  1  A0 FC                ldy     #>POLY_SIN
00FC3D  1  4C 62 FB             jmp     POLYNOMIAL_ODD
00FC40  1               ; ----------------------------------------------------------------------------
00FC40  1               ; "TAN" FUNCTION
00FC40  1               ;
00FC40  1               ; COMPUTE TAN(X) = SIN(X) / COS(X)
00FC40  1               ; ----------------------------------------------------------------------------
00FC40  1               TAN:
00FC40  1  20 62 F7             jsr     STORE_FAC_IN_TEMP1_ROUNDED
00FC43  1  A9 00                lda     #$00
00FC45  1  85 63                sta     CPRMASK
00FC47  1  20 F7 FB             jsr     SIN
00FC4A  1  A2 9C                ldx     #TEMP3
00FC4C  1  A0 00                ldy     #$00
00FC4E  1  20 ED FB             jsr     GOMOVMF
00FC51  1  A9 A4                lda     #TEMP1+(5-BYTES_FP)
00FC53  1  A0 00                ldy     #$00
00FC55  1  20 3F F7             jsr     LOAD_FAC_FROM_YA
00FC58  1  A9 00                lda     #$00
00FC5A  1  85 B0                sta     FACSIGN
00FC5C  1  A5 63                lda     CPRMASK
00FC5E  1  20 68 FC             jsr     TAN1
00FC61  1  A9 9C                lda     #TEMP3
00FC63  1  A0 00                ldy     #$00
00FC65  1  4C BE F6             jmp     FDIV
00FC68  1               TAN1:
00FC68  1  48                   pha
00FC69  1  4C 29 FC             jmp     SIN1
00FC6C  1               ; ----------------------------------------------------------------------------
00FC6C  1               CON_PI_HALF:
00FC6C  1  81 49 0F DB          .byte   $81,$49,$0F,$DB
00FC70  1               CON_PI_DOUB:
00FC70  1  83 49 0F DB          .byte   $83,$49,$0F,$DB
00FC74  1               QUARTER:
00FC74  1  7F 00 00 00          .byte   $7F,$00,$00,$00
00FC78  1               POLY_SIN:
00FC78  1  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
00FC7C  1  FB 87 99 26  
00FC80  1  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
00FC84  1  58 86 A5 5D  
00FC88  1  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
00FC8C  1  DB           
00FC8D  1               
00FC8D  1               ; ----------------------------------------------------------------------------
00FC8D  1               ; "ATN" FUNCTION
00FC8D  1               ; ----------------------------------------------------------------------------
00FC8D  1               ATN:
00FC8D  1  A5 B0                lda     FACSIGN
00FC8F  1  48                   pha
00FC90  1  10 03                bpl     L3FDB
00FC92  1  20 E3 FA             jsr     NEGOP
00FC95  1               L3FDB:
00FC95  1  A5 AC                lda     FAC
00FC97  1  48                   pha
00FC98  1  C9 81                cmp     #$81
00FC9A  1  90 07                bcc     L3FE9
00FC9C  1  A9 90                lda     #<CON_ONE
00FC9E  1  A0 F5                ldy     #>CON_ONE
00FCA0  1  20 BE F6             jsr     FDIV
00FCA3  1               ; ----------------------------------------------------------------------------
00FCA3  1               ; 0 <= X <= 1
00FCA3  1               ; 0 <= ATN(X) <= PI/8
00FCA3  1               ; ----------------------------------------------------------------------------
00FCA3  1               L3FE9:
00FCA3  1  A9 BD                lda     #<POLY_ATN
00FCA5  1  A0 FC                ldy     #>POLY_ATN
00FCA7  1  20 62 FB             jsr     POLYNOMIAL_ODD
00FCAA  1  68                   pla
00FCAB  1  C9 81                cmp     #$81
00FCAD  1  90 07                bcc     L3FFC
00FCAF  1  A9 6C                lda     #<CON_PI_HALF
00FCB1  1  A0 FC                ldy     #>CON_PI_HALF
00FCB3  1  20 49 F4             jsr     FSUB
00FCB6  1               L3FFC:
00FCB6  1  68                   pla
00FCB7  1  10 03                bpl     L4002
00FCB9  1  4C E3 FA             jmp     NEGOP
00FCBC  1               L4002:
00FCBC  1  60                   rts
00FCBD  1               ; ----------------------------------------------------------------------------
00FCBD  1               POLY_ATN:
00FCBD  1  08                   .byte   $08
00FCBE  1  78 3A C5 37  		.byte	$78,$3A,$C5,$37
00FCC2  1  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
00FCC6  1  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
00FCCA  1  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
00FCCE  1  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
00FCD2  1  7E 91 72 00  		.byte	$7E,$91,$72,$00
00FCD6  1  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
00FCDA  1  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
00FCDE  1  81 00 00 00  		.byte	$81,$00,$00,$00
00FCE2  1               GENERIC_CHRGET:
00FCE2  1  E6 C3                inc     TXTPTR
00FCE4  1  D0 02                bne     GENERIC_CHRGOT
00FCE6  1  E6 C4                inc     TXTPTR+1
00FCE8  1               GENERIC_CHRGOT:
00FCE8  1               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
00FCE8  1  AD 60 EA             lda     $EA60
00FCEB  1  C9 3A                cmp     #$3A
00FCED  1  B0 0A                bcs     L4058
00FCEF  1               GENERIC_CHRGOT2:
00FCEF  1  C9 20                cmp     #$20
00FCF1  1  F0 EF                beq     GENERIC_CHRGET
00FCF3  1  38                   sec
00FCF4  1  E9 30                sbc     #$30
00FCF6  1  38                   sec
00FCF7  1  E9 D0                sbc     #$D0
00FCF9  1               L4058:
00FCF9  1  60                   rts
00FCFA  1               GENERIC_RNDSEED:
00FCFA  1               ; random number seed
00FCFA  1  80 4F C7 52          .byte   $80,$4F,$C7,$52
00FCFE  1               GENERIC_CHRGET_END:
00FCFE  1               ; ----------------------------------------------------------------------------
00FCFE  1               PR_WRITTEN_BY:
00FCFE  1  A9 42                lda     #<QT_WRITTEN_BY
00FD00  1  A0 FE                ldy     #>QT_WRITTEN_BY
00FD02  1  20 B7 E8             jsr     STROUT
00FD05  1               COLD_START:
00FD05  1  A2 FF                ldx     #$FF
00FD07  1  86 88                stx     CURLIN+1
00FD09  1  9A                   txs
00FD0A  1  A9 05                lda     #<COLD_START
00FD0C  1  A0 FD                ldy     #>COLD_START
00FD0E  1  85 01                sta     GORESTART+1
00FD10  1  84 02                sty     GORESTART+2
00FD12  1  85 04                sta     GOSTROUT+1
00FD14  1  84 05                sty     GOSTROUT+2
00FD16  1  A9 F9                lda     #<AYINT
00FD18  1  A0 ED                ldy     #>AYINT
00FD1A  1  85 06                sta     GOAYINT
00FD1C  1  84 07                sty     GOAYINT+1
00FD1E  1  A9 B5                lda     #<GIVAYF
00FD20  1  A0 EF                ldy     #>GIVAYF
00FD22  1  85 08                sta     GOGIVEAYF
00FD24  1  84 09                sty     GOGIVEAYF+1
00FD26  1  A9 4C                lda     #$4C
00FD28  1  85 00                sta     GORESTART
00FD2A  1  85 03                sta     GOSTROUT
00FD2C  1  85 A1                sta     JMPADRS
00FD2E  1  85 0A                sta     USR
00FD30  1  A9 7C                lda     #<IQERR
00FD32  1  A0 EE                ldy     #>IQERR
00FD34  1  85 0B                sta     USR+1
00FD36  1  84 0C                sty     USR+2
00FD38  1  A9 48                lda     #WIDTH
00FD3A  1  85 0F                sta     Z17
00FD3C  1  A9 38                lda     #WIDTH2
00FD3E  1  85 10                sta     Z18
00FD40  1  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00FD42  1               L4098:
00FD42  1  BD E1 FC             lda     GENERIC_CHRGET-1,x
00FD45  1  95 BB                sta     CHRGET-1,x
00FD47  1  CA                   dex
00FD48  1  D0 F8                bne     L4098
00FD4A  1  8A                   txa
00FD4B  1  85 B2                sta     SHIFTSIGNEXT
00FD4D  1  85 67                sta     LASTPT+1
00FD4F  1  85 0D                sta     Z15
00FD51  1  85 0E                sta     POSX
00FD53  1  48                   pha
00FD54  1  85 64                sta     Z14
00FD56  1  A9 03                lda     #$03
00FD58  1  85 A0                sta     DSCLEN
00FD5A  1  A9 2C                lda     #$2C
00FD5C  1  85 12                sta     LINNUM+1
00FD5E  1  20 60 E8             jsr     CRDO
00FD61  1  A2 68                ldx     #TEMPST
00FD63  1  86 65                stx     TEMPPT
00FD65  1  A9 66                lda     #<QT_MEMORY_SIZE
00FD67  1  A0 FE                ldy     #>QT_MEMORY_SIZE
00FD69  1  20 B7 E8             jsr     STROUT
00FD6C  1  20 3A E9             jsr     NXIN
00FD6F  1  86 C3                stx     TXTPTR
00FD71  1  84 C4                sty     TXTPTR+1
00FD73  1  20 BC 00             jsr     CHRGET
00FD76  1  C9 41                cmp     #$41
00FD78  1  F0 84                beq     PR_WRITTEN_BY
00FD7A  1  A8                   tay
00FD7B  1  D0 21                bne     L40EE
00FD7D  1  A9 00                lda     #<RAMSTART2
00FD7F  1  A0 02                ldy     #>RAMSTART2
00FD81  1  85 11                sta     LINNUM
00FD83  1  84 12                sty     LINNUM+1
00FD85  1  A0 00                ldy     #$00
00FD87  1               L40D7:
00FD87  1  E6 11                inc     LINNUM
00FD89  1  D0 02                bne     L40DD
00FD8B  1  E6 12                inc     LINNUM+1
00FD8D  1               L40DD:
00FD8D  1  A9 92                lda     #$92 ; 10010010 / 00100100
00FD8F  1  91 11                sta     (LINNUM),y
00FD91  1  D1 11                cmp     (LINNUM),y
00FD93  1  D0 15                bne     L40FA
00FD95  1  0A                   asl     a
00FD96  1  91 11                sta     (LINNUM),y
00FD98  1  D1 11                cmp     (LINNUM),y
00FD9A  1  F0 EB                beq     L40D7; old: faster
00FD9C  1  D0 0C                bne     L40FA
00FD9E  1               L40EE:
00FD9E  1  20 C2 00             jsr     CHRGOT
00FDA1  1  20 73 E7             jsr     LINGET
00FDA4  1  A8                   tay
00FDA5  1  F0 03                beq     L40FA
00FDA7  1  4C 00 EC             jmp     SYNERR
00FDAA  1               L40FA:
00FDAA  1  A5 11                lda     LINNUM
00FDAC  1  A4 12                ldy     LINNUM+1
00FDAE  1  85 85                sta     MEMSIZ
00FDB0  1  84 86                sty     MEMSIZ+1
00FDB2  1  85 81                sta     FRETOP
00FDB4  1  84 82                sty     FRETOP+1
00FDB6  1               L4106:
00FDB6  1  A9 72                lda     #<QT_TERMINAL_WIDTH
00FDB8  1  A0 FE                ldy     #>QT_TERMINAL_WIDTH
00FDBA  1  20 B7 E8             jsr     STROUT
00FDBD  1  20 3A E9             jsr     NXIN
00FDC0  1  86 C3                stx     TXTPTR
00FDC2  1  84 C4                sty     TXTPTR+1
00FDC4  1  20 BC 00             jsr     CHRGET
00FDC7  1  A8                   tay
00FDC8  1  F0 1C                beq     L4136
00FDCA  1  20 73 E7             jsr     LINGET
00FDCD  1  A5 12                lda     LINNUM+1
00FDCF  1  D0 E5                bne     L4106
00FDD1  1  A5 11                lda     LINNUM
00FDD3  1  C9 10                cmp     #$10
00FDD5  1  90 DF                bcc     L4106
00FDD7  1  85 0F                sta     Z17
00FDD9  1               L4129:
00FDD9  1  E9 0E                sbc     #$0E
00FDDB  1  B0 FC                bcs     L4129
00FDDD  1  49 FF                eor     #$FF
00FDDF  1  E9 0C                sbc     #$0C
00FDE1  1  18                   clc
00FDE2  1  65 0F                adc     Z17
00FDE4  1  85 10                sta     Z18
00FDE6  1               L4136:
00FDE6  1  A2 00                ldx     #<RAMSTART2
00FDE8  1  A0 02                ldy     #>RAMSTART2
00FDEA  1  86 79                stx     TXTTAB
00FDEC  1  84 7A                sty     TXTTAB+1
00FDEE  1  A0 00                ldy     #$00
00FDF0  1  98                   tya
00FDF1  1  91 79                sta     (TXTTAB),y
00FDF3  1  E6 79                inc     TXTTAB
00FDF5  1  D0 02                bne     L4192
00FDF7  1  E6 7A                inc     TXTTAB+1
00FDF9  1               L4192:
00FDF9  1  A5 79                lda     TXTTAB
00FDFB  1  A4 7A                ldy     TXTTAB+1
00FDFD  1  20 1F E2             jsr     REASON
00FE00  1  20 60 E8             jsr     CRDO
00FE03  1  A5 85                lda     MEMSIZ
00FE05  1  38                   sec
00FE06  1  E5 79                sbc     TXTTAB
00FE08  1  AA                   tax
00FE09  1  A5 86                lda     MEMSIZ+1
00FE0B  1  E5 7A                sbc     TXTTAB+1
00FE0D  1  20 52 F9             jsr     LINPRT
00FE10  1  A9 81                lda     #<QT_BYTES_FREE
00FE12  1  A0 FE                ldy     #>QT_BYTES_FREE
00FE14  1  20 B7 E8             jsr     STROUT
00FE17  1  A9 B7                lda     #<STROUT
00FE19  1  A0 E8                ldy     #>STROUT
00FE1B  1  85 04                sta     GOSTROUT+1
00FE1D  1  84 05                sty     GOSTROUT+2
00FE1F  1  20 63 E4             jsr     SCRTCH
00FE22  1  A9 74                lda     #<RESTART
00FE24  1  A0 E2                ldy     #>RESTART
00FE26  1  85 01                sta     GORESTART+1
00FE28  1  84 02                sty     GORESTART+2
00FE2A  1  6C 01 00             jmp     (GORESTART+1)
00FE2D  1               ; OSI is compiled for ROM, but includes
00FE2D  1               ; this unused string
00FE2D  1  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
00FE31  1  20 53 49 4E  
00FE35  1  2D 43 4F 53  
00FE41  1  00                   .byte   0
00FE42  1               QT_WRITTEN_BY:
00FE42  1  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00FE45  1  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00FE49  1  54 45 4E 20  
00FE4D  1  42 59 20 52  
00FE63  1  0D 0A 00             .byte   CR,LF,0
00FE66  1               QT_MEMORY_SIZE:
00FE66  1  4D 45 4D 4F          .byte   "MEMORY SIZE"
00FE6A  1  52 59 20 53  
00FE6E  1  49 5A 45     
00FE71  1  00                   .byte   0
00FE72  1               QT_TERMINAL_WIDTH:
00FE72  1  54 45 52 4D          .byte   "TERMINAL WIDTH"
00FE76  1  49 4E 41 4C  
00FE7A  1  20 57 49 44  
00FE80  1  00                   .byte   0
00FE81  1               QT_BYTES_FREE:
00FE81  1  20 42 59 54          .byte   " BYTES FREE"
00FE85  1  45 53 20 46  
00FE89  1  52 45 45     
00FE8C  1  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00FE90  1  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00FE94  1  36 35 30 32  
00FE98  1  20 42 41 53  
00FEB2  1  0D 0A                .byte   CR,LF
00FEB4  1  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00FEB8  1  52 49 47 48  
00FEBC  1  54 20 31 39  
00FED3  1  0D 0A 00             .byte   CR,LF,0
00FED6  1               
00FED6  1               ; STARTUP AND SERIAL I/O ROUTINES ===========================================================
00FED6  1               ; BY G. SEARLE 2013 =========================================================================
00FED6  1               ACIA := $A000
00FED6  1               ACIAControl := ACIA+0
00FED6  1               ACIAStatus := ACIA+0
00FED6  1               ACIAData := ACIA+1
00FED6  1               
00FED6  1               .segment "IOHANDLER"
000000r 1               .org $FF00
00FF00  1               Reset:
00FF00  1  A2 FC        	LDX     #STACK_TOP
00FF02  1  9A           	TXS
00FF03  1               
00FF03  1  A9 95        	LDA 	#$95		; Set ACIA baud rate, word size and Rx interrupt (to control RTS)
00FF05  1  8D 00 A0     	STA	ACIAControl
00FF08  1               
00FF08  1               ; Display startup message
00FF08  1  A0 00        	LDY #0
00FF0A  1               ShowStartMsg:
00FF0A  1  B9 56 FF     	LDA	StartupMessage,Y
00FF0D  1  F0 06        	BEQ	WaitForKeypress
00FF0F  1  20 2A FF     	JSR	MONCOUT
00FF12  1  C8           	INY
00FF13  1  D0 F5        	BNE	ShowStartMsg
00FF15  1               
00FF15  1               ; Wait for a cold/warm start selection
00FF15  1               WaitForKeypress:
00FF15  1  20 39 FF     	JSR	MONRDKEY
00FF18  1  90 FB        	BCC	WaitForKeypress
00FF1A  1               
00FF1A  1  29 DF        	AND	#$DF			; Make upper case
00FF1C  1  C9 57        	CMP	#'W'			; compare with [W]arm start
00FF1E  1  F0 07        	BEQ	WarmStart
00FF20  1               
00FF20  1  C9 43        	CMP	#'C'			; compare with [C]old start
00FF22  1  D0 DC        	BNE	Reset
00FF24  1               
00FF24  1  4C 05 FD     	JMP	COLD_START	; BASIC cold start
00FF27  1               
00FF27  1               WarmStart:
00FF27  1  4C 74 E2     	JMP	RESTART		; BASIC warm start
00FF2A  1               
00FF2A  1               MONCOUT:
00FF2A  1  48           	PHA
00FF2B  1               SerialOutWait:
00FF2B  1  AD 00 A0     	LDA	ACIAStatus
00FF2E  1  29 02        	AND	#2
00FF30  1  C9 02        	CMP	#2
00FF32  1  D0 F7        	BNE	SerialOutWait
00FF34  1  68           	PLA
00FF35  1  8D 01 A0     	STA	ACIAData
00FF38  1  60           	RTS
00FF39  1               
00FF39  1               MONRDKEY:
00FF39  1  AD 00 A0     	LDA	ACIAStatus
00FF3C  1  29 01        	AND	#1
00FF3E  1  C9 01        	CMP	#1
00FF40  1  D0 05        	BNE	NoDataIn
00FF42  1  AD 01 A0     	LDA	ACIAData
00FF45  1  38           	SEC		; Carry set if key available
00FF46  1  60           	RTS
00FF47  1               NoDataIn:
00FF47  1  18           	CLC		; Carry clear if no key pressed
00FF48  1  60           	RTS
00FF49  1               
00FF49  1               MONISCNTC:
00FF49  1  20 39 FF     	JSR	MONRDKEY
00FF4C  1  90 06        	BCC	NotCTRLC ; If no key pressed then exit
00FF4E  1  C9 03        	CMP	#3
00FF50  1  D0 02        	BNE	NotCTRLC ; if CTRL-C not pressed then exit
00FF52  1  38           	SEC		; Carry set if control C pressed
00FF53  1  60           	RTS
00FF54  1               NotCTRLC:
00FF54  1  18           	CLC		; Carry clear if control C not pressed
00FF55  1  60           	RTS
00FF56  1               
00FF56  1               StartupMessage:
00FF56  1  0C 43 6F 6C  	.byte	$0C,"Cold [C] or warm [W] start?",$0D,$0A,$00
00FF5A  1  64 20 5B 43  
00FF5E  1  5D 20 6F 72  
00FF75  1               
00FF75  1               LOAD:
00FF75  1  60           	RTS
00FF76  1               
00FF76  1               SAVE:
00FF76  1  60           	RTS
00FF77  1               
00FF77  1               .segment "VECTS"
000000r 1               .org $FFFA
00FFFA  1  00 FF        	.word	Reset		; NMI
00FFFC  1  00 FF        	.word	Reset		; RESET
00FFFE  1  00 FF        	.word	Reset		; IRQ
010000  1               
010000  1               
